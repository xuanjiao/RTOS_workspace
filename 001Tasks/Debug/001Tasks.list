
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004350  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000104  08004520  08004520  00014520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004624  08004624  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08004624  08004624  00014624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800462c  0800462c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800462c  0800462c  0001462c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004630  08004630  00014630  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08004634  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012da8  20000078  080046ac  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20012e20  080046ac  00022e20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d900  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022d4  00000000  00000000  0002d9a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d90  00000000  00000000  0002fc80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c78  00000000  00000000  00030a10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000234a7  00000000  00000000  00031688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f76e  00000000  00000000  00054b2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7077  00000000  00000000  0006429d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013b314  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f74  00000000  00000000  0013b364  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004508 	.word	0x08004508

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08004508 	.word	0x08004508

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b088      	sub	sp, #32
 80005b8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005ba:	f000 faf9 	bl	8000bb0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005be:	f000 f845 	bl	800064c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005c2:	f000 f8b1 	bl	8000728 <MX_GPIO_Init>
  BaseType_t status;

  TaskHandle_t task1_handle;
  TaskHandle_t task2_handle;

  status = xTaskCreate( task1_handler,
 80005c6:	f107 0308 	add.w	r3, r7, #8
 80005ca:	9301      	str	r3, [sp, #4]
 80005cc:	2302      	movs	r3, #2
 80005ce:	9300      	str	r3, [sp, #0]
 80005d0:	4b18      	ldr	r3, [pc, #96]	; (8000634 <main+0x80>)
 80005d2:	22c8      	movs	r2, #200	; 0xc8
 80005d4:	4918      	ldr	r1, [pc, #96]	; (8000638 <main+0x84>)
 80005d6:	4819      	ldr	r0, [pc, #100]	; (800063c <main+0x88>)
 80005d8:	f001 fec7 	bl	800236a <xTaskCreate>
 80005dc:	6178      	str	r0, [r7, #20]
                          200, /* 800 bytes */
                          "Hello World from task 1\n",
                          2,
							&task1_handle);

  configASSERT(status == pdPASS);
 80005de:	697b      	ldr	r3, [r7, #20]
 80005e0:	2b01      	cmp	r3, #1
 80005e2:	d00a      	beq.n	80005fa <main+0x46>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80005e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80005e8:	f383 8811 	msr	BASEPRI, r3
 80005ec:	f3bf 8f6f 	isb	sy
 80005f0:	f3bf 8f4f 	dsb	sy
 80005f4:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 80005f6:	bf00      	nop
 80005f8:	e7fe      	b.n	80005f8 <main+0x44>
  status = xTaskCreate( task2_handler,
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	9301      	str	r3, [sp, #4]
 80005fe:	2303      	movs	r3, #3
 8000600:	9300      	str	r3, [sp, #0]
 8000602:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <main+0x8c>)
 8000604:	22c8      	movs	r2, #200	; 0xc8
 8000606:	490f      	ldr	r1, [pc, #60]	; (8000644 <main+0x90>)
 8000608:	480f      	ldr	r0, [pc, #60]	; (8000648 <main+0x94>)
 800060a:	f001 feae 	bl	800236a <xTaskCreate>
 800060e:	6178      	str	r0, [r7, #20]
                          200, /* 800 bytes */
                          "Hello World from task 2\n",
                          3,
							&task2_handle);

  configASSERT(status == pdPASS);
 8000610:	697b      	ldr	r3, [r7, #20]
 8000612:	2b01      	cmp	r3, #1
 8000614:	d00a      	beq.n	800062c <main+0x78>
        __asm volatile
 8000616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800061a:	f383 8811 	msr	BASEPRI, r3
 800061e:	f3bf 8f6f 	isb	sy
 8000622:	f3bf 8f4f 	dsb	sy
 8000626:	60fb      	str	r3, [r7, #12]
    }
 8000628:	bf00      	nop
 800062a:	e7fe      	b.n	800062a <main+0x76>

  // Start the real time scheduler
  vTaskStartScheduler();
 800062c:	f002 f818 	bl	8002660 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000630:	e7fe      	b.n	8000630 <main+0x7c>
 8000632:	bf00      	nop
 8000634:	08004520 	.word	0x08004520
 8000638:	0800453c 	.word	0x0800453c
 800063c:	08000825 	.word	0x08000825
 8000640:	08004544 	.word	0x08004544
 8000644:	08004560 	.word	0x08004560
 8000648:	0800083d 	.word	0x0800083d

0800064c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b094      	sub	sp, #80	; 0x50
 8000650:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000652:	f107 031c 	add.w	r3, r7, #28
 8000656:	2234      	movs	r2, #52	; 0x34
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f002 ffb0 	bl	80035c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000660:	f107 0308 	add.w	r3, r7, #8
 8000664:	2200      	movs	r2, #0
 8000666:	601a      	str	r2, [r3, #0]
 8000668:	605a      	str	r2, [r3, #4]
 800066a:	609a      	str	r2, [r3, #8]
 800066c:	60da      	str	r2, [r3, #12]
 800066e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000670:	2300      	movs	r3, #0
 8000672:	607b      	str	r3, [r7, #4]
 8000674:	4b2a      	ldr	r3, [pc, #168]	; (8000720 <SystemClock_Config+0xd4>)
 8000676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000678:	4a29      	ldr	r2, [pc, #164]	; (8000720 <SystemClock_Config+0xd4>)
 800067a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067e:	6413      	str	r3, [r2, #64]	; 0x40
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <SystemClock_Config+0xd4>)
 8000682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000684:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000688:	607b      	str	r3, [r7, #4]
 800068a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800068c:	2300      	movs	r3, #0
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	4b24      	ldr	r3, [pc, #144]	; (8000724 <SystemClock_Config+0xd8>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000698:	4a22      	ldr	r2, [pc, #136]	; (8000724 <SystemClock_Config+0xd8>)
 800069a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800069e:	6013      	str	r3, [r2, #0]
 80006a0:	4b20      	ldr	r3, [pc, #128]	; (8000724 <SystemClock_Config+0xd8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a8:	603b      	str	r3, [r7, #0]
 80006aa:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006ac:	2302      	movs	r3, #2
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006b4:	2310      	movs	r3, #16
 80006b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b8:	2302      	movs	r3, #2
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006bc:	2300      	movs	r3, #0
 80006be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006c0:	2310      	movs	r3, #16
 80006c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006c4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ca:	2304      	movs	r3, #4
 80006cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006ce:	2302      	movs	r3, #2
 80006d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d6:	f107 031c 	add.w	r3, r7, #28
 80006da:	4618      	mov	r0, r3
 80006dc:	f001 f8a2 	bl	8001824 <HAL_RCC_OscConfig>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006e6:	f000 f8c7 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ea:	230f      	movs	r3, #15
 80006ec:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ee:	2302      	movs	r3, #2
 80006f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f2:	2300      	movs	r3, #0
 80006f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80006f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006fa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	2102      	movs	r1, #2
 8000706:	4618      	mov	r0, r3
 8000708:	f000 fd24 	bl	8001154 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000712:	f000 f8b1 	bl	8000878 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3750      	adds	r7, #80	; 0x50
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
 800071e:	bf00      	nop
 8000720:	40023800 	.word	0x40023800
 8000724:	40007000 	.word	0x40007000

08000728 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b08a      	sub	sp, #40	; 0x28
 800072c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 0314 	add.w	r3, r7, #20
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	2300      	movs	r3, #0
 8000740:	613b      	str	r3, [r7, #16]
 8000742:	4b35      	ldr	r3, [pc, #212]	; (8000818 <MX_GPIO_Init+0xf0>)
 8000744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000746:	4a34      	ldr	r2, [pc, #208]	; (8000818 <MX_GPIO_Init+0xf0>)
 8000748:	f043 0304 	orr.w	r3, r3, #4
 800074c:	6313      	str	r3, [r2, #48]	; 0x30
 800074e:	4b32      	ldr	r3, [pc, #200]	; (8000818 <MX_GPIO_Init+0xf0>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	f003 0304 	and.w	r3, r3, #4
 8000756:	613b      	str	r3, [r7, #16]
 8000758:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	60fb      	str	r3, [r7, #12]
 800075e:	4b2e      	ldr	r3, [pc, #184]	; (8000818 <MX_GPIO_Init+0xf0>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000762:	4a2d      	ldr	r2, [pc, #180]	; (8000818 <MX_GPIO_Init+0xf0>)
 8000764:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000768:	6313      	str	r3, [r2, #48]	; 0x30
 800076a:	4b2b      	ldr	r3, [pc, #172]	; (8000818 <MX_GPIO_Init+0xf0>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	2300      	movs	r3, #0
 8000778:	60bb      	str	r3, [r7, #8]
 800077a:	4b27      	ldr	r3, [pc, #156]	; (8000818 <MX_GPIO_Init+0xf0>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a26      	ldr	r2, [pc, #152]	; (8000818 <MX_GPIO_Init+0xf0>)
 8000780:	f043 0301 	orr.w	r3, r3, #1
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b24      	ldr	r3, [pc, #144]	; (8000818 <MX_GPIO_Init+0xf0>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0301 	and.w	r3, r3, #1
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000792:	2300      	movs	r3, #0
 8000794:	607b      	str	r3, [r7, #4]
 8000796:	4b20      	ldr	r3, [pc, #128]	; (8000818 <MX_GPIO_Init+0xf0>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	4a1f      	ldr	r2, [pc, #124]	; (8000818 <MX_GPIO_Init+0xf0>)
 800079c:	f043 0302 	orr.w	r3, r3, #2
 80007a0:	6313      	str	r3, [r2, #48]	; 0x30
 80007a2:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <MX_GPIO_Init+0xf0>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	f003 0302 	and.w	r3, r3, #2
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80007ae:	2200      	movs	r2, #0
 80007b0:	2120      	movs	r1, #32
 80007b2:	481a      	ldr	r0, [pc, #104]	; (800081c <MX_GPIO_Init+0xf4>)
 80007b4:	f000 fcb4 	bl	8001120 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007be:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0314 	add.w	r3, r7, #20
 80007cc:	4619      	mov	r1, r3
 80007ce:	4814      	ldr	r0, [pc, #80]	; (8000820 <MX_GPIO_Init+0xf8>)
 80007d0:	f000 fb12 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80007d4:	230c      	movs	r3, #12
 80007d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e4:	2307      	movs	r3, #7
 80007e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4619      	mov	r1, r3
 80007ee:	480b      	ldr	r0, [pc, #44]	; (800081c <MX_GPIO_Init+0xf4>)
 80007f0:	f000 fb02 	bl	8000df8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80007f4:	2320      	movs	r3, #32
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4619      	mov	r1, r3
 800080a:	4804      	ldr	r0, [pc, #16]	; (800081c <MX_GPIO_Init+0xf4>)
 800080c:	f000 faf4 	bl	8000df8 <HAL_GPIO_Init>

}
 8000810:	bf00      	nop
 8000812:	3728      	adds	r7, #40	; 0x28
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	40023800 	.word	0x40023800
 800081c:	40020000 	.word	0x40020000
 8000820:	40020800 	.word	0x40020800

08000824 <task1_handler>:

/* USER CODE BEGIN 4 */
static void task1_handler(void* param){
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
	while(1) {
		printf("%s",(char*)param);
 800082c:	6879      	ldr	r1, [r7, #4]
 800082e:	4802      	ldr	r0, [pc, #8]	; (8000838 <task1_handler+0x14>)
 8000830:	f002 fece 	bl	80035d0 <iprintf>
 8000834:	e7fa      	b.n	800082c <task1_handler+0x8>
 8000836:	bf00      	nop
 8000838:	08004568 	.word	0x08004568

0800083c <task2_handler>:
	}
}

 static void task2_handler(void* param){
 800083c:	b580      	push	{r7, lr}
 800083e:	b082      	sub	sp, #8
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	while(1) {
		printf("%s",(char*)param);
 8000844:	6879      	ldr	r1, [r7, #4]
 8000846:	4802      	ldr	r0, [pc, #8]	; (8000850 <task2_handler+0x14>)
 8000848:	f002 fec2 	bl	80035d0 <iprintf>
 800084c:	e7fa      	b.n	8000844 <task2_handler+0x8>
 800084e:	bf00      	nop
 8000850:	08004568 	.word	0x08004568

08000854 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a04      	ldr	r2, [pc, #16]	; (8000874 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000862:	4293      	cmp	r3, r2
 8000864:	d101      	bne.n	800086a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000866:	f000 f9c5 	bl	8000bf4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800086a:	bf00      	nop
 800086c:	3708      	adds	r7, #8
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40001000 	.word	0x40001000

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b480      	push	{r7}
 8000886:	b083      	sub	sp, #12
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000892:	4a0f      	ldr	r2, [pc, #60]	; (80008d0 <HAL_MspInit+0x4c>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000898:	6453      	str	r3, [r2, #68]	; 0x44
 800089a:	4b0d      	ldr	r3, [pc, #52]	; (80008d0 <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b09      	ldr	r3, [pc, #36]	; (80008d0 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ae:	4a08      	ldr	r2, [pc, #32]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	; 0x40
 80008b6:	4b06      	ldr	r3, [pc, #24]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c2:	bf00      	nop
 80008c4:	370c      	adds	r7, #12
 80008c6:	46bd      	mov	sp, r7
 80008c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008cc:	4770      	bx	lr
 80008ce:	bf00      	nop
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08e      	sub	sp, #56	; 0x38
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80008dc:	2300      	movs	r3, #0
 80008de:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80008e4:	2300      	movs	r3, #0
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	4b33      	ldr	r3, [pc, #204]	; (80009b8 <HAL_InitTick+0xe4>)
 80008ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008ec:	4a32      	ldr	r2, [pc, #200]	; (80009b8 <HAL_InitTick+0xe4>)
 80008ee:	f043 0310 	orr.w	r3, r3, #16
 80008f2:	6413      	str	r3, [r2, #64]	; 0x40
 80008f4:	4b30      	ldr	r3, [pc, #192]	; (80009b8 <HAL_InitTick+0xe4>)
 80008f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f8:	f003 0310 	and.w	r3, r3, #16
 80008fc:	60fb      	str	r3, [r7, #12]
 80008fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000900:	f107 0210 	add.w	r2, r7, #16
 8000904:	f107 0314 	add.w	r3, r7, #20
 8000908:	4611      	mov	r1, r2
 800090a:	4618      	mov	r0, r3
 800090c:	f000 fd28 	bl	8001360 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000910:	6a3b      	ldr	r3, [r7, #32]
 8000912:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000914:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000916:	2b00      	cmp	r3, #0
 8000918:	d103      	bne.n	8000922 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800091a:	f000 fd0d 	bl	8001338 <HAL_RCC_GetPCLK1Freq>
 800091e:	6378      	str	r0, [r7, #52]	; 0x34
 8000920:	e004      	b.n	800092c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000922:	f000 fd09 	bl	8001338 <HAL_RCC_GetPCLK1Freq>
 8000926:	4603      	mov	r3, r0
 8000928:	005b      	lsls	r3, r3, #1
 800092a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800092c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800092e:	4a23      	ldr	r2, [pc, #140]	; (80009bc <HAL_InitTick+0xe8>)
 8000930:	fba2 2303 	umull	r2, r3, r2, r3
 8000934:	0c9b      	lsrs	r3, r3, #18
 8000936:	3b01      	subs	r3, #1
 8000938:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800093a:	4b21      	ldr	r3, [pc, #132]	; (80009c0 <HAL_InitTick+0xec>)
 800093c:	4a21      	ldr	r2, [pc, #132]	; (80009c4 <HAL_InitTick+0xf0>)
 800093e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000940:	4b1f      	ldr	r3, [pc, #124]	; (80009c0 <HAL_InitTick+0xec>)
 8000942:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000946:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000948:	4a1d      	ldr	r2, [pc, #116]	; (80009c0 <HAL_InitTick+0xec>)
 800094a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800094c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800094e:	4b1c      	ldr	r3, [pc, #112]	; (80009c0 <HAL_InitTick+0xec>)
 8000950:	2200      	movs	r2, #0
 8000952:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000954:	4b1a      	ldr	r3, [pc, #104]	; (80009c0 <HAL_InitTick+0xec>)
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095a:	4b19      	ldr	r3, [pc, #100]	; (80009c0 <HAL_InitTick+0xec>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000960:	4817      	ldr	r0, [pc, #92]	; (80009c0 <HAL_InitTick+0xec>)
 8000962:	f001 f9fd 	bl	8001d60 <HAL_TIM_Base_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800096c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000970:	2b00      	cmp	r3, #0
 8000972:	d11b      	bne.n	80009ac <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000974:	4812      	ldr	r0, [pc, #72]	; (80009c0 <HAL_InitTick+0xec>)
 8000976:	f001 fa4d 	bl	8001e14 <HAL_TIM_Base_Start_IT>
 800097a:	4603      	mov	r3, r0
 800097c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000980:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000984:	2b00      	cmp	r3, #0
 8000986:	d111      	bne.n	80009ac <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000988:	2036      	movs	r0, #54	; 0x36
 800098a:	f000 fa27 	bl	8000ddc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d808      	bhi.n	80009a6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	2036      	movs	r0, #54	; 0x36
 800099a:	f000 fa03 	bl	8000da4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800099e:	4a0a      	ldr	r2, [pc, #40]	; (80009c8 <HAL_InitTick+0xf4>)
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	6013      	str	r3, [r2, #0]
 80009a4:	e002      	b.n	80009ac <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80009a6:	2301      	movs	r3, #1
 80009a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009ac:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009b0:	4618      	mov	r0, r3
 80009b2:	3738      	adds	r7, #56	; 0x38
 80009b4:	46bd      	mov	sp, r7
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40023800 	.word	0x40023800
 80009bc:	431bde83 	.word	0x431bde83
 80009c0:	20000094 	.word	0x20000094
 80009c4:	40001000 	.word	0x40001000
 80009c8:	20000004 	.word	0x20000004

080009cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009d0:	e7fe      	b.n	80009d0 <NMI_Handler+0x4>

080009d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009d2:	b480      	push	{r7}
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009d6:	e7fe      	b.n	80009d6 <HardFault_Handler+0x4>

080009d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009dc:	e7fe      	b.n	80009dc <MemManage_Handler+0x4>

080009de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009e2:	e7fe      	b.n	80009e2 <BusFault_Handler+0x4>

080009e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009e8:	e7fe      	b.n	80009e8 <UsageFault_Handler+0x4>

080009ea <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ea:	b480      	push	{r7}
 80009ec:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	46bd      	mov	sp, r7
 80009f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f6:	4770      	bx	lr

080009f8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80009fc:	4802      	ldr	r0, [pc, #8]	; (8000a08 <TIM6_DAC_IRQHandler+0x10>)
 80009fe:	f001 fa79 	bl	8001ef4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a02:	bf00      	nop
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	bf00      	nop
 8000a08:	20000094 	.word	0x20000094

08000a0c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000a0c:	b480      	push	{r7}
 8000a0e:	b083      	sub	sp, #12
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	4603      	mov	r3, r0
 8000a14:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000a16:	4b0f      	ldr	r3, [pc, #60]	; (8000a54 <ITM_SendChar+0x48>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	4a0e      	ldr	r2, [pc, #56]	; (8000a54 <ITM_SendChar+0x48>)
 8000a1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a20:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000a22:	4b0d      	ldr	r3, [pc, #52]	; (8000a58 <ITM_SendChar+0x4c>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4a0c      	ldr	r2, [pc, #48]	; (8000a58 <ITM_SendChar+0x4c>)
 8000a28:	f043 0301 	orr.w	r3, r3, #1
 8000a2c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000a2e:	bf00      	nop
 8000a30:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	f003 0301 	and.w	r3, r3, #1
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d0f8      	beq.n	8000a30 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000a3e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8000a42:	79fb      	ldrb	r3, [r7, #7]
 8000a44:	6013      	str	r3, [r2, #0]
}
 8000a46:	bf00      	nop
 8000a48:	370c      	adds	r7, #12
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	e000edfc 	.word	0xe000edfc
 8000a58:	e0000e00 	.word	0xe0000e00

08000a5c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b086      	sub	sp, #24
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	60f8      	str	r0, [r7, #12]
 8000a64:	60b9      	str	r1, [r7, #8]
 8000a66:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a68:	2300      	movs	r3, #0
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e00a      	b.n	8000a84 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000a6e:	f3af 8000 	nop.w
 8000a72:	4601      	mov	r1, r0
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	1c5a      	adds	r2, r3, #1
 8000a78:	60ba      	str	r2, [r7, #8]
 8000a7a:	b2ca      	uxtb	r2, r1
 8000a7c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a7e:	697b      	ldr	r3, [r7, #20]
 8000a80:	3301      	adds	r3, #1
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697a      	ldr	r2, [r7, #20]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	dbf0      	blt.n	8000a6e <_read+0x12>
	}

return len;
 8000a8c:	687b      	ldr	r3, [r7, #4]
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	3718      	adds	r7, #24
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}

08000a96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a96:	b580      	push	{r7, lr}
 8000a98:	b086      	sub	sp, #24
 8000a9a:	af00      	add	r7, sp, #0
 8000a9c:	60f8      	str	r0, [r7, #12]
 8000a9e:	60b9      	str	r1, [r7, #8]
 8000aa0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	e009      	b.n	8000abc <_write+0x26>
	{
		// __io_putchar(*ptr++);
		ITM_SendChar(*ptr++);
 8000aa8:	68bb      	ldr	r3, [r7, #8]
 8000aaa:	1c5a      	adds	r2, r3, #1
 8000aac:	60ba      	str	r2, [r7, #8]
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ffab 	bl	8000a0c <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	3301      	adds	r3, #1
 8000aba:	617b      	str	r3, [r7, #20]
 8000abc:	697a      	ldr	r2, [r7, #20]
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	429a      	cmp	r2, r3
 8000ac2:	dbf1      	blt.n	8000aa8 <_write+0x12>

	}
	return len;
 8000ac4:	687b      	ldr	r3, [r7, #4]
}
 8000ac6:	4618      	mov	r0, r3
 8000ac8:	3718      	adds	r7, #24
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}

08000ace <_close>:

int _close(int file)
{
 8000ace:	b480      	push	{r7}
 8000ad0:	b083      	sub	sp, #12
 8000ad2:	af00      	add	r7, sp, #0
 8000ad4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ad6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ada:	4618      	mov	r0, r3
 8000adc:	370c      	adds	r7, #12
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr

08000ae6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	b083      	sub	sp, #12
 8000aea:	af00      	add	r7, sp, #0
 8000aec:	6078      	str	r0, [r7, #4]
 8000aee:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000af6:	605a      	str	r2, [r3, #4]
	return 0;
 8000af8:	2300      	movs	r3, #0
}
 8000afa:	4618      	mov	r0, r3
 8000afc:	370c      	adds	r7, #12
 8000afe:	46bd      	mov	sp, r7
 8000b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b04:	4770      	bx	lr

08000b06 <_isatty>:

int _isatty(int file)
{
 8000b06:	b480      	push	{r7}
 8000b08:	b083      	sub	sp, #12
 8000b0a:	af00      	add	r7, sp, #0
 8000b0c:	6078      	str	r0, [r7, #4]
	return 1;
 8000b0e:	2301      	movs	r3, #1
}
 8000b10:	4618      	mov	r0, r3
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	b085      	sub	sp, #20
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	60f8      	str	r0, [r7, #12]
 8000b24:	60b9      	str	r1, [r7, #8]
 8000b26:	607a      	str	r2, [r7, #4]
	return 0;
 8000b28:	2300      	movs	r3, #0
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3714      	adds	r7, #20
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
	...

08000b38 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <SystemInit+0x20>)
 8000b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b42:	4a05      	ldr	r2, [pc, #20]	; (8000b58 <SystemInit+0x20>)
 8000b44:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b48:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	e000ed00 	.word	0xe000ed00

08000b5c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b5c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b94 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b60:	480d      	ldr	r0, [pc, #52]	; (8000b98 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b62:	490e      	ldr	r1, [pc, #56]	; (8000b9c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b64:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b68:	e002      	b.n	8000b70 <LoopCopyDataInit>

08000b6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6e:	3304      	adds	r3, #4

08000b70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b74:	d3f9      	bcc.n	8000b6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b76:	4a0b      	ldr	r2, [pc, #44]	; (8000ba4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b78:	4c0b      	ldr	r4, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b7c:	e001      	b.n	8000b82 <LoopFillZerobss>

08000b7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b80:	3204      	adds	r2, #4

08000b82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b84:	d3fb      	bcc.n	8000b7e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b86:	f7ff ffd7 	bl	8000b38 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8a:	f002 fcf5 	bl	8003578 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b8e:	f7ff fd11 	bl	80005b4 <main>
  bx  lr    
 8000b92:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b9c:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ba0:	08004634 	.word	0x08004634
  ldr r2, =_sbss
 8000ba4:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000ba8:	20012e20 	.word	0x20012e20

08000bac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bac:	e7fe      	b.n	8000bac <ADC_IRQHandler>
	...

08000bb0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bb4:	4b0e      	ldr	r3, [pc, #56]	; (8000bf0 <HAL_Init+0x40>)
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a0d      	ldr	r2, [pc, #52]	; (8000bf0 <HAL_Init+0x40>)
 8000bba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000bbe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bc0:	4b0b      	ldr	r3, [pc, #44]	; (8000bf0 <HAL_Init+0x40>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <HAL_Init+0x40>)
 8000bc6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_Init+0x40>)
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	4a07      	ldr	r2, [pc, #28]	; (8000bf0 <HAL_Init+0x40>)
 8000bd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bd6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd8:	2003      	movs	r0, #3
 8000bda:	f000 f8d8 	bl	8000d8e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bde:	2000      	movs	r0, #0
 8000be0:	f7ff fe78 	bl	80008d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000be4:	f7ff fe4e 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be8:	2300      	movs	r3, #0
}
 8000bea:	4618      	mov	r0, r3
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	40023c00 	.word	0x40023c00

08000bf4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bf8:	4b06      	ldr	r3, [pc, #24]	; (8000c14 <HAL_IncTick+0x20>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	461a      	mov	r2, r3
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <HAL_IncTick+0x24>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4413      	add	r3, r2
 8000c04:	4a04      	ldr	r2, [pc, #16]	; (8000c18 <HAL_IncTick+0x24>)
 8000c06:	6013      	str	r3, [r2, #0]
}
 8000c08:	bf00      	nop
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c10:	4770      	bx	lr
 8000c12:	bf00      	nop
 8000c14:	20000008 	.word	0x20000008
 8000c18:	200000dc 	.word	0x200000dc

08000c1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b03      	ldr	r3, [pc, #12]	; (8000c30 <HAL_GetTick+0x14>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2c:	4770      	bx	lr
 8000c2e:	bf00      	nop
 8000c30:	200000dc 	.word	0x200000dc

08000c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c44:	4b0c      	ldr	r3, [pc, #48]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c46:	68db      	ldr	r3, [r3, #12]
 8000c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c4a:	68ba      	ldr	r2, [r7, #8]
 8000c4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c50:	4013      	ands	r3, r2
 8000c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c58:	68bb      	ldr	r3, [r7, #8]
 8000c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c66:	4a04      	ldr	r2, [pc, #16]	; (8000c78 <__NVIC_SetPriorityGrouping+0x44>)
 8000c68:	68bb      	ldr	r3, [r7, #8]
 8000c6a:	60d3      	str	r3, [r2, #12]
}
 8000c6c:	bf00      	nop
 8000c6e:	3714      	adds	r7, #20
 8000c70:	46bd      	mov	sp, r7
 8000c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c76:	4770      	bx	lr
 8000c78:	e000ed00 	.word	0xe000ed00

08000c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c80:	4b04      	ldr	r3, [pc, #16]	; (8000c94 <__NVIC_GetPriorityGrouping+0x18>)
 8000c82:	68db      	ldr	r3, [r3, #12]
 8000c84:	0a1b      	lsrs	r3, r3, #8
 8000c86:	f003 0307 	and.w	r3, r3, #7
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	e000ed00 	.word	0xe000ed00

08000c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	4603      	mov	r3, r0
 8000ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	db0b      	blt.n	8000cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000caa:	79fb      	ldrb	r3, [r7, #7]
 8000cac:	f003 021f 	and.w	r2, r3, #31
 8000cb0:	4907      	ldr	r1, [pc, #28]	; (8000cd0 <__NVIC_EnableIRQ+0x38>)
 8000cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cb6:	095b      	lsrs	r3, r3, #5
 8000cb8:	2001      	movs	r0, #1
 8000cba:	fa00 f202 	lsl.w	r2, r0, r2
 8000cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cc2:	bf00      	nop
 8000cc4:	370c      	adds	r7, #12
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	e000e100 	.word	0xe000e100

08000cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b083      	sub	sp, #12
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	4603      	mov	r3, r0
 8000cdc:	6039      	str	r1, [r7, #0]
 8000cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	db0a      	blt.n	8000cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce8:	683b      	ldr	r3, [r7, #0]
 8000cea:	b2da      	uxtb	r2, r3
 8000cec:	490c      	ldr	r1, [pc, #48]	; (8000d20 <__NVIC_SetPriority+0x4c>)
 8000cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf2:	0112      	lsls	r2, r2, #4
 8000cf4:	b2d2      	uxtb	r2, r2
 8000cf6:	440b      	add	r3, r1
 8000cf8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cfc:	e00a      	b.n	8000d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	b2da      	uxtb	r2, r3
 8000d02:	4908      	ldr	r1, [pc, #32]	; (8000d24 <__NVIC_SetPriority+0x50>)
 8000d04:	79fb      	ldrb	r3, [r7, #7]
 8000d06:	f003 030f 	and.w	r3, r3, #15
 8000d0a:	3b04      	subs	r3, #4
 8000d0c:	0112      	lsls	r2, r2, #4
 8000d0e:	b2d2      	uxtb	r2, r2
 8000d10:	440b      	add	r3, r1
 8000d12:	761a      	strb	r2, [r3, #24]
}
 8000d14:	bf00      	nop
 8000d16:	370c      	adds	r7, #12
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr
 8000d20:	e000e100 	.word	0xe000e100
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	b089      	sub	sp, #36	; 0x24
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	60f8      	str	r0, [r7, #12]
 8000d30:	60b9      	str	r1, [r7, #8]
 8000d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	f003 0307 	and.w	r3, r3, #7
 8000d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d3c:	69fb      	ldr	r3, [r7, #28]
 8000d3e:	f1c3 0307 	rsb	r3, r3, #7
 8000d42:	2b04      	cmp	r3, #4
 8000d44:	bf28      	it	cs
 8000d46:	2304      	movcs	r3, #4
 8000d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	3304      	adds	r3, #4
 8000d4e:	2b06      	cmp	r3, #6
 8000d50:	d902      	bls.n	8000d58 <NVIC_EncodePriority+0x30>
 8000d52:	69fb      	ldr	r3, [r7, #28]
 8000d54:	3b03      	subs	r3, #3
 8000d56:	e000      	b.n	8000d5a <NVIC_EncodePriority+0x32>
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000d60:	69bb      	ldr	r3, [r7, #24]
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43da      	mvns	r2, r3
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	401a      	ands	r2, r3
 8000d6c:	697b      	ldr	r3, [r7, #20]
 8000d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d70:	f04f 31ff 	mov.w	r1, #4294967295
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7a:	43d9      	mvns	r1, r3
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d80:	4313      	orrs	r3, r2
         );
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3724      	adds	r7, #36	; 0x24
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	b082      	sub	sp, #8
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	f7ff ff4c 	bl	8000c34 <__NVIC_SetPriorityGrouping>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b086      	sub	sp, #24
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
 8000db0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db6:	f7ff ff61 	bl	8000c7c <__NVIC_GetPriorityGrouping>
 8000dba:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbc:	687a      	ldr	r2, [r7, #4]
 8000dbe:	68b9      	ldr	r1, [r7, #8]
 8000dc0:	6978      	ldr	r0, [r7, #20]
 8000dc2:	f7ff ffb1 	bl	8000d28 <NVIC_EncodePriority>
 8000dc6:	4602      	mov	r2, r0
 8000dc8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dcc:	4611      	mov	r1, r2
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f7ff ff80 	bl	8000cd4 <__NVIC_SetPriority>
}
 8000dd4:	bf00      	nop
 8000dd6:	3718      	adds	r7, #24
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	bd80      	pop	{r7, pc}

08000ddc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ddc:	b580      	push	{r7, lr}
 8000dde:	b082      	sub	sp, #8
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	4603      	mov	r3, r0
 8000de4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dea:	4618      	mov	r0, r3
 8000dec:	f7ff ff54 	bl	8000c98 <__NVIC_EnableIRQ>
}
 8000df0:	bf00      	nop
 8000df2:	3708      	adds	r7, #8
 8000df4:	46bd      	mov	sp, r7
 8000df6:	bd80      	pop	{r7, pc}

08000df8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b089      	sub	sp, #36	; 0x24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
 8000e00:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000e0e:	2300      	movs	r3, #0
 8000e10:	61fb      	str	r3, [r7, #28]
 8000e12:	e165      	b.n	80010e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000e14:	2201      	movs	r2, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	697a      	ldr	r2, [r7, #20]
 8000e24:	4013      	ands	r3, r2
 8000e26:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e28:	693a      	ldr	r2, [r7, #16]
 8000e2a:	697b      	ldr	r3, [r7, #20]
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	f040 8154 	bne.w	80010da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f003 0303 	and.w	r3, r3, #3
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d005      	beq.n	8000e4a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e3e:	683b      	ldr	r3, [r7, #0]
 8000e40:	685b      	ldr	r3, [r3, #4]
 8000e42:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d130      	bne.n	8000eac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	689b      	ldr	r3, [r3, #8]
 8000e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e50:	69fb      	ldr	r3, [r7, #28]
 8000e52:	005b      	lsls	r3, r3, #1
 8000e54:	2203      	movs	r2, #3
 8000e56:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5a:	43db      	mvns	r3, r3
 8000e5c:	69ba      	ldr	r2, [r7, #24]
 8000e5e:	4013      	ands	r3, r2
 8000e60:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e62:	683b      	ldr	r3, [r7, #0]
 8000e64:	68da      	ldr	r2, [r3, #12]
 8000e66:	69fb      	ldr	r3, [r7, #28]
 8000e68:	005b      	lsls	r3, r3, #1
 8000e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6e:	69ba      	ldr	r2, [r7, #24]
 8000e70:	4313      	orrs	r3, r2
 8000e72:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e80:	2201      	movs	r2, #1
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	69ba      	ldr	r2, [r7, #24]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	091b      	lsrs	r3, r3, #4
 8000e96:	f003 0201 	and.w	r2, r3, #1
 8000e9a:	69fb      	ldr	r3, [r7, #28]
 8000e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4313      	orrs	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	69ba      	ldr	r2, [r7, #24]
 8000eaa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b03      	cmp	r3, #3
 8000eb6:	d017      	beq.n	8000ee8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ebe:	69fb      	ldr	r3, [r7, #28]
 8000ec0:	005b      	lsls	r3, r3, #1
 8000ec2:	2203      	movs	r2, #3
 8000ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	689a      	ldr	r2, [r3, #8]
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	005b      	lsls	r3, r3, #1
 8000ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	4313      	orrs	r3, r2
 8000ee0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	69ba      	ldr	r2, [r7, #24]
 8000ee6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0303 	and.w	r3, r3, #3
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d123      	bne.n	8000f3c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	08da      	lsrs	r2, r3, #3
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	3208      	adds	r2, #8
 8000efc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f00:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	f003 0307 	and.w	r3, r3, #7
 8000f08:	009b      	lsls	r3, r3, #2
 8000f0a:	220f      	movs	r2, #15
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	43db      	mvns	r3, r3
 8000f12:	69ba      	ldr	r2, [r7, #24]
 8000f14:	4013      	ands	r3, r2
 8000f16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	691a      	ldr	r2, [r3, #16]
 8000f1c:	69fb      	ldr	r3, [r7, #28]
 8000f1e:	f003 0307 	and.w	r3, r3, #7
 8000f22:	009b      	lsls	r3, r3, #2
 8000f24:	fa02 f303 	lsl.w	r3, r2, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f2e:	69fb      	ldr	r3, [r7, #28]
 8000f30:	08da      	lsrs	r2, r3, #3
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	3208      	adds	r2, #8
 8000f36:	69b9      	ldr	r1, [r7, #24]
 8000f38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f42:	69fb      	ldr	r3, [r7, #28]
 8000f44:	005b      	lsls	r3, r3, #1
 8000f46:	2203      	movs	r2, #3
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	69ba      	ldr	r2, [r7, #24]
 8000f50:	4013      	ands	r3, r2
 8000f52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	685b      	ldr	r3, [r3, #4]
 8000f58:	f003 0203 	and.w	r2, r3, #3
 8000f5c:	69fb      	ldr	r3, [r7, #28]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	69ba      	ldr	r2, [r7, #24]
 8000f6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f70:	683b      	ldr	r3, [r7, #0]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	f000 80ae 	beq.w	80010da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	2300      	movs	r3, #0
 8000f80:	60fb      	str	r3, [r7, #12]
 8000f82:	4b5d      	ldr	r3, [pc, #372]	; (80010f8 <HAL_GPIO_Init+0x300>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	4a5c      	ldr	r2, [pc, #368]	; (80010f8 <HAL_GPIO_Init+0x300>)
 8000f88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f8e:	4b5a      	ldr	r3, [pc, #360]	; (80010f8 <HAL_GPIO_Init+0x300>)
 8000f90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f9a:	4a58      	ldr	r2, [pc, #352]	; (80010fc <HAL_GPIO_Init+0x304>)
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	089b      	lsrs	r3, r3, #2
 8000fa0:	3302      	adds	r3, #2
 8000fa2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fa6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000fa8:	69fb      	ldr	r3, [r7, #28]
 8000faa:	f003 0303 	and.w	r3, r3, #3
 8000fae:	009b      	lsls	r3, r3, #2
 8000fb0:	220f      	movs	r2, #15
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43db      	mvns	r3, r3
 8000fb8:	69ba      	ldr	r2, [r7, #24]
 8000fba:	4013      	ands	r3, r2
 8000fbc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a4f      	ldr	r2, [pc, #316]	; (8001100 <HAL_GPIO_Init+0x308>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d025      	beq.n	8001012 <HAL_GPIO_Init+0x21a>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a4e      	ldr	r2, [pc, #312]	; (8001104 <HAL_GPIO_Init+0x30c>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d01f      	beq.n	800100e <HAL_GPIO_Init+0x216>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a4d      	ldr	r2, [pc, #308]	; (8001108 <HAL_GPIO_Init+0x310>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d019      	beq.n	800100a <HAL_GPIO_Init+0x212>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a4c      	ldr	r2, [pc, #304]	; (800110c <HAL_GPIO_Init+0x314>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d013      	beq.n	8001006 <HAL_GPIO_Init+0x20e>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a4b      	ldr	r2, [pc, #300]	; (8001110 <HAL_GPIO_Init+0x318>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d00d      	beq.n	8001002 <HAL_GPIO_Init+0x20a>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4a      	ldr	r2, [pc, #296]	; (8001114 <HAL_GPIO_Init+0x31c>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d007      	beq.n	8000ffe <HAL_GPIO_Init+0x206>
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	4a49      	ldr	r2, [pc, #292]	; (8001118 <HAL_GPIO_Init+0x320>)
 8000ff2:	4293      	cmp	r3, r2
 8000ff4:	d101      	bne.n	8000ffa <HAL_GPIO_Init+0x202>
 8000ff6:	2306      	movs	r3, #6
 8000ff8:	e00c      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	e00a      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 8000ffe:	2305      	movs	r3, #5
 8001000:	e008      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 8001002:	2304      	movs	r3, #4
 8001004:	e006      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 8001006:	2303      	movs	r3, #3
 8001008:	e004      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 800100a:	2302      	movs	r3, #2
 800100c:	e002      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 800100e:	2301      	movs	r3, #1
 8001010:	e000      	b.n	8001014 <HAL_GPIO_Init+0x21c>
 8001012:	2300      	movs	r3, #0
 8001014:	69fa      	ldr	r2, [r7, #28]
 8001016:	f002 0203 	and.w	r2, r2, #3
 800101a:	0092      	lsls	r2, r2, #2
 800101c:	4093      	lsls	r3, r2
 800101e:	69ba      	ldr	r2, [r7, #24]
 8001020:	4313      	orrs	r3, r2
 8001022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001024:	4935      	ldr	r1, [pc, #212]	; (80010fc <HAL_GPIO_Init+0x304>)
 8001026:	69fb      	ldr	r3, [r7, #28]
 8001028:	089b      	lsrs	r3, r3, #2
 800102a:	3302      	adds	r3, #2
 800102c:	69ba      	ldr	r2, [r7, #24]
 800102e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001032:	4b3a      	ldr	r3, [pc, #232]	; (800111c <HAL_GPIO_Init+0x324>)
 8001034:	689b      	ldr	r3, [r3, #8]
 8001036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001038:	693b      	ldr	r3, [r7, #16]
 800103a:	43db      	mvns	r3, r3
 800103c:	69ba      	ldr	r2, [r7, #24]
 800103e:	4013      	ands	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800104a:	2b00      	cmp	r3, #0
 800104c:	d003      	beq.n	8001056 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800104e:	69ba      	ldr	r2, [r7, #24]
 8001050:	693b      	ldr	r3, [r7, #16]
 8001052:	4313      	orrs	r3, r2
 8001054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001056:	4a31      	ldr	r2, [pc, #196]	; (800111c <HAL_GPIO_Init+0x324>)
 8001058:	69bb      	ldr	r3, [r7, #24]
 800105a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800105c:	4b2f      	ldr	r3, [pc, #188]	; (800111c <HAL_GPIO_Init+0x324>)
 800105e:	68db      	ldr	r3, [r3, #12]
 8001060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001062:	693b      	ldr	r3, [r7, #16]
 8001064:	43db      	mvns	r3, r3
 8001066:	69ba      	ldr	r2, [r7, #24]
 8001068:	4013      	ands	r3, r2
 800106a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	685b      	ldr	r3, [r3, #4]
 8001070:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001074:	2b00      	cmp	r3, #0
 8001076:	d003      	beq.n	8001080 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001078:	69ba      	ldr	r2, [r7, #24]
 800107a:	693b      	ldr	r3, [r7, #16]
 800107c:	4313      	orrs	r3, r2
 800107e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001080:	4a26      	ldr	r2, [pc, #152]	; (800111c <HAL_GPIO_Init+0x324>)
 8001082:	69bb      	ldr	r3, [r7, #24]
 8001084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001086:	4b25      	ldr	r3, [pc, #148]	; (800111c <HAL_GPIO_Init+0x324>)
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800108c:	693b      	ldr	r3, [r7, #16]
 800108e:	43db      	mvns	r3, r3
 8001090:	69ba      	ldr	r2, [r7, #24]
 8001092:	4013      	ands	r3, r2
 8001094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d003      	beq.n	80010aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80010a2:	69ba      	ldr	r2, [r7, #24]
 80010a4:	693b      	ldr	r3, [r7, #16]
 80010a6:	4313      	orrs	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80010aa:	4a1c      	ldr	r2, [pc, #112]	; (800111c <HAL_GPIO_Init+0x324>)
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80010b0:	4b1a      	ldr	r3, [pc, #104]	; (800111c <HAL_GPIO_Init+0x324>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010b6:	693b      	ldr	r3, [r7, #16]
 80010b8:	43db      	mvns	r3, r3
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	4013      	ands	r3, r2
 80010be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d003      	beq.n	80010d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	693b      	ldr	r3, [r7, #16]
 80010d0:	4313      	orrs	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80010d4:	4a11      	ldr	r2, [pc, #68]	; (800111c <HAL_GPIO_Init+0x324>)
 80010d6:	69bb      	ldr	r3, [r7, #24]
 80010d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010da:	69fb      	ldr	r3, [r7, #28]
 80010dc:	3301      	adds	r3, #1
 80010de:	61fb      	str	r3, [r7, #28]
 80010e0:	69fb      	ldr	r3, [r7, #28]
 80010e2:	2b0f      	cmp	r3, #15
 80010e4:	f67f ae96 	bls.w	8000e14 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010e8:	bf00      	nop
 80010ea:	bf00      	nop
 80010ec:	3724      	adds	r7, #36	; 0x24
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40013800 	.word	0x40013800
 8001100:	40020000 	.word	0x40020000
 8001104:	40020400 	.word	0x40020400
 8001108:	40020800 	.word	0x40020800
 800110c:	40020c00 	.word	0x40020c00
 8001110:	40021000 	.word	0x40021000
 8001114:	40021400 	.word	0x40021400
 8001118:	40021800 	.word	0x40021800
 800111c:	40013c00 	.word	0x40013c00

08001120 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001120:	b480      	push	{r7}
 8001122:	b083      	sub	sp, #12
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	807b      	strh	r3, [r7, #2]
 800112c:	4613      	mov	r3, r2
 800112e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001130:	787b      	ldrb	r3, [r7, #1]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001136:	887a      	ldrh	r2, [r7, #2]
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800113c:	e003      	b.n	8001146 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800113e:	887b      	ldrh	r3, [r7, #2]
 8001140:	041a      	lsls	r2, r3, #16
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	619a      	str	r2, [r3, #24]
}
 8001146:	bf00      	nop
 8001148:	370c      	adds	r7, #12
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
	...

08001154 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b084      	sub	sp, #16
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
 800115c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d101      	bne.n	8001168 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	e0cc      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001168:	4b68      	ldr	r3, [pc, #416]	; (800130c <HAL_RCC_ClockConfig+0x1b8>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f003 030f 	and.w	r3, r3, #15
 8001170:	683a      	ldr	r2, [r7, #0]
 8001172:	429a      	cmp	r2, r3
 8001174:	d90c      	bls.n	8001190 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001176:	4b65      	ldr	r3, [pc, #404]	; (800130c <HAL_RCC_ClockConfig+0x1b8>)
 8001178:	683a      	ldr	r2, [r7, #0]
 800117a:	b2d2      	uxtb	r2, r2
 800117c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800117e:	4b63      	ldr	r3, [pc, #396]	; (800130c <HAL_RCC_ClockConfig+0x1b8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 030f 	and.w	r3, r3, #15
 8001186:	683a      	ldr	r2, [r7, #0]
 8001188:	429a      	cmp	r2, r3
 800118a:	d001      	beq.n	8001190 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e0b8      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	f003 0302 	and.w	r3, r3, #2
 8001198:	2b00      	cmp	r3, #0
 800119a:	d020      	beq.n	80011de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f003 0304 	and.w	r3, r3, #4
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d005      	beq.n	80011b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80011a8:	4b59      	ldr	r3, [pc, #356]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011aa:	689b      	ldr	r3, [r3, #8]
 80011ac:	4a58      	ldr	r2, [pc, #352]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80011b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f003 0308 	and.w	r3, r3, #8
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d005      	beq.n	80011cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80011c0:	4b53      	ldr	r3, [pc, #332]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011c2:	689b      	ldr	r3, [r3, #8]
 80011c4:	4a52      	ldr	r2, [pc, #328]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80011ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80011cc:	4b50      	ldr	r3, [pc, #320]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011ce:	689b      	ldr	r3, [r3, #8]
 80011d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	689b      	ldr	r3, [r3, #8]
 80011d8:	494d      	ldr	r1, [pc, #308]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011da:	4313      	orrs	r3, r2
 80011dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0301 	and.w	r3, r3, #1
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d044      	beq.n	8001274 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	2b01      	cmp	r3, #1
 80011f0:	d107      	bne.n	8001202 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011f2:	4b47      	ldr	r3, [pc, #284]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d119      	bne.n	8001232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011fe:	2301      	movs	r3, #1
 8001200:	e07f      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	2b02      	cmp	r3, #2
 8001208:	d003      	beq.n	8001212 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800120e:	2b03      	cmp	r3, #3
 8001210:	d107      	bne.n	8001222 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001212:	4b3f      	ldr	r3, [pc, #252]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800121a:	2b00      	cmp	r3, #0
 800121c:	d109      	bne.n	8001232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800121e:	2301      	movs	r3, #1
 8001220:	e06f      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001222:	4b3b      	ldr	r3, [pc, #236]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	f003 0302 	and.w	r3, r3, #2
 800122a:	2b00      	cmp	r3, #0
 800122c:	d101      	bne.n	8001232 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
 8001230:	e067      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001232:	4b37      	ldr	r3, [pc, #220]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f023 0203 	bic.w	r2, r3, #3
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	685b      	ldr	r3, [r3, #4]
 800123e:	4934      	ldr	r1, [pc, #208]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 8001240:	4313      	orrs	r3, r2
 8001242:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001244:	f7ff fcea 	bl	8000c1c <HAL_GetTick>
 8001248:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800124a:	e00a      	b.n	8001262 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800124c:	f7ff fce6 	bl	8000c1c <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	f241 3288 	movw	r2, #5000	; 0x1388
 800125a:	4293      	cmp	r3, r2
 800125c:	d901      	bls.n	8001262 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e04f      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001262:	4b2b      	ldr	r3, [pc, #172]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 020c 	and.w	r2, r3, #12
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	429a      	cmp	r2, r3
 8001272:	d1eb      	bne.n	800124c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001274:	4b25      	ldr	r3, [pc, #148]	; (800130c <HAL_RCC_ClockConfig+0x1b8>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f003 030f 	and.w	r3, r3, #15
 800127c:	683a      	ldr	r2, [r7, #0]
 800127e:	429a      	cmp	r2, r3
 8001280:	d20c      	bcs.n	800129c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001282:	4b22      	ldr	r3, [pc, #136]	; (800130c <HAL_RCC_ClockConfig+0x1b8>)
 8001284:	683a      	ldr	r2, [r7, #0]
 8001286:	b2d2      	uxtb	r2, r2
 8001288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800128a:	4b20      	ldr	r3, [pc, #128]	; (800130c <HAL_RCC_ClockConfig+0x1b8>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f003 030f 	and.w	r3, r3, #15
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d001      	beq.n	800129c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001298:	2301      	movs	r3, #1
 800129a:	e032      	b.n	8001302 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0304 	and.w	r3, r3, #4
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d008      	beq.n	80012ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80012a8:	4b19      	ldr	r3, [pc, #100]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	68db      	ldr	r3, [r3, #12]
 80012b4:	4916      	ldr	r1, [pc, #88]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80012b6:	4313      	orrs	r3, r2
 80012b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0308 	and.w	r3, r3, #8
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d009      	beq.n	80012da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80012c6:	4b12      	ldr	r3, [pc, #72]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	00db      	lsls	r3, r3, #3
 80012d4:	490e      	ldr	r1, [pc, #56]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80012d6:	4313      	orrs	r3, r2
 80012d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80012da:	f000 f873 	bl	80013c4 <HAL_RCC_GetSysClockFreq>
 80012de:	4602      	mov	r2, r0
 80012e0:	4b0b      	ldr	r3, [pc, #44]	; (8001310 <HAL_RCC_ClockConfig+0x1bc>)
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	091b      	lsrs	r3, r3, #4
 80012e6:	f003 030f 	and.w	r3, r3, #15
 80012ea:	490a      	ldr	r1, [pc, #40]	; (8001314 <HAL_RCC_ClockConfig+0x1c0>)
 80012ec:	5ccb      	ldrb	r3, [r1, r3]
 80012ee:	fa22 f303 	lsr.w	r3, r2, r3
 80012f2:	4a09      	ldr	r2, [pc, #36]	; (8001318 <HAL_RCC_ClockConfig+0x1c4>)
 80012f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012f6:	4b09      	ldr	r3, [pc, #36]	; (800131c <HAL_RCC_ClockConfig+0x1c8>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	4618      	mov	r0, r3
 80012fc:	f7ff faea 	bl	80008d4 <HAL_InitTick>

  return HAL_OK;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	3710      	adds	r7, #16
 8001306:	46bd      	mov	sp, r7
 8001308:	bd80      	pop	{r7, pc}
 800130a:	bf00      	nop
 800130c:	40023c00 	.word	0x40023c00
 8001310:	40023800 	.word	0x40023800
 8001314:	08004574 	.word	0x08004574
 8001318:	20000000 	.word	0x20000000
 800131c:	20000004 	.word	0x20000004

08001320 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001324:	4b03      	ldr	r3, [pc, #12]	; (8001334 <HAL_RCC_GetHCLKFreq+0x14>)
 8001326:	681b      	ldr	r3, [r3, #0]
}
 8001328:	4618      	mov	r0, r3
 800132a:	46bd      	mov	sp, r7
 800132c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001330:	4770      	bx	lr
 8001332:	bf00      	nop
 8001334:	20000000 	.word	0x20000000

08001338 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800133c:	f7ff fff0 	bl	8001320 <HAL_RCC_GetHCLKFreq>
 8001340:	4602      	mov	r2, r0
 8001342:	4b05      	ldr	r3, [pc, #20]	; (8001358 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	0a9b      	lsrs	r3, r3, #10
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	4903      	ldr	r1, [pc, #12]	; (800135c <HAL_RCC_GetPCLK1Freq+0x24>)
 800134e:	5ccb      	ldrb	r3, [r1, r3]
 8001350:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001354:	4618      	mov	r0, r3
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800
 800135c:	08004584 	.word	0x08004584

08001360 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	220f      	movs	r2, #15
 800136e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001370:	4b12      	ldr	r3, [pc, #72]	; (80013bc <HAL_RCC_GetClockConfig+0x5c>)
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 0203 	and.w	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800137c:	4b0f      	ldr	r3, [pc, #60]	; (80013bc <HAL_RCC_GetClockConfig+0x5c>)
 800137e:	689b      	ldr	r3, [r3, #8]
 8001380:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001388:	4b0c      	ldr	r3, [pc, #48]	; (80013bc <HAL_RCC_GetClockConfig+0x5c>)
 800138a:	689b      	ldr	r3, [r3, #8]
 800138c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001394:	4b09      	ldr	r3, [pc, #36]	; (80013bc <HAL_RCC_GetClockConfig+0x5c>)
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	08db      	lsrs	r3, r3, #3
 800139a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80013a2:	4b07      	ldr	r3, [pc, #28]	; (80013c0 <HAL_RCC_GetClockConfig+0x60>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 020f 	and.w	r2, r3, #15
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	601a      	str	r2, [r3, #0]
}
 80013ae:	bf00      	nop
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr
 80013ba:	bf00      	nop
 80013bc:	40023800 	.word	0x40023800
 80013c0:	40023c00 	.word	0x40023c00

080013c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80013c8:	b0ae      	sub	sp, #184	; 0xb8
 80013ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80013cc:	2300      	movs	r3, #0
 80013ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80013d2:	2300      	movs	r3, #0
 80013d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80013d8:	2300      	movs	r3, #0
 80013da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80013de:	2300      	movs	r3, #0
 80013e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80013e4:	2300      	movs	r3, #0
 80013e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80013ea:	4bcb      	ldr	r3, [pc, #812]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 80013ec:	689b      	ldr	r3, [r3, #8]
 80013ee:	f003 030c 	and.w	r3, r3, #12
 80013f2:	2b0c      	cmp	r3, #12
 80013f4:	f200 8206 	bhi.w	8001804 <HAL_RCC_GetSysClockFreq+0x440>
 80013f8:	a201      	add	r2, pc, #4	; (adr r2, 8001400 <HAL_RCC_GetSysClockFreq+0x3c>)
 80013fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fe:	bf00      	nop
 8001400:	08001435 	.word	0x08001435
 8001404:	08001805 	.word	0x08001805
 8001408:	08001805 	.word	0x08001805
 800140c:	08001805 	.word	0x08001805
 8001410:	0800143d 	.word	0x0800143d
 8001414:	08001805 	.word	0x08001805
 8001418:	08001805 	.word	0x08001805
 800141c:	08001805 	.word	0x08001805
 8001420:	08001445 	.word	0x08001445
 8001424:	08001805 	.word	0x08001805
 8001428:	08001805 	.word	0x08001805
 800142c:	08001805 	.word	0x08001805
 8001430:	08001635 	.word	0x08001635
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001434:	4bb9      	ldr	r3, [pc, #740]	; (800171c <HAL_RCC_GetSysClockFreq+0x358>)
 8001436:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800143a:	e1e7      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800143c:	4bb8      	ldr	r3, [pc, #736]	; (8001720 <HAL_RCC_GetSysClockFreq+0x35c>)
 800143e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001442:	e1e3      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001444:	4bb4      	ldr	r3, [pc, #720]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800144c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001450:	4bb1      	ldr	r3, [pc, #708]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d071      	beq.n	8001540 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800145c:	4bae      	ldr	r3, [pc, #696]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	099b      	lsrs	r3, r3, #6
 8001462:	2200      	movs	r2, #0
 8001464:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001468:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800146c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001470:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001474:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001478:	2300      	movs	r3, #0
 800147a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800147e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8001482:	4622      	mov	r2, r4
 8001484:	462b      	mov	r3, r5
 8001486:	f04f 0000 	mov.w	r0, #0
 800148a:	f04f 0100 	mov.w	r1, #0
 800148e:	0159      	lsls	r1, r3, #5
 8001490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001494:	0150      	lsls	r0, r2, #5
 8001496:	4602      	mov	r2, r0
 8001498:	460b      	mov	r3, r1
 800149a:	4621      	mov	r1, r4
 800149c:	1a51      	subs	r1, r2, r1
 800149e:	6439      	str	r1, [r7, #64]	; 0x40
 80014a0:	4629      	mov	r1, r5
 80014a2:	eb63 0301 	sbc.w	r3, r3, r1
 80014a6:	647b      	str	r3, [r7, #68]	; 0x44
 80014a8:	f04f 0200 	mov.w	r2, #0
 80014ac:	f04f 0300 	mov.w	r3, #0
 80014b0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80014b4:	4649      	mov	r1, r9
 80014b6:	018b      	lsls	r3, r1, #6
 80014b8:	4641      	mov	r1, r8
 80014ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014be:	4641      	mov	r1, r8
 80014c0:	018a      	lsls	r2, r1, #6
 80014c2:	4641      	mov	r1, r8
 80014c4:	1a51      	subs	r1, r2, r1
 80014c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80014c8:	4649      	mov	r1, r9
 80014ca:	eb63 0301 	sbc.w	r3, r3, r1
 80014ce:	63fb      	str	r3, [r7, #60]	; 0x3c
 80014d0:	f04f 0200 	mov.w	r2, #0
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80014dc:	4649      	mov	r1, r9
 80014de:	00cb      	lsls	r3, r1, #3
 80014e0:	4641      	mov	r1, r8
 80014e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80014e6:	4641      	mov	r1, r8
 80014e8:	00ca      	lsls	r2, r1, #3
 80014ea:	4610      	mov	r0, r2
 80014ec:	4619      	mov	r1, r3
 80014ee:	4603      	mov	r3, r0
 80014f0:	4622      	mov	r2, r4
 80014f2:	189b      	adds	r3, r3, r2
 80014f4:	633b      	str	r3, [r7, #48]	; 0x30
 80014f6:	462b      	mov	r3, r5
 80014f8:	460a      	mov	r2, r1
 80014fa:	eb42 0303 	adc.w	r3, r2, r3
 80014fe:	637b      	str	r3, [r7, #52]	; 0x34
 8001500:	f04f 0200 	mov.w	r2, #0
 8001504:	f04f 0300 	mov.w	r3, #0
 8001508:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800150c:	4629      	mov	r1, r5
 800150e:	024b      	lsls	r3, r1, #9
 8001510:	4621      	mov	r1, r4
 8001512:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001516:	4621      	mov	r1, r4
 8001518:	024a      	lsls	r2, r1, #9
 800151a:	4610      	mov	r0, r2
 800151c:	4619      	mov	r1, r3
 800151e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001522:	2200      	movs	r2, #0
 8001524:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001528:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800152c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001530:	f7fe febe 	bl	80002b0 <__aeabi_uldivmod>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4613      	mov	r3, r2
 800153a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800153e:	e067      	b.n	8001610 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001540:	4b75      	ldr	r3, [pc, #468]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 8001542:	685b      	ldr	r3, [r3, #4]
 8001544:	099b      	lsrs	r3, r3, #6
 8001546:	2200      	movs	r2, #0
 8001548:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800154c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001550:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001554:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001558:	67bb      	str	r3, [r7, #120]	; 0x78
 800155a:	2300      	movs	r3, #0
 800155c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800155e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8001562:	4622      	mov	r2, r4
 8001564:	462b      	mov	r3, r5
 8001566:	f04f 0000 	mov.w	r0, #0
 800156a:	f04f 0100 	mov.w	r1, #0
 800156e:	0159      	lsls	r1, r3, #5
 8001570:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001574:	0150      	lsls	r0, r2, #5
 8001576:	4602      	mov	r2, r0
 8001578:	460b      	mov	r3, r1
 800157a:	4621      	mov	r1, r4
 800157c:	1a51      	subs	r1, r2, r1
 800157e:	62b9      	str	r1, [r7, #40]	; 0x28
 8001580:	4629      	mov	r1, r5
 8001582:	eb63 0301 	sbc.w	r3, r3, r1
 8001586:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001588:	f04f 0200 	mov.w	r2, #0
 800158c:	f04f 0300 	mov.w	r3, #0
 8001590:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8001594:	4649      	mov	r1, r9
 8001596:	018b      	lsls	r3, r1, #6
 8001598:	4641      	mov	r1, r8
 800159a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800159e:	4641      	mov	r1, r8
 80015a0:	018a      	lsls	r2, r1, #6
 80015a2:	4641      	mov	r1, r8
 80015a4:	ebb2 0a01 	subs.w	sl, r2, r1
 80015a8:	4649      	mov	r1, r9
 80015aa:	eb63 0b01 	sbc.w	fp, r3, r1
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	f04f 0300 	mov.w	r3, #0
 80015b6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80015ba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80015be:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80015c2:	4692      	mov	sl, r2
 80015c4:	469b      	mov	fp, r3
 80015c6:	4623      	mov	r3, r4
 80015c8:	eb1a 0303 	adds.w	r3, sl, r3
 80015cc:	623b      	str	r3, [r7, #32]
 80015ce:	462b      	mov	r3, r5
 80015d0:	eb4b 0303 	adc.w	r3, fp, r3
 80015d4:	627b      	str	r3, [r7, #36]	; 0x24
 80015d6:	f04f 0200 	mov.w	r2, #0
 80015da:	f04f 0300 	mov.w	r3, #0
 80015de:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015e2:	4629      	mov	r1, r5
 80015e4:	028b      	lsls	r3, r1, #10
 80015e6:	4621      	mov	r1, r4
 80015e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015ec:	4621      	mov	r1, r4
 80015ee:	028a      	lsls	r2, r1, #10
 80015f0:	4610      	mov	r0, r2
 80015f2:	4619      	mov	r1, r3
 80015f4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015f8:	2200      	movs	r2, #0
 80015fa:	673b      	str	r3, [r7, #112]	; 0x70
 80015fc:	677a      	str	r2, [r7, #116]	; 0x74
 80015fe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8001602:	f7fe fe55 	bl	80002b0 <__aeabi_uldivmod>
 8001606:	4602      	mov	r2, r0
 8001608:	460b      	mov	r3, r1
 800160a:	4613      	mov	r3, r2
 800160c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001610:	4b41      	ldr	r3, [pc, #260]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	0c1b      	lsrs	r3, r3, #16
 8001616:	f003 0303 	and.w	r3, r3, #3
 800161a:	3301      	adds	r3, #1
 800161c:	005b      	lsls	r3, r3, #1
 800161e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8001622:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8001626:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800162a:	fbb2 f3f3 	udiv	r3, r2, r3
 800162e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001632:	e0eb      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001634:	4b38      	ldr	r3, [pc, #224]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800163c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001640:	4b35      	ldr	r3, [pc, #212]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d06b      	beq.n	8001724 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800164c:	4b32      	ldr	r3, [pc, #200]	; (8001718 <HAL_RCC_GetSysClockFreq+0x354>)
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	099b      	lsrs	r3, r3, #6
 8001652:	2200      	movs	r2, #0
 8001654:	66bb      	str	r3, [r7, #104]	; 0x68
 8001656:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001658:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800165a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800165e:	663b      	str	r3, [r7, #96]	; 0x60
 8001660:	2300      	movs	r3, #0
 8001662:	667b      	str	r3, [r7, #100]	; 0x64
 8001664:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001668:	4622      	mov	r2, r4
 800166a:	462b      	mov	r3, r5
 800166c:	f04f 0000 	mov.w	r0, #0
 8001670:	f04f 0100 	mov.w	r1, #0
 8001674:	0159      	lsls	r1, r3, #5
 8001676:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800167a:	0150      	lsls	r0, r2, #5
 800167c:	4602      	mov	r2, r0
 800167e:	460b      	mov	r3, r1
 8001680:	4621      	mov	r1, r4
 8001682:	1a51      	subs	r1, r2, r1
 8001684:	61b9      	str	r1, [r7, #24]
 8001686:	4629      	mov	r1, r5
 8001688:	eb63 0301 	sbc.w	r3, r3, r1
 800168c:	61fb      	str	r3, [r7, #28]
 800168e:	f04f 0200 	mov.w	r2, #0
 8001692:	f04f 0300 	mov.w	r3, #0
 8001696:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800169a:	4659      	mov	r1, fp
 800169c:	018b      	lsls	r3, r1, #6
 800169e:	4651      	mov	r1, sl
 80016a0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016a4:	4651      	mov	r1, sl
 80016a6:	018a      	lsls	r2, r1, #6
 80016a8:	4651      	mov	r1, sl
 80016aa:	ebb2 0801 	subs.w	r8, r2, r1
 80016ae:	4659      	mov	r1, fp
 80016b0:	eb63 0901 	sbc.w	r9, r3, r1
 80016b4:	f04f 0200 	mov.w	r2, #0
 80016b8:	f04f 0300 	mov.w	r3, #0
 80016bc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016c0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016c4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016c8:	4690      	mov	r8, r2
 80016ca:	4699      	mov	r9, r3
 80016cc:	4623      	mov	r3, r4
 80016ce:	eb18 0303 	adds.w	r3, r8, r3
 80016d2:	613b      	str	r3, [r7, #16]
 80016d4:	462b      	mov	r3, r5
 80016d6:	eb49 0303 	adc.w	r3, r9, r3
 80016da:	617b      	str	r3, [r7, #20]
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80016e8:	4629      	mov	r1, r5
 80016ea:	024b      	lsls	r3, r1, #9
 80016ec:	4621      	mov	r1, r4
 80016ee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80016f2:	4621      	mov	r1, r4
 80016f4:	024a      	lsls	r2, r1, #9
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80016fe:	2200      	movs	r2, #0
 8001700:	65bb      	str	r3, [r7, #88]	; 0x58
 8001702:	65fa      	str	r2, [r7, #92]	; 0x5c
 8001704:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001708:	f7fe fdd2 	bl	80002b0 <__aeabi_uldivmod>
 800170c:	4602      	mov	r2, r0
 800170e:	460b      	mov	r3, r1
 8001710:	4613      	mov	r3, r2
 8001712:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001716:	e065      	b.n	80017e4 <HAL_RCC_GetSysClockFreq+0x420>
 8001718:	40023800 	.word	0x40023800
 800171c:	00f42400 	.word	0x00f42400
 8001720:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001724:	4b3d      	ldr	r3, [pc, #244]	; (800181c <HAL_RCC_GetSysClockFreq+0x458>)
 8001726:	685b      	ldr	r3, [r3, #4]
 8001728:	099b      	lsrs	r3, r3, #6
 800172a:	2200      	movs	r2, #0
 800172c:	4618      	mov	r0, r3
 800172e:	4611      	mov	r1, r2
 8001730:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001734:	653b      	str	r3, [r7, #80]	; 0x50
 8001736:	2300      	movs	r3, #0
 8001738:	657b      	str	r3, [r7, #84]	; 0x54
 800173a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800173e:	4642      	mov	r2, r8
 8001740:	464b      	mov	r3, r9
 8001742:	f04f 0000 	mov.w	r0, #0
 8001746:	f04f 0100 	mov.w	r1, #0
 800174a:	0159      	lsls	r1, r3, #5
 800174c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001750:	0150      	lsls	r0, r2, #5
 8001752:	4602      	mov	r2, r0
 8001754:	460b      	mov	r3, r1
 8001756:	4641      	mov	r1, r8
 8001758:	1a51      	subs	r1, r2, r1
 800175a:	60b9      	str	r1, [r7, #8]
 800175c:	4649      	mov	r1, r9
 800175e:	eb63 0301 	sbc.w	r3, r3, r1
 8001762:	60fb      	str	r3, [r7, #12]
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	f04f 0300 	mov.w	r3, #0
 800176c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001770:	4659      	mov	r1, fp
 8001772:	018b      	lsls	r3, r1, #6
 8001774:	4651      	mov	r1, sl
 8001776:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800177a:	4651      	mov	r1, sl
 800177c:	018a      	lsls	r2, r1, #6
 800177e:	4651      	mov	r1, sl
 8001780:	1a54      	subs	r4, r2, r1
 8001782:	4659      	mov	r1, fp
 8001784:	eb63 0501 	sbc.w	r5, r3, r1
 8001788:	f04f 0200 	mov.w	r2, #0
 800178c:	f04f 0300 	mov.w	r3, #0
 8001790:	00eb      	lsls	r3, r5, #3
 8001792:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001796:	00e2      	lsls	r2, r4, #3
 8001798:	4614      	mov	r4, r2
 800179a:	461d      	mov	r5, r3
 800179c:	4643      	mov	r3, r8
 800179e:	18e3      	adds	r3, r4, r3
 80017a0:	603b      	str	r3, [r7, #0]
 80017a2:	464b      	mov	r3, r9
 80017a4:	eb45 0303 	adc.w	r3, r5, r3
 80017a8:	607b      	str	r3, [r7, #4]
 80017aa:	f04f 0200 	mov.w	r2, #0
 80017ae:	f04f 0300 	mov.w	r3, #0
 80017b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017b6:	4629      	mov	r1, r5
 80017b8:	028b      	lsls	r3, r1, #10
 80017ba:	4621      	mov	r1, r4
 80017bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017c0:	4621      	mov	r1, r4
 80017c2:	028a      	lsls	r2, r1, #10
 80017c4:	4610      	mov	r0, r2
 80017c6:	4619      	mov	r1, r3
 80017c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80017cc:	2200      	movs	r2, #0
 80017ce:	64bb      	str	r3, [r7, #72]	; 0x48
 80017d0:	64fa      	str	r2, [r7, #76]	; 0x4c
 80017d2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80017d6:	f7fe fd6b 	bl	80002b0 <__aeabi_uldivmod>
 80017da:	4602      	mov	r2, r0
 80017dc:	460b      	mov	r3, r1
 80017de:	4613      	mov	r3, r2
 80017e0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80017e4:	4b0d      	ldr	r3, [pc, #52]	; (800181c <HAL_RCC_GetSysClockFreq+0x458>)
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	0f1b      	lsrs	r3, r3, #28
 80017ea:	f003 0307 	and.w	r3, r3, #7
 80017ee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 80017f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80017f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001802:	e003      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001806:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800180a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800180c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001810:	4618      	mov	r0, r3
 8001812:	37b8      	adds	r7, #184	; 0xb8
 8001814:	46bd      	mov	sp, r7
 8001816:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800181a:	bf00      	nop
 800181c:	40023800 	.word	0x40023800
 8001820:	00f42400 	.word	0x00f42400

08001824 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b086      	sub	sp, #24
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d101      	bne.n	8001836 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e28d      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8083 	beq.w	800194a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001844:	4b94      	ldr	r3, [pc, #592]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f003 030c 	and.w	r3, r3, #12
 800184c:	2b04      	cmp	r3, #4
 800184e:	d019      	beq.n	8001884 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001850:	4b91      	ldr	r3, [pc, #580]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001858:	2b08      	cmp	r3, #8
 800185a:	d106      	bne.n	800186a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800185c:	4b8e      	ldr	r3, [pc, #568]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001864:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001868:	d00c      	beq.n	8001884 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800186a:	4b8b      	ldr	r3, [pc, #556]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 800186c:	689b      	ldr	r3, [r3, #8]
 800186e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001872:	2b0c      	cmp	r3, #12
 8001874:	d112      	bne.n	800189c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001876:	4b88      	ldr	r3, [pc, #544]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800187e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001882:	d10b      	bne.n	800189c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001884:	4b84      	ldr	r3, [pc, #528]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800188c:	2b00      	cmp	r3, #0
 800188e:	d05b      	beq.n	8001948 <HAL_RCC_OscConfig+0x124>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d157      	bne.n	8001948 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e25a      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a4:	d106      	bne.n	80018b4 <HAL_RCC_OscConfig+0x90>
 80018a6:	4b7c      	ldr	r3, [pc, #496]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a7b      	ldr	r2, [pc, #492]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018b0:	6013      	str	r3, [r2, #0]
 80018b2:	e01d      	b.n	80018f0 <HAL_RCC_OscConfig+0xcc>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80018bc:	d10c      	bne.n	80018d8 <HAL_RCC_OscConfig+0xb4>
 80018be:	4b76      	ldr	r3, [pc, #472]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	4a75      	ldr	r2, [pc, #468]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018c8:	6013      	str	r3, [r2, #0]
 80018ca:	4b73      	ldr	r3, [pc, #460]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a72      	ldr	r2, [pc, #456]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80018d4:	6013      	str	r3, [r2, #0]
 80018d6:	e00b      	b.n	80018f0 <HAL_RCC_OscConfig+0xcc>
 80018d8:	4b6f      	ldr	r3, [pc, #444]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	4a6e      	ldr	r2, [pc, #440]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80018e2:	6013      	str	r3, [r2, #0]
 80018e4:	4b6c      	ldr	r3, [pc, #432]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a6b      	ldr	r2, [pc, #428]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80018ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80018ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d013      	beq.n	8001920 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018f8:	f7ff f990 	bl	8000c1c <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001900:	f7ff f98c 	bl	8000c1c <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b64      	cmp	r3, #100	; 0x64
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e21f      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001912:	4b61      	ldr	r3, [pc, #388]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800191a:	2b00      	cmp	r3, #0
 800191c:	d0f0      	beq.n	8001900 <HAL_RCC_OscConfig+0xdc>
 800191e:	e014      	b.n	800194a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001920:	f7ff f97c 	bl	8000c1c <HAL_GetTick>
 8001924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001926:	e008      	b.n	800193a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001928:	f7ff f978 	bl	8000c1c <HAL_GetTick>
 800192c:	4602      	mov	r2, r0
 800192e:	693b      	ldr	r3, [r7, #16]
 8001930:	1ad3      	subs	r3, r2, r3
 8001932:	2b64      	cmp	r3, #100	; 0x64
 8001934:	d901      	bls.n	800193a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001936:	2303      	movs	r3, #3
 8001938:	e20b      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800193a:	4b57      	ldr	r3, [pc, #348]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001942:	2b00      	cmp	r3, #0
 8001944:	d1f0      	bne.n	8001928 <HAL_RCC_OscConfig+0x104>
 8001946:	e000      	b.n	800194a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001948:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 0302 	and.w	r3, r3, #2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d06f      	beq.n	8001a36 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001956:	4b50      	ldr	r3, [pc, #320]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 030c 	and.w	r3, r3, #12
 800195e:	2b00      	cmp	r3, #0
 8001960:	d017      	beq.n	8001992 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001962:	4b4d      	ldr	r3, [pc, #308]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800196a:	2b08      	cmp	r3, #8
 800196c:	d105      	bne.n	800197a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800196e:	4b4a      	ldr	r3, [pc, #296]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001970:	685b      	ldr	r3, [r3, #4]
 8001972:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d00b      	beq.n	8001992 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800197a:	4b47      	ldr	r3, [pc, #284]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 800197c:	689b      	ldr	r3, [r3, #8]
 800197e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001982:	2b0c      	cmp	r3, #12
 8001984:	d11c      	bne.n	80019c0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001986:	4b44      	ldr	r3, [pc, #272]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800198e:	2b00      	cmp	r3, #0
 8001990:	d116      	bne.n	80019c0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001992:	4b41      	ldr	r3, [pc, #260]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	2b00      	cmp	r3, #0
 800199c:	d005      	beq.n	80019aa <HAL_RCC_OscConfig+0x186>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	68db      	ldr	r3, [r3, #12]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d001      	beq.n	80019aa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e1d3      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019aa:	4b3b      	ldr	r3, [pc, #236]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	691b      	ldr	r3, [r3, #16]
 80019b6:	00db      	lsls	r3, r3, #3
 80019b8:	4937      	ldr	r1, [pc, #220]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80019ba:	4313      	orrs	r3, r2
 80019bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019be:	e03a      	b.n	8001a36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d020      	beq.n	8001a0a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80019c8:	4b34      	ldr	r3, [pc, #208]	; (8001a9c <HAL_RCC_OscConfig+0x278>)
 80019ca:	2201      	movs	r2, #1
 80019cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ce:	f7ff f925 	bl	8000c1c <HAL_GetTick>
 80019d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019d4:	e008      	b.n	80019e8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80019d6:	f7ff f921 	bl	8000c1c <HAL_GetTick>
 80019da:	4602      	mov	r2, r0
 80019dc:	693b      	ldr	r3, [r7, #16]
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e1b4      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e8:	4b2b      	ldr	r3, [pc, #172]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f003 0302 	and.w	r3, r3, #2
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d0f0      	beq.n	80019d6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019f4:	4b28      	ldr	r3, [pc, #160]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	691b      	ldr	r3, [r3, #16]
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4925      	ldr	r1, [pc, #148]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	600b      	str	r3, [r1, #0]
 8001a08:	e015      	b.n	8001a36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a0a:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_RCC_OscConfig+0x278>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff f904 	bl	8000c1c <HAL_GetTick>
 8001a14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001a18:	f7ff f900 	bl	8000c1c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	693b      	ldr	r3, [r7, #16]
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e193      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a2a:	4b1b      	ldr	r3, [pc, #108]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 0302 	and.w	r3, r3, #2
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0308 	and.w	r3, r3, #8
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d036      	beq.n	8001ab0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	695b      	ldr	r3, [r3, #20]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d016      	beq.n	8001a78 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a50:	f7ff f8e4 	bl	8000c1c <HAL_GetTick>
 8001a54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a56:	e008      	b.n	8001a6a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a58:	f7ff f8e0 	bl	8000c1c <HAL_GetTick>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	693b      	ldr	r3, [r7, #16]
 8001a60:	1ad3      	subs	r3, r2, r3
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d901      	bls.n	8001a6a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001a66:	2303      	movs	r3, #3
 8001a68:	e173      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001a6a:	4b0b      	ldr	r3, [pc, #44]	; (8001a98 <HAL_RCC_OscConfig+0x274>)
 8001a6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001a6e:	f003 0302 	and.w	r3, r3, #2
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d0f0      	beq.n	8001a58 <HAL_RCC_OscConfig+0x234>
 8001a76:	e01b      	b.n	8001ab0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a78:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <HAL_RCC_OscConfig+0x27c>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a7e:	f7ff f8cd 	bl	8000c1c <HAL_GetTick>
 8001a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a84:	e00e      	b.n	8001aa4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a86:	f7ff f8c9 	bl	8000c1c <HAL_GetTick>
 8001a8a:	4602      	mov	r2, r0
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	1ad3      	subs	r3, r2, r3
 8001a90:	2b02      	cmp	r3, #2
 8001a92:	d907      	bls.n	8001aa4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001a94:	2303      	movs	r3, #3
 8001a96:	e15c      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	42470000 	.word	0x42470000
 8001aa0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aa4:	4b8a      	ldr	r3, [pc, #552]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001aa6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001aa8:	f003 0302 	and.w	r3, r3, #2
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d1ea      	bne.n	8001a86 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	f000 8097 	beq.w	8001bec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ac2:	4b83      	ldr	r3, [pc, #524]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d10f      	bne.n	8001aee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	4b7f      	ldr	r3, [pc, #508]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	4a7e      	ldr	r2, [pc, #504]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ad8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001adc:	6413      	str	r3, [r2, #64]	; 0x40
 8001ade:	4b7c      	ldr	r3, [pc, #496]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001aea:	2301      	movs	r3, #1
 8001aec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aee:	4b79      	ldr	r3, [pc, #484]	; (8001cd4 <HAL_RCC_OscConfig+0x4b0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d118      	bne.n	8001b2c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001afa:	4b76      	ldr	r3, [pc, #472]	; (8001cd4 <HAL_RCC_OscConfig+0x4b0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a75      	ldr	r2, [pc, #468]	; (8001cd4 <HAL_RCC_OscConfig+0x4b0>)
 8001b00:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b04:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b06:	f7ff f889 	bl	8000c1c <HAL_GetTick>
 8001b0a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b0c:	e008      	b.n	8001b20 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b0e:	f7ff f885 	bl	8000c1c <HAL_GetTick>
 8001b12:	4602      	mov	r2, r0
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	1ad3      	subs	r3, r2, r3
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d901      	bls.n	8001b20 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	e118      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b20:	4b6c      	ldr	r3, [pc, #432]	; (8001cd4 <HAL_RCC_OscConfig+0x4b0>)
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d0f0      	beq.n	8001b0e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b01      	cmp	r3, #1
 8001b32:	d106      	bne.n	8001b42 <HAL_RCC_OscConfig+0x31e>
 8001b34:	4b66      	ldr	r3, [pc, #408]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b38:	4a65      	ldr	r2, [pc, #404]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b3a:	f043 0301 	orr.w	r3, r3, #1
 8001b3e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b40:	e01c      	b.n	8001b7c <HAL_RCC_OscConfig+0x358>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	2b05      	cmp	r3, #5
 8001b48:	d10c      	bne.n	8001b64 <HAL_RCC_OscConfig+0x340>
 8001b4a:	4b61      	ldr	r3, [pc, #388]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b4e:	4a60      	ldr	r2, [pc, #384]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	6713      	str	r3, [r2, #112]	; 0x70
 8001b56:	4b5e      	ldr	r3, [pc, #376]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b5a:	4a5d      	ldr	r2, [pc, #372]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b5c:	f043 0301 	orr.w	r3, r3, #1
 8001b60:	6713      	str	r3, [r2, #112]	; 0x70
 8001b62:	e00b      	b.n	8001b7c <HAL_RCC_OscConfig+0x358>
 8001b64:	4b5a      	ldr	r3, [pc, #360]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b68:	4a59      	ldr	r2, [pc, #356]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b6a:	f023 0301 	bic.w	r3, r3, #1
 8001b6e:	6713      	str	r3, [r2, #112]	; 0x70
 8001b70:	4b57      	ldr	r3, [pc, #348]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b74:	4a56      	ldr	r2, [pc, #344]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001b76:	f023 0304 	bic.w	r3, r3, #4
 8001b7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d015      	beq.n	8001bb0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b84:	f7ff f84a 	bl	8000c1c <HAL_GetTick>
 8001b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b8a:	e00a      	b.n	8001ba2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b8c:	f7ff f846 	bl	8000c1c <HAL_GetTick>
 8001b90:	4602      	mov	r2, r0
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	1ad3      	subs	r3, r2, r3
 8001b96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b9a:	4293      	cmp	r3, r2
 8001b9c:	d901      	bls.n	8001ba2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8001b9e:	2303      	movs	r3, #3
 8001ba0:	e0d7      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ba2:	4b4b      	ldr	r3, [pc, #300]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d0ee      	beq.n	8001b8c <HAL_RCC_OscConfig+0x368>
 8001bae:	e014      	b.n	8001bda <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bb0:	f7ff f834 	bl	8000c1c <HAL_GetTick>
 8001bb4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bb6:	e00a      	b.n	8001bce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bb8:	f7ff f830 	bl	8000c1c <HAL_GetTick>
 8001bbc:	4602      	mov	r2, r0
 8001bbe:	693b      	ldr	r3, [r7, #16]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc6:	4293      	cmp	r3, r2
 8001bc8:	d901      	bls.n	8001bce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	e0c1      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001bce:	4b40      	ldr	r3, [pc, #256]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001bd2:	f003 0302 	and.w	r3, r3, #2
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d1ee      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bda:	7dfb      	ldrb	r3, [r7, #23]
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d105      	bne.n	8001bec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001be0:	4b3b      	ldr	r3, [pc, #236]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001be4:	4a3a      	ldr	r2, [pc, #232]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001be6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	f000 80ad 	beq.w	8001d50 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001bf6:	4b36      	ldr	r3, [pc, #216]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 030c 	and.w	r3, r3, #12
 8001bfe:	2b08      	cmp	r3, #8
 8001c00:	d060      	beq.n	8001cc4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	699b      	ldr	r3, [r3, #24]
 8001c06:	2b02      	cmp	r3, #2
 8001c08:	d145      	bne.n	8001c96 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0a:	4b33      	ldr	r3, [pc, #204]	; (8001cd8 <HAL_RCC_OscConfig+0x4b4>)
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c10:	f7ff f804 	bl	8000c1c <HAL_GetTick>
 8001c14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c16:	e008      	b.n	8001c2a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c18:	f7ff f800 	bl	8000c1c <HAL_GetTick>
 8001c1c:	4602      	mov	r2, r0
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	1ad3      	subs	r3, r2, r3
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d901      	bls.n	8001c2a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001c26:	2303      	movs	r3, #3
 8001c28:	e093      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2a:	4b29      	ldr	r3, [pc, #164]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d1f0      	bne.n	8001c18 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	69da      	ldr	r2, [r3, #28]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a1b      	ldr	r3, [r3, #32]
 8001c3e:	431a      	orrs	r2, r3
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c44:	019b      	lsls	r3, r3, #6
 8001c46:	431a      	orrs	r2, r3
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c4c:	085b      	lsrs	r3, r3, #1
 8001c4e:	3b01      	subs	r3, #1
 8001c50:	041b      	lsls	r3, r3, #16
 8001c52:	431a      	orrs	r2, r3
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c58:	061b      	lsls	r3, r3, #24
 8001c5a:	431a      	orrs	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c60:	071b      	lsls	r3, r3, #28
 8001c62:	491b      	ldr	r1, [pc, #108]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001c64:	4313      	orrs	r3, r2
 8001c66:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c68:	4b1b      	ldr	r3, [pc, #108]	; (8001cd8 <HAL_RCC_OscConfig+0x4b4>)
 8001c6a:	2201      	movs	r2, #1
 8001c6c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c6e:	f7fe ffd5 	bl	8000c1c <HAL_GetTick>
 8001c72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c74:	e008      	b.n	8001c88 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c76:	f7fe ffd1 	bl	8000c1c <HAL_GetTick>
 8001c7a:	4602      	mov	r2, r0
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	1ad3      	subs	r3, r2, r3
 8001c80:	2b02      	cmp	r3, #2
 8001c82:	d901      	bls.n	8001c88 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001c84:	2303      	movs	r3, #3
 8001c86:	e064      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c88:	4b11      	ldr	r3, [pc, #68]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d0f0      	beq.n	8001c76 <HAL_RCC_OscConfig+0x452>
 8001c94:	e05c      	b.n	8001d50 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c96:	4b10      	ldr	r3, [pc, #64]	; (8001cd8 <HAL_RCC_OscConfig+0x4b4>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c9c:	f7fe ffbe 	bl	8000c1c <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7fe ffba 	bl	8000c1c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e04d      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_RCC_OscConfig+0x4ac>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d1f0      	bne.n	8001ca4 <HAL_RCC_OscConfig+0x480>
 8001cc2:	e045      	b.n	8001d50 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d107      	bne.n	8001cdc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e040      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
 8001cd0:	40023800 	.word	0x40023800
 8001cd4:	40007000 	.word	0x40007000
 8001cd8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	; (8001d5c <HAL_RCC_OscConfig+0x538>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	699b      	ldr	r3, [r3, #24]
 8001ce6:	2b01      	cmp	r3, #1
 8001ce8:	d030      	beq.n	8001d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001cf4:	429a      	cmp	r2, r3
 8001cf6:	d129      	bne.n	8001d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d122      	bne.n	8001d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d06:	68fa      	ldr	r2, [r7, #12]
 8001d08:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001d12:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d119      	bne.n	8001d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d22:	085b      	lsrs	r3, r3, #1
 8001d24:	3b01      	subs	r3, #1
 8001d26:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d28:	429a      	cmp	r2, r3
 8001d2a:	d10f      	bne.n	8001d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d36:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d107      	bne.n	8001d4c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d001      	beq.n	8001d50 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e000      	b.n	8001d52 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001d50:	2300      	movs	r3, #0
}
 8001d52:	4618      	mov	r0, r3
 8001d54:	3718      	adds	r7, #24
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}
 8001d5a:	bf00      	nop
 8001d5c:	40023800 	.word	0x40023800

08001d60 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d101      	bne.n	8001d72 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001d6e:	2301      	movs	r3, #1
 8001d70:	e041      	b.n	8001df6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d78:	b2db      	uxtb	r3, r3
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d106      	bne.n	8001d8c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2200      	movs	r2, #0
 8001d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001d86:	6878      	ldr	r0, [r7, #4]
 8001d88:	f000 f839 	bl	8001dfe <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681a      	ldr	r2, [r3, #0]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	4610      	mov	r0, r2
 8001da0:	f000 f9d8 	bl	8002154 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2201      	movs	r2, #1
 8001da8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	2201      	movs	r2, #1
 8001db0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	2201      	movs	r2, #1
 8001db8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2201      	movs	r2, #1
 8001dc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	2201      	movs	r2, #1
 8001dd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	2201      	movs	r2, #1
 8001dd8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	2201      	movs	r2, #1
 8001de8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	2201      	movs	r2, #1
 8001df0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001df4:	2300      	movs	r3, #0
}
 8001df6:	4618      	mov	r0, r3
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}

08001dfe <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001dfe:	b480      	push	{r7}
 8001e00:	b083      	sub	sp, #12
 8001e02:	af00      	add	r7, sp, #0
 8001e04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr
	...

08001e14 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b085      	sub	sp, #20
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e22:	b2db      	uxtb	r3, r3
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d001      	beq.n	8001e2c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e04e      	b.n	8001eca <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2202      	movs	r2, #2
 8001e30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	68da      	ldr	r2, [r3, #12]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0201 	orr.w	r2, r2, #1
 8001e42:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4a23      	ldr	r2, [pc, #140]	; (8001ed8 <HAL_TIM_Base_Start_IT+0xc4>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d022      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0x80>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e56:	d01d      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0x80>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a1f      	ldr	r2, [pc, #124]	; (8001edc <HAL_TIM_Base_Start_IT+0xc8>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d018      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0x80>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <HAL_TIM_Base_Start_IT+0xcc>)
 8001e68:	4293      	cmp	r3, r2
 8001e6a:	d013      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0x80>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a1c      	ldr	r2, [pc, #112]	; (8001ee4 <HAL_TIM_Base_Start_IT+0xd0>)
 8001e72:	4293      	cmp	r3, r2
 8001e74:	d00e      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0x80>
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a1b      	ldr	r2, [pc, #108]	; (8001ee8 <HAL_TIM_Base_Start_IT+0xd4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d009      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0x80>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a19      	ldr	r2, [pc, #100]	; (8001eec <HAL_TIM_Base_Start_IT+0xd8>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d004      	beq.n	8001e94 <HAL_TIM_Base_Start_IT+0x80>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a18      	ldr	r2, [pc, #96]	; (8001ef0 <HAL_TIM_Base_Start_IT+0xdc>)
 8001e90:	4293      	cmp	r3, r2
 8001e92:	d111      	bne.n	8001eb8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	2b06      	cmp	r3, #6
 8001ea4:	d010      	beq.n	8001ec8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f042 0201 	orr.w	r2, r2, #1
 8001eb4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb6:	e007      	b.n	8001ec8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	681a      	ldr	r2, [r3, #0]
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f042 0201 	orr.w	r2, r2, #1
 8001ec6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	40010000 	.word	0x40010000
 8001edc:	40000400 	.word	0x40000400
 8001ee0:	40000800 	.word	0x40000800
 8001ee4:	40000c00 	.word	0x40000c00
 8001ee8:	40010400 	.word	0x40010400
 8001eec:	40014000 	.word	0x40014000
 8001ef0:	40001800 	.word	0x40001800

08001ef4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	691b      	ldr	r3, [r3, #16]
 8001f02:	f003 0302 	and.w	r3, r3, #2
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d122      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	68db      	ldr	r3, [r3, #12]
 8001f10:	f003 0302 	and.w	r3, r3, #2
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d11b      	bne.n	8001f50 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f06f 0202 	mvn.w	r2, #2
 8001f20:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2201      	movs	r2, #1
 8001f26:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	f003 0303 	and.w	r3, r3, #3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d003      	beq.n	8001f3e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f000 f8ee 	bl	8002118 <HAL_TIM_IC_CaptureCallback>
 8001f3c:	e005      	b.n	8001f4a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f3e:	6878      	ldr	r0, [r7, #4]
 8001f40:	f000 f8e0 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f000 f8f1 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	691b      	ldr	r3, [r3, #16]
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	2b04      	cmp	r3, #4
 8001f5c:	d122      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	2b04      	cmp	r3, #4
 8001f6a:	d11b      	bne.n	8001fa4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f06f 0204 	mvn.w	r2, #4
 8001f74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	699b      	ldr	r3, [r3, #24]
 8001f82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d003      	beq.n	8001f92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	f000 f8c4 	bl	8002118 <HAL_TIM_IC_CaptureCallback>
 8001f90:	e005      	b.n	8001f9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f92:	6878      	ldr	r0, [r7, #4]
 8001f94:	f000 f8b6 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	f000 f8c7 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	691b      	ldr	r3, [r3, #16]
 8001faa:	f003 0308 	and.w	r3, r3, #8
 8001fae:	2b08      	cmp	r3, #8
 8001fb0:	d122      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d11b      	bne.n	8001ff8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f06f 0208 	mvn.w	r2, #8
 8001fc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2204      	movs	r2, #4
 8001fce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	f003 0303 	and.w	r3, r3, #3
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d003      	beq.n	8001fe6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f000 f89a 	bl	8002118 <HAL_TIM_IC_CaptureCallback>
 8001fe4:	e005      	b.n	8001ff2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe6:	6878      	ldr	r0, [r7, #4]
 8001fe8:	f000 f88c 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f000 f89d 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	691b      	ldr	r3, [r3, #16]
 8001ffe:	f003 0310 	and.w	r3, r3, #16
 8002002:	2b10      	cmp	r3, #16
 8002004:	d122      	bne.n	800204c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	f003 0310 	and.w	r3, r3, #16
 8002010:	2b10      	cmp	r3, #16
 8002012:	d11b      	bne.n	800204c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f06f 0210 	mvn.w	r2, #16
 800201c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2208      	movs	r2, #8
 8002022:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	69db      	ldr	r3, [r3, #28]
 800202a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800202e:	2b00      	cmp	r3, #0
 8002030:	d003      	beq.n	800203a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f000 f870 	bl	8002118 <HAL_TIM_IC_CaptureCallback>
 8002038:	e005      	b.n	8002046 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f862 	bl	8002104 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f000 f873 	bl	800212c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	691b      	ldr	r3, [r3, #16]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b01      	cmp	r3, #1
 8002058:	d10e      	bne.n	8002078 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	68db      	ldr	r3, [r3, #12]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b01      	cmp	r3, #1
 8002066:	d107      	bne.n	8002078 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f06f 0201 	mvn.w	r2, #1
 8002070:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7fe fbee 	bl	8000854 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691b      	ldr	r3, [r3, #16]
 800207e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002082:	2b80      	cmp	r3, #128	; 0x80
 8002084:	d10e      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002090:	2b80      	cmp	r3, #128	; 0x80
 8002092:	d107      	bne.n	80020a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800209c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f000 f902 	bl	80022a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ae:	2b40      	cmp	r3, #64	; 0x40
 80020b0:	d10e      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020bc:	2b40      	cmp	r3, #64	; 0x40
 80020be:	d107      	bne.n	80020d0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80020c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f838 	bl	8002140 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f003 0320 	and.w	r3, r3, #32
 80020da:	2b20      	cmp	r3, #32
 80020dc:	d10e      	bne.n	80020fc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b20      	cmp	r3, #32
 80020ea:	d107      	bne.n	80020fc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f06f 0220 	mvn.w	r2, #32
 80020f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 f8cc 	bl	8002294 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80020fc:	bf00      	nop
 80020fe:	3708      	adds	r7, #8
 8002100:	46bd      	mov	sp, r7
 8002102:	bd80      	pop	{r7, pc}

08002104 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	4a40      	ldr	r2, [pc, #256]	; (8002268 <TIM_Base_SetConfig+0x114>)
 8002168:	4293      	cmp	r3, r2
 800216a:	d013      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002172:	d00f      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a3d      	ldr	r2, [pc, #244]	; (800226c <TIM_Base_SetConfig+0x118>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d00b      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4a3c      	ldr	r2, [pc, #240]	; (8002270 <TIM_Base_SetConfig+0x11c>)
 8002180:	4293      	cmp	r3, r2
 8002182:	d007      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	4a3b      	ldr	r2, [pc, #236]	; (8002274 <TIM_Base_SetConfig+0x120>)
 8002188:	4293      	cmp	r3, r2
 800218a:	d003      	beq.n	8002194 <TIM_Base_SetConfig+0x40>
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	4a3a      	ldr	r2, [pc, #232]	; (8002278 <TIM_Base_SetConfig+0x124>)
 8002190:	4293      	cmp	r3, r2
 8002192:	d108      	bne.n	80021a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800219a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	68fa      	ldr	r2, [r7, #12]
 80021a2:	4313      	orrs	r3, r2
 80021a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	4a2f      	ldr	r2, [pc, #188]	; (8002268 <TIM_Base_SetConfig+0x114>)
 80021aa:	4293      	cmp	r3, r2
 80021ac:	d02b      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d027      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4a2c      	ldr	r2, [pc, #176]	; (800226c <TIM_Base_SetConfig+0x118>)
 80021ba:	4293      	cmp	r3, r2
 80021bc:	d023      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	4a2b      	ldr	r2, [pc, #172]	; (8002270 <TIM_Base_SetConfig+0x11c>)
 80021c2:	4293      	cmp	r3, r2
 80021c4:	d01f      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	4a2a      	ldr	r2, [pc, #168]	; (8002274 <TIM_Base_SetConfig+0x120>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d01b      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	4a29      	ldr	r2, [pc, #164]	; (8002278 <TIM_Base_SetConfig+0x124>)
 80021d2:	4293      	cmp	r3, r2
 80021d4:	d017      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4a28      	ldr	r2, [pc, #160]	; (800227c <TIM_Base_SetConfig+0x128>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d013      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4a27      	ldr	r2, [pc, #156]	; (8002280 <TIM_Base_SetConfig+0x12c>)
 80021e2:	4293      	cmp	r3, r2
 80021e4:	d00f      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	4a26      	ldr	r2, [pc, #152]	; (8002284 <TIM_Base_SetConfig+0x130>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d00b      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4a25      	ldr	r2, [pc, #148]	; (8002288 <TIM_Base_SetConfig+0x134>)
 80021f2:	4293      	cmp	r3, r2
 80021f4:	d007      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a24      	ldr	r2, [pc, #144]	; (800228c <TIM_Base_SetConfig+0x138>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d003      	beq.n	8002206 <TIM_Base_SetConfig+0xb2>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	4a23      	ldr	r2, [pc, #140]	; (8002290 <TIM_Base_SetConfig+0x13c>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d108      	bne.n	8002218 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	68fa      	ldr	r2, [r7, #12]
 8002214:	4313      	orrs	r3, r2
 8002216:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	695b      	ldr	r3, [r3, #20]
 8002222:	4313      	orrs	r3, r2
 8002224:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68fa      	ldr	r2, [r7, #12]
 800222a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	689a      	ldr	r2, [r3, #8]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	4a0a      	ldr	r2, [pc, #40]	; (8002268 <TIM_Base_SetConfig+0x114>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d003      	beq.n	800224c <TIM_Base_SetConfig+0xf8>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	4a0c      	ldr	r2, [pc, #48]	; (8002278 <TIM_Base_SetConfig+0x124>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d103      	bne.n	8002254 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	691a      	ldr	r2, [r3, #16]
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2201      	movs	r2, #1
 8002258:	615a      	str	r2, [r3, #20]
}
 800225a:	bf00      	nop
 800225c:	3714      	adds	r7, #20
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	40010000 	.word	0x40010000
 800226c:	40000400 	.word	0x40000400
 8002270:	40000800 	.word	0x40000800
 8002274:	40000c00 	.word	0x40000c00
 8002278:	40010400 	.word	0x40010400
 800227c:	40014000 	.word	0x40014000
 8002280:	40014400 	.word	0x40014400
 8002284:	40014800 	.word	0x40014800
 8002288:	40001800 	.word	0x40001800
 800228c:	40001c00 	.word	0x40001c00
 8002290:	40002000 	.word	0x40002000

08002294 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002294:	b480      	push	{r7}
 8002296:	b083      	sub	sp, #12
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800229c:	bf00      	nop
 800229e:	370c      	adds	r7, #12
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr

080022a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80022b0:	bf00      	nop
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f103 0208 	add.w	r2, r3, #8
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f04f 32ff 	mov.w	r2, #4294967295
 80022d4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f103 0208 	add.w	r2, r3, #8
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f103 0208 	add.w	r2, r3, #8
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80022f0:	bf00      	nop
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr

080022fc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800230a:	bf00      	nop
 800230c:	370c      	adds	r7, #12
 800230e:	46bd      	mov	sp, r7
 8002310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002314:	4770      	bx	lr

08002316 <uxListRemove>:
    ( pxList->uxNumberOfItems )++;
}
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002316:	b480      	push	{r7}
 8002318:	b085      	sub	sp, #20
 800231a:	af00      	add	r7, sp, #0
 800231c:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	691b      	ldr	r3, [r3, #16]
 8002322:	60fb      	str	r3, [r7, #12]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6892      	ldr	r2, [r2, #8]
 800232c:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	689b      	ldr	r3, [r3, #8]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6852      	ldr	r2, [r2, #4]
 8002336:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	687a      	ldr	r2, [r7, #4]
 800233e:	429a      	cmp	r2, r3
 8002340:	d103      	bne.n	800234a <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689a      	ldr	r2, [r3, #8]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2200      	movs	r2, #0
 800234e:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems )--;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	1e5a      	subs	r2, r3, #1
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	681b      	ldr	r3, [r3, #0]
}
 800235e:	4618      	mov	r0, r3
 8002360:	3714      	adds	r7, #20
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800236a:	b580      	push	{r7, lr}
 800236c:	b08c      	sub	sp, #48	; 0x30
 800236e:	af04      	add	r7, sp, #16
 8002370:	60f8      	str	r0, [r7, #12]
 8002372:	60b9      	str	r1, [r7, #8]
 8002374:	603b      	str	r3, [r7, #0]
 8002376:	4613      	mov	r3, r2
 8002378:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800237a:	88fb      	ldrh	r3, [r7, #6]
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	4618      	mov	r0, r3
 8002380:	f000 fefc 	bl	800317c <pvPortMalloc>
 8002384:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 8002386:	697b      	ldr	r3, [r7, #20]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d00e      	beq.n	80023aa <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800238c:	2058      	movs	r0, #88	; 0x58
 800238e:	f000 fef5 	bl	800317c <pvPortMalloc>
 8002392:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d003      	beq.n	80023a2 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800239a:	69fb      	ldr	r3, [r7, #28]
 800239c:	697a      	ldr	r2, [r7, #20]
 800239e:	631a      	str	r2, [r3, #48]	; 0x30
 80023a0:	e005      	b.n	80023ae <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 80023a2:	6978      	ldr	r0, [r7, #20]
 80023a4:	f000 ffca 	bl	800333c <vPortFree>
 80023a8:	e001      	b.n	80023ae <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 80023aa:	2300      	movs	r3, #0
 80023ac:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d013      	beq.n	80023dc <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80023b4:	88fa      	ldrh	r2, [r7, #6]
 80023b6:	2300      	movs	r3, #0
 80023b8:	9303      	str	r3, [sp, #12]
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	9302      	str	r3, [sp, #8]
 80023be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80023c0:	9301      	str	r3, [sp, #4]
 80023c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023c4:	9300      	str	r3, [sp, #0]
 80023c6:	683b      	ldr	r3, [r7, #0]
 80023c8:	68b9      	ldr	r1, [r7, #8]
 80023ca:	68f8      	ldr	r0, [r7, #12]
 80023cc:	f000 f80e 	bl	80023ec <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80023d0:	69f8      	ldr	r0, [r7, #28]
 80023d2:	f000 f8af 	bl	8002534 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80023d6:	2301      	movs	r3, #1
 80023d8:	61bb      	str	r3, [r7, #24]
 80023da:	e002      	b.n	80023e2 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80023dc:	f04f 33ff 	mov.w	r3, #4294967295
 80023e0:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80023e2:	69bb      	ldr	r3, [r7, #24]
    }
 80023e4:	4618      	mov	r0, r3
 80023e6:	3720      	adds	r7, #32
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}

080023ec <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b088      	sub	sp, #32
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	607a      	str	r2, [r7, #4]
 80023f8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80023fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023fc:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	009b      	lsls	r3, r3, #2
 8002402:	461a      	mov	r2, r3
 8002404:	21a5      	movs	r1, #165	; 0xa5
 8002406:	f001 f8db 	bl	80035c0 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800240a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800240c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002414:	3b01      	subs	r3, #1
 8002416:	009b      	lsls	r3, r3, #2
 8002418:	4413      	add	r3, r2
 800241a:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800241c:	69bb      	ldr	r3, [r7, #24]
 800241e:	f023 0307 	bic.w	r3, r3, #7
 8002422:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	f003 0307 	and.w	r3, r3, #7
 800242a:	2b00      	cmp	r3, #0
 800242c:	d00a      	beq.n	8002444 <prvInitialiseNewTask+0x58>
        __asm volatile
 800242e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002432:	f383 8811 	msr	BASEPRI, r3
 8002436:	f3bf 8f6f 	isb	sy
 800243a:	f3bf 8f4f 	dsb	sy
 800243e:	617b      	str	r3, [r7, #20]
    }
 8002440:	bf00      	nop
 8002442:	e7fe      	b.n	8002442 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d01f      	beq.n	800248a <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
 800244e:	e012      	b.n	8002476 <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	4413      	add	r3, r2
 8002456:	7819      	ldrb	r1, [r3, #0]
 8002458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	4413      	add	r3, r2
 800245e:	3334      	adds	r3, #52	; 0x34
 8002460:	460a      	mov	r2, r1
 8002462:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	4413      	add	r3, r2
 800246a:	781b      	ldrb	r3, [r3, #0]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d006      	beq.n	800247e <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002470:	69fb      	ldr	r3, [r7, #28]
 8002472:	3301      	adds	r3, #1
 8002474:	61fb      	str	r3, [r7, #28]
 8002476:	69fb      	ldr	r3, [r7, #28]
 8002478:	2b09      	cmp	r3, #9
 800247a:	d9e9      	bls.n	8002450 <prvInitialiseNewTask+0x64>
 800247c:	e000      	b.n	8002480 <prvInitialiseNewTask+0x94>
            {
                break;
 800247e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002482:	2200      	movs	r2, #0
 8002484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8002488:	e003      	b.n	8002492 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800248a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800248c:	2200      	movs	r2, #0
 800248e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002494:	2b04      	cmp	r3, #4
 8002496:	d90a      	bls.n	80024ae <prvInitialiseNewTask+0xc2>
        __asm volatile
 8002498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800249c:	f383 8811 	msr	BASEPRI, r3
 80024a0:	f3bf 8f6f 	isb	sy
 80024a4:	f3bf 8f4f 	dsb	sy
 80024a8:	613b      	str	r3, [r7, #16]
    }
 80024aa:	bf00      	nop
 80024ac:	e7fe      	b.n	80024ac <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80024ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b0:	2b04      	cmp	r3, #4
 80024b2:	d901      	bls.n	80024b8 <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80024b4:	2304      	movs	r3, #4
 80024b6:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 80024b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024bc:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 80024be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80024c2:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 80024c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c6:	2200      	movs	r2, #0
 80024c8:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80024ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024cc:	3304      	adds	r3, #4
 80024ce:	4618      	mov	r0, r3
 80024d0:	f7ff ff14 	bl	80022fc <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80024d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024d6:	3318      	adds	r3, #24
 80024d8:	4618      	mov	r0, r3
 80024da:	f7ff ff0f 	bl	80022fc <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80024de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024e2:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80024e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e6:	f1c3 0205 	rsb	r2, r3, #5
 80024ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024ec:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80024f2:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80024f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f6:	3350      	adds	r3, #80	; 0x50
 80024f8:	2204      	movs	r2, #4
 80024fa:	2100      	movs	r1, #0
 80024fc:	4618      	mov	r0, r3
 80024fe:	f001 f85f 	bl	80035c0 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8002502:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002504:	3354      	adds	r3, #84	; 0x54
 8002506:	2201      	movs	r2, #1
 8002508:	2100      	movs	r1, #0
 800250a:	4618      	mov	r0, r3
 800250c:	f001 f858 	bl	80035c0 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002510:	683a      	ldr	r2, [r7, #0]
 8002512:	68f9      	ldr	r1, [r7, #12]
 8002514:	69b8      	ldr	r0, [r7, #24]
 8002516:	f000 fc1d 	bl	8002d54 <pxPortInitialiseStack>
 800251a:	4602      	mov	r2, r0
 800251c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800251e:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 8002520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002522:	2b00      	cmp	r3, #0
 8002524:	d002      	beq.n	800252c <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800252a:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800252c:	bf00      	nop
 800252e:	3720      	adds	r7, #32
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}

08002534 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b084      	sub	sp, #16
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 800253c:	f000 fd3c 	bl	8002fb8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002540:	4b40      	ldr	r3, [pc, #256]	; (8002644 <prvAddNewTaskToReadyList+0x110>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	3301      	adds	r3, #1
 8002546:	4a3f      	ldr	r2, [pc, #252]	; (8002644 <prvAddNewTaskToReadyList+0x110>)
 8002548:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800254a:	4b3f      	ldr	r3, [pc, #252]	; (8002648 <prvAddNewTaskToReadyList+0x114>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d109      	bne.n	8002566 <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002552:	4a3d      	ldr	r2, [pc, #244]	; (8002648 <prvAddNewTaskToReadyList+0x114>)
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002558:	4b3a      	ldr	r3, [pc, #232]	; (8002644 <prvAddNewTaskToReadyList+0x110>)
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	2b01      	cmp	r3, #1
 800255e:	d110      	bne.n	8002582 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002560:	f000 fb5e 	bl	8002c20 <prvInitialiseTaskLists>
 8002564:	e00d      	b.n	8002582 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 8002566:	4b39      	ldr	r3, [pc, #228]	; (800264c <prvAddNewTaskToReadyList+0x118>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d109      	bne.n	8002582 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800256e:	4b36      	ldr	r3, [pc, #216]	; (8002648 <prvAddNewTaskToReadyList+0x114>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002578:	429a      	cmp	r2, r3
 800257a:	d802      	bhi.n	8002582 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 800257c:	4a32      	ldr	r2, [pc, #200]	; (8002648 <prvAddNewTaskToReadyList+0x114>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002582:	4b33      	ldr	r3, [pc, #204]	; (8002650 <prvAddNewTaskToReadyList+0x11c>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	3301      	adds	r3, #1
 8002588:	4a31      	ldr	r2, [pc, #196]	; (8002650 <prvAddNewTaskToReadyList+0x11c>)
 800258a:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800258c:	4b30      	ldr	r3, [pc, #192]	; (8002650 <prvAddNewTaskToReadyList+0x11c>)
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	2201      	movs	r2, #1
 800259a:	409a      	lsls	r2, r3
 800259c:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <prvAddNewTaskToReadyList+0x120>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4313      	orrs	r3, r2
 80025a2:	4a2c      	ldr	r2, [pc, #176]	; (8002654 <prvAddNewTaskToReadyList+0x120>)
 80025a4:	6013      	str	r3, [r2, #0]
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025aa:	492b      	ldr	r1, [pc, #172]	; (8002658 <prvAddNewTaskToReadyList+0x124>)
 80025ac:	4613      	mov	r3, r2
 80025ae:	009b      	lsls	r3, r3, #2
 80025b0:	4413      	add	r3, r2
 80025b2:	009b      	lsls	r3, r3, #2
 80025b4:	440b      	add	r3, r1
 80025b6:	3304      	adds	r3, #4
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	609a      	str	r2, [r3, #8]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	689a      	ldr	r2, [r3, #8]
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	60da      	str	r2, [r3, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	687a      	ldr	r2, [r7, #4]
 80025d0:	3204      	adds	r2, #4
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	1d1a      	adds	r2, r3, #4
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	609a      	str	r2, [r3, #8]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025e0:	4613      	mov	r3, r2
 80025e2:	009b      	lsls	r3, r3, #2
 80025e4:	4413      	add	r3, r2
 80025e6:	009b      	lsls	r3, r3, #2
 80025e8:	4a1b      	ldr	r2, [pc, #108]	; (8002658 <prvAddNewTaskToReadyList+0x124>)
 80025ea:	441a      	add	r2, r3
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	615a      	str	r2, [r3, #20]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025f4:	4918      	ldr	r1, [pc, #96]	; (8002658 <prvAddNewTaskToReadyList+0x124>)
 80025f6:	4613      	mov	r3, r2
 80025f8:	009b      	lsls	r3, r3, #2
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	440b      	add	r3, r1
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	1c59      	adds	r1, r3, #1
 8002604:	4814      	ldr	r0, [pc, #80]	; (8002658 <prvAddNewTaskToReadyList+0x124>)
 8002606:	4613      	mov	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	4413      	add	r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4403      	add	r3, r0
 8002610:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 8002612:	f000 fd01 	bl	8003018 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <prvAddNewTaskToReadyList+0x118>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00e      	beq.n	800263c <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800261e:	4b0a      	ldr	r3, [pc, #40]	; (8002648 <prvAddNewTaskToReadyList+0x114>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002628:	429a      	cmp	r2, r3
 800262a:	d207      	bcs.n	800263c <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 800262c:	4b0b      	ldr	r3, [pc, #44]	; (800265c <prvAddNewTaskToReadyList+0x128>)
 800262e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	f3bf 8f4f 	dsb	sy
 8002638:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800263c:	bf00      	nop
 800263e:	3710      	adds	r7, #16
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	200001b8 	.word	0x200001b8
 8002648:	200000e0 	.word	0x200000e0
 800264c:	200001c4 	.word	0x200001c4
 8002650:	200001d4 	.word	0x200001d4
 8002654:	200001c0 	.word	0x200001c0
 8002658:	200000e4 	.word	0x200000e4
 800265c:	e000ed04 	.word	0xe000ed04

08002660 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002660:	b580      	push	{r7, lr}
 8002662:	b086      	sub	sp, #24
 8002664:	af02      	add	r7, sp, #8
            }
        }
    #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( prvIdleTask,
 8002666:	4b1d      	ldr	r3, [pc, #116]	; (80026dc <vTaskStartScheduler+0x7c>)
 8002668:	9301      	str	r3, [sp, #4]
 800266a:	2300      	movs	r3, #0
 800266c:	9300      	str	r3, [sp, #0]
 800266e:	2300      	movs	r3, #0
 8002670:	2282      	movs	r2, #130	; 0x82
 8002672:	491b      	ldr	r1, [pc, #108]	; (80026e0 <vTaskStartScheduler+0x80>)
 8002674:	481b      	ldr	r0, [pc, #108]	; (80026e4 <vTaskStartScheduler+0x84>)
 8002676:	f7ff fe78 	bl	800236a <xTaskCreate>
 800267a:	60f8      	str	r0, [r7, #12]
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	2b01      	cmp	r3, #1
 8002680:	d116      	bne.n	80026b0 <vTaskStartScheduler+0x50>
        __asm volatile
 8002682:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002686:	f383 8811 	msr	BASEPRI, r3
 800268a:	f3bf 8f6f 	isb	sy
 800268e:	f3bf 8f4f 	dsb	sy
 8002692:	60bb      	str	r3, [r7, #8]
    }
 8002694:	bf00      	nop
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */

        xNextTaskUnblockTime = portMAX_DELAY;
 8002696:	4b14      	ldr	r3, [pc, #80]	; (80026e8 <vTaskStartScheduler+0x88>)
 8002698:	f04f 32ff 	mov.w	r2, #4294967295
 800269c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800269e:	4b13      	ldr	r3, [pc, #76]	; (80026ec <vTaskStartScheduler+0x8c>)
 80026a0:	2201      	movs	r2, #1
 80026a2:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80026a4:	4b12      	ldr	r3, [pc, #72]	; (80026f0 <vTaskStartScheduler+0x90>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]

        traceTASK_SWITCHED_IN();

        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */
        if( xPortStartScheduler() != pdFALSE )
 80026aa:	f000 fbe3 	bl	8002e74 <xPortStartScheduler>
 80026ae:	e00e      	b.n	80026ce <vTaskStartScheduler+0x6e>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026b6:	d10a      	bne.n	80026ce <vTaskStartScheduler+0x6e>
        __asm volatile
 80026b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026bc:	f383 8811 	msr	BASEPRI, r3
 80026c0:	f3bf 8f6f 	isb	sy
 80026c4:	f3bf 8f4f 	dsb	sy
 80026c8:	607b      	str	r3, [r7, #4]
    }
 80026ca:	bf00      	nop
 80026cc:	e7fe      	b.n	80026cc <vTaskStartScheduler+0x6c>
     * meaning xIdleTaskHandle is not used anywhere else. */
    ( void ) xIdleTaskHandle;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 80026ce:	4b09      	ldr	r3, [pc, #36]	; (80026f4 <vTaskStartScheduler+0x94>)
 80026d0:	681b      	ldr	r3, [r3, #0]
}
 80026d2:	bf00      	nop
 80026d4:	3710      	adds	r7, #16
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	200001dc 	.word	0x200001dc
 80026e0:	0800456c 	.word	0x0800456c
 80026e4:	08002bf1 	.word	0x08002bf1
 80026e8:	200001d8 	.word	0x200001d8
 80026ec:	200001c4 	.word	0x200001c4
 80026f0:	200001bc 	.word	0x200001bc
 80026f4:	2000000c 	.word	0x2000000c

080026f8 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80026f8:	b480      	push	{r7}
 80026fa:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 80026fc:	4b04      	ldr	r3, [pc, #16]	; (8002710 <vTaskSuspendAll+0x18>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	3301      	adds	r3, #1
 8002702:	4a03      	ldr	r2, [pc, #12]	; (8002710 <vTaskSuspendAll+0x18>)
 8002704:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002706:	bf00      	nop
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr
 8002710:	200001e0 	.word	0x200001e0

08002714 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800271e:	2300      	movs	r3, #0
 8002720:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 8002722:	4b71      	ldr	r3, [pc, #452]	; (80028e8 <xTaskResumeAll+0x1d4>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	2b00      	cmp	r3, #0
 8002728:	d10a      	bne.n	8002740 <xTaskResumeAll+0x2c>
        __asm volatile
 800272a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272e:	f383 8811 	msr	BASEPRI, r3
 8002732:	f3bf 8f6f 	isb	sy
 8002736:	f3bf 8f4f 	dsb	sy
 800273a:	607b      	str	r3, [r7, #4]
    }
 800273c:	bf00      	nop
 800273e:	e7fe      	b.n	800273e <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 8002740:	f000 fc3a 	bl	8002fb8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002744:	4b68      	ldr	r3, [pc, #416]	; (80028e8 <xTaskResumeAll+0x1d4>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	3b01      	subs	r3, #1
 800274a:	4a67      	ldr	r2, [pc, #412]	; (80028e8 <xTaskResumeAll+0x1d4>)
 800274c:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800274e:	4b66      	ldr	r3, [pc, #408]	; (80028e8 <xTaskResumeAll+0x1d4>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2b00      	cmp	r3, #0
 8002754:	f040 80c0 	bne.w	80028d8 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002758:	4b64      	ldr	r3, [pc, #400]	; (80028ec <xTaskResumeAll+0x1d8>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	2b00      	cmp	r3, #0
 800275e:	f000 80bb 	beq.w	80028d8 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002762:	e08a      	b.n	800287a <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002764:	4b62      	ldr	r3, [pc, #392]	; (80028f0 <xTaskResumeAll+0x1dc>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002770:	613b      	str	r3, [r7, #16]
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	69db      	ldr	r3, [r3, #28]
 8002776:	69fa      	ldr	r2, [r7, #28]
 8002778:	6a12      	ldr	r2, [r2, #32]
 800277a:	609a      	str	r2, [r3, #8]
 800277c:	69fb      	ldr	r3, [r7, #28]
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	69fa      	ldr	r2, [r7, #28]
 8002782:	69d2      	ldr	r2, [r2, #28]
 8002784:	605a      	str	r2, [r3, #4]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	685a      	ldr	r2, [r3, #4]
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3318      	adds	r3, #24
 800278e:	429a      	cmp	r2, r3
 8002790:	d103      	bne.n	800279a <xTaskResumeAll+0x86>
 8002792:	69fb      	ldr	r3, [r7, #28]
 8002794:	6a1a      	ldr	r2, [r3, #32]
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	605a      	str	r2, [r3, #4]
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	2200      	movs	r2, #0
 800279e:	629a      	str	r2, [r3, #40]	; 0x28
 80027a0:	693b      	ldr	r3, [r7, #16]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	1e5a      	subs	r2, r3, #1
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80027aa:	69fb      	ldr	r3, [r7, #28]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	69fa      	ldr	r2, [r7, #28]
 80027b6:	68d2      	ldr	r2, [r2, #12]
 80027b8:	609a      	str	r2, [r3, #8]
 80027ba:	69fb      	ldr	r3, [r7, #28]
 80027bc:	68db      	ldr	r3, [r3, #12]
 80027be:	69fa      	ldr	r2, [r7, #28]
 80027c0:	6892      	ldr	r2, [r2, #8]
 80027c2:	605a      	str	r2, [r3, #4]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	685a      	ldr	r2, [r3, #4]
 80027c8:	69fb      	ldr	r3, [r7, #28]
 80027ca:	3304      	adds	r3, #4
 80027cc:	429a      	cmp	r2, r3
 80027ce:	d103      	bne.n	80027d8 <xTaskResumeAll+0xc4>
 80027d0:	69fb      	ldr	r3, [r7, #28]
 80027d2:	68da      	ldr	r2, [r3, #12]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	605a      	str	r2, [r3, #4]
 80027d8:	69fb      	ldr	r3, [r7, #28]
 80027da:	2200      	movs	r2, #0
 80027dc:	615a      	str	r2, [r3, #20]
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	1e5a      	subs	r2, r3, #1
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027ec:	2201      	movs	r2, #1
 80027ee:	409a      	lsls	r2, r3
 80027f0:	4b40      	ldr	r3, [pc, #256]	; (80028f4 <xTaskResumeAll+0x1e0>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4313      	orrs	r3, r2
 80027f6:	4a3f      	ldr	r2, [pc, #252]	; (80028f4 <xTaskResumeAll+0x1e0>)
 80027f8:	6013      	str	r3, [r2, #0]
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027fe:	493e      	ldr	r1, [pc, #248]	; (80028f8 <xTaskResumeAll+0x1e4>)
 8002800:	4613      	mov	r3, r2
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	3304      	adds	r3, #4
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	609a      	str	r2, [r3, #8]
 8002816:	68bb      	ldr	r3, [r7, #8]
 8002818:	689a      	ldr	r2, [r3, #8]
 800281a:	69fb      	ldr	r3, [r7, #28]
 800281c:	60da      	str	r2, [r3, #12]
 800281e:	68bb      	ldr	r3, [r7, #8]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	69fa      	ldr	r2, [r7, #28]
 8002824:	3204      	adds	r2, #4
 8002826:	605a      	str	r2, [r3, #4]
 8002828:	69fb      	ldr	r3, [r7, #28]
 800282a:	1d1a      	adds	r2, r3, #4
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	609a      	str	r2, [r3, #8]
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	4a2e      	ldr	r2, [pc, #184]	; (80028f8 <xTaskResumeAll+0x1e4>)
 800283e:	441a      	add	r2, r3
 8002840:	69fb      	ldr	r3, [r7, #28]
 8002842:	615a      	str	r2, [r3, #20]
 8002844:	69fb      	ldr	r3, [r7, #28]
 8002846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002848:	492b      	ldr	r1, [pc, #172]	; (80028f8 <xTaskResumeAll+0x1e4>)
 800284a:	4613      	mov	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	4413      	add	r3, r2
 8002850:	009b      	lsls	r3, r3, #2
 8002852:	440b      	add	r3, r1
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	1c59      	adds	r1, r3, #1
 8002858:	4827      	ldr	r0, [pc, #156]	; (80028f8 <xTaskResumeAll+0x1e4>)
 800285a:	4613      	mov	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	4413      	add	r3, r2
 8002860:	009b      	lsls	r3, r3, #2
 8002862:	4403      	add	r3, r0
 8002864:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002866:	69fb      	ldr	r3, [r7, #28]
 8002868:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800286a:	4b24      	ldr	r3, [pc, #144]	; (80028fc <xTaskResumeAll+0x1e8>)
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002870:	429a      	cmp	r2, r3
 8002872:	d302      	bcc.n	800287a <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 8002874:	4b22      	ldr	r3, [pc, #136]	; (8002900 <xTaskResumeAll+0x1ec>)
 8002876:	2201      	movs	r2, #1
 8002878:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800287a:	4b1d      	ldr	r3, [pc, #116]	; (80028f0 <xTaskResumeAll+0x1dc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	f47f af70 	bne.w	8002764 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d001      	beq.n	800288e <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 800288a:	f000 fa47 	bl	8002d1c <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800288e:	4b1d      	ldr	r3, [pc, #116]	; (8002904 <xTaskResumeAll+0x1f0>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d010      	beq.n	80028bc <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 800289a:	f000 f837 	bl	800290c <xTaskIncrementTick>
 800289e:	4603      	mov	r3, r0
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d002      	beq.n	80028aa <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80028a4:	4b16      	ldr	r3, [pc, #88]	; (8002900 <xTaskResumeAll+0x1ec>)
 80028a6:	2201      	movs	r2, #1
 80028a8:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	3b01      	subs	r3, #1
 80028ae:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d1f1      	bne.n	800289a <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80028b6:	4b13      	ldr	r3, [pc, #76]	; (8002904 <xTaskResumeAll+0x1f0>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80028bc:	4b10      	ldr	r3, [pc, #64]	; (8002900 <xTaskResumeAll+0x1ec>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d009      	beq.n	80028d8 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 80028c4:	2301      	movs	r3, #1
 80028c6:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 80028c8:	4b0f      	ldr	r3, [pc, #60]	; (8002908 <xTaskResumeAll+0x1f4>)
 80028ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	f3bf 8f4f 	dsb	sy
 80028d4:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 80028d8:	f000 fb9e 	bl	8003018 <vPortExitCritical>

    return xAlreadyYielded;
 80028dc:	69bb      	ldr	r3, [r7, #24]
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3720      	adds	r7, #32
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200001e0 	.word	0x200001e0
 80028ec:	200001b8 	.word	0x200001b8
 80028f0:	20000178 	.word	0x20000178
 80028f4:	200001c0 	.word	0x200001c0
 80028f8:	200000e4 	.word	0x200000e4
 80028fc:	200000e0 	.word	0x200000e0
 8002900:	200001cc 	.word	0x200001cc
 8002904:	200001c8 	.word	0x200001c8
 8002908:	e000ed04 	.word	0xe000ed04

0800290c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800290c:	b580      	push	{r7, lr}
 800290e:	b08a      	sub	sp, #40	; 0x28
 8002910:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002916:	4b7d      	ldr	r3, [pc, #500]	; (8002b0c <xTaskIncrementTick+0x200>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f040 80ec 	bne.w	8002af8 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8002920:	4b7b      	ldr	r3, [pc, #492]	; (8002b10 <xTaskIncrementTick+0x204>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	3301      	adds	r3, #1
 8002926:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002928:	4a79      	ldr	r2, [pc, #484]	; (8002b10 <xTaskIncrementTick+0x204>)
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800292e:	6a3b      	ldr	r3, [r7, #32]
 8002930:	2b00      	cmp	r3, #0
 8002932:	d120      	bne.n	8002976 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002934:	4b77      	ldr	r3, [pc, #476]	; (8002b14 <xTaskIncrementTick+0x208>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d00a      	beq.n	8002954 <xTaskIncrementTick+0x48>
        __asm volatile
 800293e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002942:	f383 8811 	msr	BASEPRI, r3
 8002946:	f3bf 8f6f 	isb	sy
 800294a:	f3bf 8f4f 	dsb	sy
 800294e:	607b      	str	r3, [r7, #4]
    }
 8002950:	bf00      	nop
 8002952:	e7fe      	b.n	8002952 <xTaskIncrementTick+0x46>
 8002954:	4b6f      	ldr	r3, [pc, #444]	; (8002b14 <xTaskIncrementTick+0x208>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	4b6f      	ldr	r3, [pc, #444]	; (8002b18 <xTaskIncrementTick+0x20c>)
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a6d      	ldr	r2, [pc, #436]	; (8002b14 <xTaskIncrementTick+0x208>)
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	4a6d      	ldr	r2, [pc, #436]	; (8002b18 <xTaskIncrementTick+0x20c>)
 8002964:	69fb      	ldr	r3, [r7, #28]
 8002966:	6013      	str	r3, [r2, #0]
 8002968:	4b6c      	ldr	r3, [pc, #432]	; (8002b1c <xTaskIncrementTick+0x210>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	3301      	adds	r3, #1
 800296e:	4a6b      	ldr	r2, [pc, #428]	; (8002b1c <xTaskIncrementTick+0x210>)
 8002970:	6013      	str	r3, [r2, #0]
 8002972:	f000 f9d3 	bl	8002d1c <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8002976:	4b6a      	ldr	r3, [pc, #424]	; (8002b20 <xTaskIncrementTick+0x214>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6a3a      	ldr	r2, [r7, #32]
 800297c:	429a      	cmp	r2, r3
 800297e:	f0c0 80a6 	bcc.w	8002ace <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002982:	4b64      	ldr	r3, [pc, #400]	; (8002b14 <xTaskIncrementTick+0x208>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d104      	bne.n	8002996 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800298c:	4b64      	ldr	r3, [pc, #400]	; (8002b20 <xTaskIncrementTick+0x214>)
 800298e:	f04f 32ff 	mov.w	r2, #4294967295
 8002992:	601a      	str	r2, [r3, #0]
                    break;
 8002994:	e09b      	b.n	8002ace <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002996:	4b5f      	ldr	r3, [pc, #380]	; (8002b14 <xTaskIncrementTick+0x208>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	68db      	ldr	r3, [r3, #12]
 800299e:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80029a6:	6a3a      	ldr	r2, [r7, #32]
 80029a8:	697b      	ldr	r3, [r7, #20]
 80029aa:	429a      	cmp	r2, r3
 80029ac:	d203      	bcs.n	80029b6 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80029ae:	4a5c      	ldr	r2, [pc, #368]	; (8002b20 <xTaskIncrementTick+0x214>)
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80029b4:	e08b      	b.n	8002ace <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80029b6:	69bb      	ldr	r3, [r7, #24]
 80029b8:	695b      	ldr	r3, [r3, #20]
 80029ba:	613b      	str	r3, [r7, #16]
 80029bc:	69bb      	ldr	r3, [r7, #24]
 80029be:	689b      	ldr	r3, [r3, #8]
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	68d2      	ldr	r2, [r2, #12]
 80029c4:	609a      	str	r2, [r3, #8]
 80029c6:	69bb      	ldr	r3, [r7, #24]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	69ba      	ldr	r2, [r7, #24]
 80029cc:	6892      	ldr	r2, [r2, #8]
 80029ce:	605a      	str	r2, [r3, #4]
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	685a      	ldr	r2, [r3, #4]
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	3304      	adds	r3, #4
 80029d8:	429a      	cmp	r2, r3
 80029da:	d103      	bne.n	80029e4 <xTaskIncrementTick+0xd8>
 80029dc:	69bb      	ldr	r3, [r7, #24]
 80029de:	68da      	ldr	r2, [r3, #12]
 80029e0:	693b      	ldr	r3, [r7, #16]
 80029e2:	605a      	str	r2, [r3, #4]
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	2200      	movs	r2, #0
 80029e8:	615a      	str	r2, [r3, #20]
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	1e5a      	subs	r2, r3, #1
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d01e      	beq.n	8002a3a <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a00:	60fb      	str	r3, [r7, #12]
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	69db      	ldr	r3, [r3, #28]
 8002a06:	69ba      	ldr	r2, [r7, #24]
 8002a08:	6a12      	ldr	r2, [r2, #32]
 8002a0a:	609a      	str	r2, [r3, #8]
 8002a0c:	69bb      	ldr	r3, [r7, #24]
 8002a0e:	6a1b      	ldr	r3, [r3, #32]
 8002a10:	69ba      	ldr	r2, [r7, #24]
 8002a12:	69d2      	ldr	r2, [r2, #28]
 8002a14:	605a      	str	r2, [r3, #4]
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	685a      	ldr	r2, [r3, #4]
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	3318      	adds	r3, #24
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	d103      	bne.n	8002a2a <xTaskIncrementTick+0x11e>
 8002a22:	69bb      	ldr	r3, [r7, #24]
 8002a24:	6a1a      	ldr	r2, [r3, #32]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	605a      	str	r2, [r3, #4]
 8002a2a:	69bb      	ldr	r3, [r7, #24]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	629a      	str	r2, [r3, #40]	; 0x28
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	1e5a      	subs	r2, r3, #1
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a3e:	2201      	movs	r2, #1
 8002a40:	409a      	lsls	r2, r3
 8002a42:	4b38      	ldr	r3, [pc, #224]	; (8002b24 <xTaskIncrementTick+0x218>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4313      	orrs	r3, r2
 8002a48:	4a36      	ldr	r2, [pc, #216]	; (8002b24 <xTaskIncrementTick+0x218>)
 8002a4a:	6013      	str	r3, [r2, #0]
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a50:	4935      	ldr	r1, [pc, #212]	; (8002b28 <xTaskIncrementTick+0x21c>)
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	60bb      	str	r3, [r7, #8]
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	68ba      	ldr	r2, [r7, #8]
 8002a66:	609a      	str	r2, [r3, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
 8002a6a:	689a      	ldr	r2, [r3, #8]
 8002a6c:	69bb      	ldr	r3, [r7, #24]
 8002a6e:	60da      	str	r2, [r3, #12]
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	69ba      	ldr	r2, [r7, #24]
 8002a76:	3204      	adds	r2, #4
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	69bb      	ldr	r3, [r7, #24]
 8002a7c:	1d1a      	adds	r2, r3, #4
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	609a      	str	r2, [r3, #8]
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a86:	4613      	mov	r3, r2
 8002a88:	009b      	lsls	r3, r3, #2
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4a26      	ldr	r2, [pc, #152]	; (8002b28 <xTaskIncrementTick+0x21c>)
 8002a90:	441a      	add	r2, r3
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	615a      	str	r2, [r3, #20]
 8002a96:	69bb      	ldr	r3, [r7, #24]
 8002a98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a9a:	4923      	ldr	r1, [pc, #140]	; (8002b28 <xTaskIncrementTick+0x21c>)
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	4413      	add	r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	1c59      	adds	r1, r3, #1
 8002aaa:	481f      	ldr	r0, [pc, #124]	; (8002b28 <xTaskIncrementTick+0x21c>)
 8002aac:	4613      	mov	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	4413      	add	r3, r2
 8002ab2:	009b      	lsls	r3, r3, #2
 8002ab4:	4403      	add	r3, r0
 8002ab6:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002ab8:	69bb      	ldr	r3, [r7, #24]
 8002aba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002abc:	4b1b      	ldr	r3, [pc, #108]	; (8002b2c <xTaskIncrementTick+0x220>)
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	f4ff af5d 	bcc.w	8002982 <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002acc:	e759      	b.n	8002982 <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8002ace:	4b17      	ldr	r3, [pc, #92]	; (8002b2c <xTaskIncrementTick+0x220>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ad4:	4914      	ldr	r1, [pc, #80]	; (8002b28 <xTaskIncrementTick+0x21c>)
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	009b      	lsls	r3, r3, #2
 8002ade:	440b      	add	r3, r1
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	d901      	bls.n	8002aea <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002aea:	4b11      	ldr	r3, [pc, #68]	; (8002b30 <xTaskIncrementTick+0x224>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d007      	beq.n	8002b02 <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 8002af2:	2301      	movs	r3, #1
 8002af4:	627b      	str	r3, [r7, #36]	; 0x24
 8002af6:	e004      	b.n	8002b02 <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002af8:	4b0e      	ldr	r3, [pc, #56]	; (8002b34 <xTaskIncrementTick+0x228>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	3301      	adds	r3, #1
 8002afe:	4a0d      	ldr	r2, [pc, #52]	; (8002b34 <xTaskIncrementTick+0x228>)
 8002b00:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 8002b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002b04:	4618      	mov	r0, r3
 8002b06:	3728      	adds	r7, #40	; 0x28
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}
 8002b0c:	200001e0 	.word	0x200001e0
 8002b10:	200001bc 	.word	0x200001bc
 8002b14:	20000170 	.word	0x20000170
 8002b18:	20000174 	.word	0x20000174
 8002b1c:	200001d0 	.word	0x200001d0
 8002b20:	200001d8 	.word	0x200001d8
 8002b24:	200001c0 	.word	0x200001c0
 8002b28:	200000e4 	.word	0x200000e4
 8002b2c:	200000e0 	.word	0x200000e0
 8002b30:	200001cc 	.word	0x200001cc
 8002b34:	200001c8 	.word	0x200001c8

08002b38 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b087      	sub	sp, #28
 8002b3c:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8002b3e:	4b27      	ldr	r3, [pc, #156]	; (8002bdc <vTaskSwitchContext+0xa4>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d003      	beq.n	8002b4e <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002b46:	4b26      	ldr	r3, [pc, #152]	; (8002be0 <vTaskSwitchContext+0xa8>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002b4c:	e03f      	b.n	8002bce <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 8002b4e:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <vTaskSwitchContext+0xa8>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002b54:	4b23      	ldr	r3, [pc, #140]	; (8002be4 <vTaskSwitchContext+0xac>)
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	fab3 f383 	clz	r3, r3
 8002b60:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 8002b62:	7afb      	ldrb	r3, [r7, #11]
 8002b64:	f1c3 031f 	rsb	r3, r3, #31
 8002b68:	617b      	str	r3, [r7, #20]
 8002b6a:	491f      	ldr	r1, [pc, #124]	; (8002be8 <vTaskSwitchContext+0xb0>)
 8002b6c:	697a      	ldr	r2, [r7, #20]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	009b      	lsls	r3, r3, #2
 8002b72:	4413      	add	r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d10a      	bne.n	8002b94 <vTaskSwitchContext+0x5c>
        __asm volatile
 8002b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b82:	f383 8811 	msr	BASEPRI, r3
 8002b86:	f3bf 8f6f 	isb	sy
 8002b8a:	f3bf 8f4f 	dsb	sy
 8002b8e:	607b      	str	r3, [r7, #4]
    }
 8002b90:	bf00      	nop
 8002b92:	e7fe      	b.n	8002b92 <vTaskSwitchContext+0x5a>
 8002b94:	697a      	ldr	r2, [r7, #20]
 8002b96:	4613      	mov	r3, r2
 8002b98:	009b      	lsls	r3, r3, #2
 8002b9a:	4413      	add	r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	4a12      	ldr	r2, [pc, #72]	; (8002be8 <vTaskSwitchContext+0xb0>)
 8002ba0:	4413      	add	r3, r2
 8002ba2:	613b      	str	r3, [r7, #16]
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	685a      	ldr	r2, [r3, #4]
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	693b      	ldr	r3, [r7, #16]
 8002bb4:	3308      	adds	r3, #8
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d104      	bne.n	8002bc4 <vTaskSwitchContext+0x8c>
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	685a      	ldr	r2, [r3, #4]
 8002bc0:	693b      	ldr	r3, [r7, #16]
 8002bc2:	605a      	str	r2, [r3, #4]
 8002bc4:	693b      	ldr	r3, [r7, #16]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	68db      	ldr	r3, [r3, #12]
 8002bca:	4a08      	ldr	r2, [pc, #32]	; (8002bec <vTaskSwitchContext+0xb4>)
 8002bcc:	6013      	str	r3, [r2, #0]
}
 8002bce:	bf00      	nop
 8002bd0:	371c      	adds	r7, #28
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	200001e0 	.word	0x200001e0
 8002be0:	200001cc 	.word	0x200001cc
 8002be4:	200001c0 	.word	0x200001c0
 8002be8:	200000e4 	.word	0x200000e4
 8002bec:	200000e0 	.word	0x200000e0

08002bf0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]

    for( ; ; )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8002bf8:	f000 f852 	bl	8002ca0 <prvCheckTasksWaitingTermination>
                 *
                 * A critical region is not required here as we are just reading from
                 * the list, and an occasional incorrect value will not matter.  If
                 * the ready list at the idle priority contains more than one task
                 * then a task other than the idle task is ready to execute. */
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8002bfc:	4b06      	ldr	r3, [pc, #24]	; (8002c18 <prvIdleTask+0x28>)
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	2b01      	cmp	r3, #1
 8002c02:	d9f9      	bls.n	8002bf8 <prvIdleTask+0x8>
                {
                    taskYIELD();
 8002c04:	4b05      	ldr	r3, [pc, #20]	; (8002c1c <prvIdleTask+0x2c>)
 8002c06:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	f3bf 8f4f 	dsb	sy
 8002c10:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8002c14:	e7f0      	b.n	8002bf8 <prvIdleTask+0x8>
 8002c16:	bf00      	nop
 8002c18:	200000e4 	.word	0x200000e4
 8002c1c:	e000ed04 	.word	0xe000ed04

08002c20 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	b082      	sub	sp, #8
 8002c24:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c26:	2300      	movs	r3, #0
 8002c28:	607b      	str	r3, [r7, #4]
 8002c2a:	e00c      	b.n	8002c46 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4613      	mov	r3, r2
 8002c30:	009b      	lsls	r3, r3, #2
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4a12      	ldr	r2, [pc, #72]	; (8002c80 <prvInitialiseTaskLists+0x60>)
 8002c38:	4413      	add	r3, r2
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f7ff fb3e 	bl	80022bc <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	3301      	adds	r3, #1
 8002c44:	607b      	str	r3, [r7, #4]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2b04      	cmp	r3, #4
 8002c4a:	d9ef      	bls.n	8002c2c <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002c4c:	480d      	ldr	r0, [pc, #52]	; (8002c84 <prvInitialiseTaskLists+0x64>)
 8002c4e:	f7ff fb35 	bl	80022bc <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8002c52:	480d      	ldr	r0, [pc, #52]	; (8002c88 <prvInitialiseTaskLists+0x68>)
 8002c54:	f7ff fb32 	bl	80022bc <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002c58:	480c      	ldr	r0, [pc, #48]	; (8002c8c <prvInitialiseTaskLists+0x6c>)
 8002c5a:	f7ff fb2f 	bl	80022bc <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 8002c5e:	480c      	ldr	r0, [pc, #48]	; (8002c90 <prvInitialiseTaskLists+0x70>)
 8002c60:	f7ff fb2c 	bl	80022bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002c64:	480b      	ldr	r0, [pc, #44]	; (8002c94 <prvInitialiseTaskLists+0x74>)
 8002c66:	f7ff fb29 	bl	80022bc <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002c6a:	4b0b      	ldr	r3, [pc, #44]	; (8002c98 <prvInitialiseTaskLists+0x78>)
 8002c6c:	4a05      	ldr	r2, [pc, #20]	; (8002c84 <prvInitialiseTaskLists+0x64>)
 8002c6e:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8002c70:	4b0a      	ldr	r3, [pc, #40]	; (8002c9c <prvInitialiseTaskLists+0x7c>)
 8002c72:	4a05      	ldr	r2, [pc, #20]	; (8002c88 <prvInitialiseTaskLists+0x68>)
 8002c74:	601a      	str	r2, [r3, #0]
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200000e4 	.word	0x200000e4
 8002c84:	20000148 	.word	0x20000148
 8002c88:	2000015c 	.word	0x2000015c
 8002c8c:	20000178 	.word	0x20000178
 8002c90:	2000018c 	.word	0x2000018c
 8002c94:	200001a4 	.word	0x200001a4
 8002c98:	20000170 	.word	0x20000170
 8002c9c:	20000174 	.word	0x20000174

08002ca0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
        {
            TCB_t * pxTCB;

            /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
             * being called too often in the idle task. */
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002ca6:	e019      	b.n	8002cdc <prvCheckTasksWaitingTermination+0x3c>
            {
                taskENTER_CRITICAL();
 8002ca8:	f000 f986 	bl	8002fb8 <vPortEnterCritical>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002cac:	4b10      	ldr	r3, [pc, #64]	; (8002cf0 <prvCheckTasksWaitingTermination+0x50>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	68db      	ldr	r3, [r3, #12]
 8002cb2:	607b      	str	r3, [r7, #4]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	3304      	adds	r3, #4
 8002cb8:	4618      	mov	r0, r3
 8002cba:	f7ff fb2c 	bl	8002316 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8002cbe:	4b0d      	ldr	r3, [pc, #52]	; (8002cf4 <prvCheckTasksWaitingTermination+0x54>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	4a0b      	ldr	r2, [pc, #44]	; (8002cf4 <prvCheckTasksWaitingTermination+0x54>)
 8002cc6:	6013      	str	r3, [r2, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8002cc8:	4b0b      	ldr	r3, [pc, #44]	; (8002cf8 <prvCheckTasksWaitingTermination+0x58>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	4a0a      	ldr	r2, [pc, #40]	; (8002cf8 <prvCheckTasksWaitingTermination+0x58>)
 8002cd0:	6013      	str	r3, [r2, #0]
                }
                taskEXIT_CRITICAL();
 8002cd2:	f000 f9a1 	bl	8003018 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 8002cd6:	6878      	ldr	r0, [r7, #4]
 8002cd8:	f000 f810 	bl	8002cfc <prvDeleteTCB>
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8002cdc:	4b06      	ldr	r3, [pc, #24]	; (8002cf8 <prvCheckTasksWaitingTermination+0x58>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d1e1      	bne.n	8002ca8 <prvCheckTasksWaitingTermination+0x8>
            }
        }
    #endif /* INCLUDE_vTaskDelete */
}
 8002ce4:	bf00      	nop
 8002ce6:	bf00      	nop
 8002ce8:	3708      	adds	r7, #8
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}
 8002cee:	bf00      	nop
 8002cf0:	2000018c 	.word	0x2000018c
 8002cf4:	200001b8 	.word	0x200001b8
 8002cf8:	200001a0 	.word	0x200001a0

08002cfc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
            {
                /* The task can only have been allocated dynamically - free both
                 * the stack and TCB. */
                vPortFreeStack( pxTCB->pxStack );
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d08:	4618      	mov	r0, r3
 8002d0a:	f000 fb17 	bl	800333c <vPortFree>
                vPortFree( pxTCB );
 8002d0e:	6878      	ldr	r0, [r7, #4]
 8002d10:	f000 fb14 	bl	800333c <vPortFree>
                    configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002d20:	4b0a      	ldr	r3, [pc, #40]	; (8002d4c <prvResetNextTaskUnblockTime+0x30>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d104      	bne.n	8002d34 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8002d2a:	4b09      	ldr	r3, [pc, #36]	; (8002d50 <prvResetNextTaskUnblockTime+0x34>)
 8002d2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d30:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 8002d32:	e005      	b.n	8002d40 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8002d34:	4b05      	ldr	r3, [pc, #20]	; (8002d4c <prvResetNextTaskUnblockTime+0x30>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	68db      	ldr	r3, [r3, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	4a04      	ldr	r2, [pc, #16]	; (8002d50 <prvResetNextTaskUnblockTime+0x34>)
 8002d3e:	6013      	str	r3, [r2, #0]
}
 8002d40:	bf00      	nop
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
 8002d4a:	bf00      	nop
 8002d4c:	20000170 	.word	0x20000170
 8002d50:	200001d8 	.word	0x200001d8

08002d54 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 8002d54:	b480      	push	{r7}
 8002d56:	b085      	sub	sp, #20
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	3b04      	subs	r3, #4
 8002d64:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d6c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	3b04      	subs	r3, #4
 8002d72:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	f023 0201 	bic.w	r2, r3, #1
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	3b04      	subs	r3, #4
 8002d82:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002d84:	4a0c      	ldr	r2, [pc, #48]	; (8002db8 <pxPortInitialiseStack+0x64>)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	3b14      	subs	r3, #20
 8002d8e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002d90:	687a      	ldr	r2, [r7, #4]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	3b04      	subs	r3, #4
 8002d9a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f06f 0202 	mvn.w	r2, #2
 8002da2:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002da4:	68fb      	ldr	r3, [r7, #12]
 8002da6:	3b20      	subs	r3, #32
 8002da8:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3714      	adds	r7, #20
 8002db0:	46bd      	mov	sp, r7
 8002db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db6:	4770      	bx	lr
 8002db8:	08002dbd 	.word	0x08002dbd

08002dbc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002dc6:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <prvTaskExitError+0x54>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dce:	d00a      	beq.n	8002de6 <prvTaskExitError+0x2a>
        __asm volatile
 8002dd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd4:	f383 8811 	msr	BASEPRI, r3
 8002dd8:	f3bf 8f6f 	isb	sy
 8002ddc:	f3bf 8f4f 	dsb	sy
 8002de0:	60fb      	str	r3, [r7, #12]
    }
 8002de2:	bf00      	nop
 8002de4:	e7fe      	b.n	8002de4 <prvTaskExitError+0x28>
        __asm volatile
 8002de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dea:	f383 8811 	msr	BASEPRI, r3
 8002dee:	f3bf 8f6f 	isb	sy
 8002df2:	f3bf 8f4f 	dsb	sy
 8002df6:	60bb      	str	r3, [r7, #8]
    }
 8002df8:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002dfa:	bf00      	nop
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d0fc      	beq.n	8002dfc <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002e02:	bf00      	nop
 8002e04:	bf00      	nop
 8002e06:	3714      	adds	r7, #20
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr
 8002e10:	20000010 	.word	0x20000010
	...

08002e20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002e20:	4b07      	ldr	r3, [pc, #28]	; (8002e40 <pxCurrentTCBConst2>)
 8002e22:	6819      	ldr	r1, [r3, #0]
 8002e24:	6808      	ldr	r0, [r1, #0]
 8002e26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002e2a:	f380 8809 	msr	PSP, r0
 8002e2e:	f3bf 8f6f 	isb	sy
 8002e32:	f04f 0000 	mov.w	r0, #0
 8002e36:	f380 8811 	msr	BASEPRI, r0
 8002e3a:	4770      	bx	lr
 8002e3c:	f3af 8000 	nop.w

08002e40 <pxCurrentTCBConst2>:
 8002e40:	200000e0 	.word	0x200000e0
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002e44:	bf00      	nop
 8002e46:	bf00      	nop

08002e48 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 8002e48:	4808      	ldr	r0, [pc, #32]	; (8002e6c <prvPortStartFirstTask+0x24>)
 8002e4a:	6800      	ldr	r0, [r0, #0]
 8002e4c:	6800      	ldr	r0, [r0, #0]
 8002e4e:	f380 8808 	msr	MSP, r0
 8002e52:	f04f 0000 	mov.w	r0, #0
 8002e56:	f380 8814 	msr	CONTROL, r0
 8002e5a:	b662      	cpsie	i
 8002e5c:	b661      	cpsie	f
 8002e5e:	f3bf 8f4f 	dsb	sy
 8002e62:	f3bf 8f6f 	isb	sy
 8002e66:	df00      	svc	0
 8002e68:	bf00      	nop
 8002e6a:	0000      	.short	0x0000
 8002e6c:	e000ed08 	.word	0xe000ed08
        " isb					\n"
        " svc 0					\n"/* System call to start first task. */
        " nop					\n"
        " .ltorg				\n"
        );
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop

08002e74 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
    configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

    /* This port can be used on all revisions of the Cortex-M7 core other than
     * the r0p1 parts.  r0p1 parts should use the port from the
     * /source/portable/GCC/ARM_CM7/r0p1 directory. */
    configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8002e7a:	4b46      	ldr	r3, [pc, #280]	; (8002f94 <xPortStartScheduler+0x120>)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	4a46      	ldr	r2, [pc, #280]	; (8002f98 <xPortStartScheduler+0x124>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d10a      	bne.n	8002e9a <xPortStartScheduler+0x26>
        __asm volatile
 8002e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e88:	f383 8811 	msr	BASEPRI, r3
 8002e8c:	f3bf 8f6f 	isb	sy
 8002e90:	f3bf 8f4f 	dsb	sy
 8002e94:	613b      	str	r3, [r7, #16]
    }
 8002e96:	bf00      	nop
 8002e98:	e7fe      	b.n	8002e98 <xPortStartScheduler+0x24>
    configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002e9a:	4b3e      	ldr	r3, [pc, #248]	; (8002f94 <xPortStartScheduler+0x120>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a3f      	ldr	r2, [pc, #252]	; (8002f9c <xPortStartScheduler+0x128>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d10a      	bne.n	8002eba <xPortStartScheduler+0x46>
        __asm volatile
 8002ea4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ea8:	f383 8811 	msr	BASEPRI, r3
 8002eac:	f3bf 8f6f 	isb	sy
 8002eb0:	f3bf 8f4f 	dsb	sy
 8002eb4:	60fb      	str	r3, [r7, #12]
    }
 8002eb6:	bf00      	nop
 8002eb8:	e7fe      	b.n	8002eb8 <xPortStartScheduler+0x44>

    #if ( configASSERT_DEFINED == 1 )
        {
            volatile uint32_t ulOriginalPriority;
            volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002eba:	4b39      	ldr	r3, [pc, #228]	; (8002fa0 <xPortStartScheduler+0x12c>)
 8002ebc:	617b      	str	r3, [r7, #20]
             * functions can be called.  ISR safe functions are those that end in
             * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
             * ensure interrupt entry is as fast and simple as possible.
             *
             * Save the interrupt priority value that is about to be clobbered. */
            ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002ebe:	697b      	ldr	r3, [r7, #20]
 8002ec0:	781b      	ldrb	r3, [r3, #0]
 8002ec2:	b2db      	uxtb	r3, r3
 8002ec4:	607b      	str	r3, [r7, #4]

            /* Determine the number of priority bits available.  First write to all
             * possible bits. */
            *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8002ec6:	697b      	ldr	r3, [r7, #20]
 8002ec8:	22ff      	movs	r2, #255	; 0xff
 8002eca:	701a      	strb	r2, [r3, #0]

            /* Read the value back to see how many bits stuck. */
            ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002ecc:	697b      	ldr	r3, [r7, #20]
 8002ece:	781b      	ldrb	r3, [r3, #0]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	70fb      	strb	r3, [r7, #3]

            /* Use the same mask on the maximum system call priority. */
            ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8002ed4:	78fb      	ldrb	r3, [r7, #3]
 8002ed6:	b2db      	uxtb	r3, r3
 8002ed8:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4b31      	ldr	r3, [pc, #196]	; (8002fa4 <xPortStartScheduler+0x130>)
 8002ee0:	701a      	strb	r2, [r3, #0]

            /* Calculate the maximum acceptable priority group value for the number
             * of bits read back. */
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8002ee2:	4b31      	ldr	r3, [pc, #196]	; (8002fa8 <xPortStartScheduler+0x134>)
 8002ee4:	2207      	movs	r2, #7
 8002ee6:	601a      	str	r2, [r3, #0]

            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002ee8:	e009      	b.n	8002efe <xPortStartScheduler+0x8a>
            {
                ulMaxPRIGROUPValue--;
 8002eea:	4b2f      	ldr	r3, [pc, #188]	; (8002fa8 <xPortStartScheduler+0x134>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3b01      	subs	r3, #1
 8002ef0:	4a2d      	ldr	r2, [pc, #180]	; (8002fa8 <xPortStartScheduler+0x134>)
 8002ef2:	6013      	str	r3, [r2, #0]
                ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8002ef4:	78fb      	ldrb	r3, [r7, #3]
 8002ef6:	b2db      	uxtb	r3, r3
 8002ef8:	005b      	lsls	r3, r3, #1
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	70fb      	strb	r3, [r7, #3]
            while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002efe:	78fb      	ldrb	r3, [r7, #3]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f06:	2b80      	cmp	r3, #128	; 0x80
 8002f08:	d0ef      	beq.n	8002eea <xPortStartScheduler+0x76>
            #ifdef configPRIO_BITS
                {
                    /* Check the FreeRTOS configuration that defines the number of
                     * priority bits matches the number of priority bits actually queried
                     * from the hardware. */
                    configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002f0a:	4b27      	ldr	r3, [pc, #156]	; (8002fa8 <xPortStartScheduler+0x134>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f1c3 0307 	rsb	r3, r3, #7
 8002f12:	2b04      	cmp	r3, #4
 8002f14:	d00a      	beq.n	8002f2c <xPortStartScheduler+0xb8>
        __asm volatile
 8002f16:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f1a:	f383 8811 	msr	BASEPRI, r3
 8002f1e:	f3bf 8f6f 	isb	sy
 8002f22:	f3bf 8f4f 	dsb	sy
 8002f26:	60bb      	str	r3, [r7, #8]
    }
 8002f28:	bf00      	nop
 8002f2a:	e7fe      	b.n	8002f2a <xPortStartScheduler+0xb6>
                }
            #endif

            /* Shift the priority group value back to its position within the AIRCR
             * register. */
            ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002f2c:	4b1e      	ldr	r3, [pc, #120]	; (8002fa8 <xPortStartScheduler+0x134>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	021b      	lsls	r3, r3, #8
 8002f32:	4a1d      	ldr	r2, [pc, #116]	; (8002fa8 <xPortStartScheduler+0x134>)
 8002f34:	6013      	str	r3, [r2, #0]
            ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8002f36:	4b1c      	ldr	r3, [pc, #112]	; (8002fa8 <xPortStartScheduler+0x134>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002f3e:	4a1a      	ldr	r2, [pc, #104]	; (8002fa8 <xPortStartScheduler+0x134>)
 8002f40:	6013      	str	r3, [r2, #0]

            /* Restore the clobbered interrupt priority register to its original
             * value. */
            *pucFirstUserPriorityRegister = ulOriginalPriority;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	b2da      	uxtb	r2, r3
 8002f46:	697b      	ldr	r3, [r7, #20]
 8002f48:	701a      	strb	r2, [r3, #0]
        }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8002f4a:	4b18      	ldr	r3, [pc, #96]	; (8002fac <xPortStartScheduler+0x138>)
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	4a17      	ldr	r2, [pc, #92]	; (8002fac <xPortStartScheduler+0x138>)
 8002f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002f54:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8002f56:	4b15      	ldr	r3, [pc, #84]	; (8002fac <xPortStartScheduler+0x138>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4a14      	ldr	r2, [pc, #80]	; (8002fac <xPortStartScheduler+0x138>)
 8002f5c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8002f60:	6013      	str	r3, [r2, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 8002f62:	f000 f8db 	bl	800311c <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 8002f66:	4b12      	ldr	r3, [pc, #72]	; (8002fb0 <xPortStartScheduler+0x13c>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 8002f6c:	f000 f8fa 	bl	8003164 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8002f70:	4b10      	ldr	r3, [pc, #64]	; (8002fb4 <xPortStartScheduler+0x140>)
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	4a0f      	ldr	r2, [pc, #60]	; (8002fb4 <xPortStartScheduler+0x140>)
 8002f76:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8002f7a:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 8002f7c:	f7ff ff64 	bl	8002e48 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8002f80:	f7ff fdda 	bl	8002b38 <vTaskSwitchContext>
    prvTaskExitError();
 8002f84:	f7ff ff1a 	bl	8002dbc <prvTaskExitError>

    /* Should not get here! */
    return 0;
 8002f88:	2300      	movs	r3, #0
}
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}
 8002f92:	bf00      	nop
 8002f94:	e000ed00 	.word	0xe000ed00
 8002f98:	410fc271 	.word	0x410fc271
 8002f9c:	410fc270 	.word	0x410fc270
 8002fa0:	e000e400 	.word	0xe000e400
 8002fa4:	200001e4 	.word	0x200001e4
 8002fa8:	200001e8 	.word	0x200001e8
 8002fac:	e000ed20 	.word	0xe000ed20
 8002fb0:	20000010 	.word	0x20000010
 8002fb4:	e000ef34 	.word	0xe000ef34

08002fb8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
        __asm volatile
 8002fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fc2:	f383 8811 	msr	BASEPRI, r3
 8002fc6:	f3bf 8f6f 	isb	sy
 8002fca:	f3bf 8f4f 	dsb	sy
 8002fce:	607b      	str	r3, [r7, #4]
    }
 8002fd0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002fd2:	4b0f      	ldr	r3, [pc, #60]	; (8003010 <vPortEnterCritical+0x58>)
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	3301      	adds	r3, #1
 8002fd8:	4a0d      	ldr	r2, [pc, #52]	; (8003010 <vPortEnterCritical+0x58>)
 8002fda:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002fdc:	4b0c      	ldr	r3, [pc, #48]	; (8003010 <vPortEnterCritical+0x58>)
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d10f      	bne.n	8003004 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002fe4:	4b0b      	ldr	r3, [pc, #44]	; (8003014 <vPortEnterCritical+0x5c>)
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d00a      	beq.n	8003004 <vPortEnterCritical+0x4c>
        __asm volatile
 8002fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ff2:	f383 8811 	msr	BASEPRI, r3
 8002ff6:	f3bf 8f6f 	isb	sy
 8002ffa:	f3bf 8f4f 	dsb	sy
 8002ffe:	603b      	str	r3, [r7, #0]
    }
 8003000:	bf00      	nop
 8003002:	e7fe      	b.n	8003002 <vPortEnterCritical+0x4a>
    }
}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	20000010 	.word	0x20000010
 8003014:	e000ed04 	.word	0xe000ed04

08003018 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8003018:	b480      	push	{r7}
 800301a:	b083      	sub	sp, #12
 800301c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <vPortExitCritical+0x50>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d10a      	bne.n	800303c <vPortExitCritical+0x24>
        __asm volatile
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	607b      	str	r3, [r7, #4]
    }
 8003038:	bf00      	nop
 800303a:	e7fe      	b.n	800303a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 800303c:	4b0a      	ldr	r3, [pc, #40]	; (8003068 <vPortExitCritical+0x50>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	3b01      	subs	r3, #1
 8003042:	4a09      	ldr	r2, [pc, #36]	; (8003068 <vPortExitCritical+0x50>)
 8003044:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8003046:	4b08      	ldr	r3, [pc, #32]	; (8003068 <vPortExitCritical+0x50>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d105      	bne.n	800305a <vPortExitCritical+0x42>
 800304e:	2300      	movs	r3, #0
 8003050:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8003058:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 800305a:	bf00      	nop
 800305c:	370c      	adds	r7, #12
 800305e:	46bd      	mov	sp, r7
 8003060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003064:	4770      	bx	lr
 8003066:	bf00      	nop
 8003068:	20000010 	.word	0x20000010
 800306c:	00000000 	.word	0x00000000

08003070 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8003070:	f3ef 8009 	mrs	r0, PSP
 8003074:	f3bf 8f6f 	isb	sy
 8003078:	4b15      	ldr	r3, [pc, #84]	; (80030d0 <pxCurrentTCBConst>)
 800307a:	681a      	ldr	r2, [r3, #0]
 800307c:	f01e 0f10 	tst.w	lr, #16
 8003080:	bf08      	it	eq
 8003082:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8003086:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800308a:	6010      	str	r0, [r2, #0]
 800308c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8003090:	f04f 0050 	mov.w	r0, #80	; 0x50
 8003094:	f380 8811 	msr	BASEPRI, r0
 8003098:	f3bf 8f4f 	dsb	sy
 800309c:	f3bf 8f6f 	isb	sy
 80030a0:	f7ff fd4a 	bl	8002b38 <vTaskSwitchContext>
 80030a4:	f04f 0000 	mov.w	r0, #0
 80030a8:	f380 8811 	msr	BASEPRI, r0
 80030ac:	bc09      	pop	{r0, r3}
 80030ae:	6819      	ldr	r1, [r3, #0]
 80030b0:	6808      	ldr	r0, [r1, #0]
 80030b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b6:	f01e 0f10 	tst.w	lr, #16
 80030ba:	bf08      	it	eq
 80030bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80030c0:	f380 8809 	msr	PSP, r0
 80030c4:	f3bf 8f6f 	isb	sy
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	f3af 8000 	nop.w

080030d0 <pxCurrentTCBConst>:
 80030d0:	200000e0 	.word	0x200000e0
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 80030d4:	bf00      	nop
 80030d6:	bf00      	nop

080030d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	b082      	sub	sp, #8
 80030dc:	af00      	add	r7, sp, #0
        __asm volatile
 80030de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030e2:	f383 8811 	msr	BASEPRI, r3
 80030e6:	f3bf 8f6f 	isb	sy
 80030ea:	f3bf 8f4f 	dsb	sy
 80030ee:	607b      	str	r3, [r7, #4]
    }
 80030f0:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80030f2:	f7ff fc0b 	bl	800290c <xTaskIncrementTick>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d003      	beq.n	8003104 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80030fc:	4b06      	ldr	r3, [pc, #24]	; (8003118 <SysTick_Handler+0x40>)
 80030fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003102:	601a      	str	r2, [r3, #0]
 8003104:	2300      	movs	r3, #0
 8003106:	603b      	str	r3, [r7, #0]
        __asm volatile
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	f383 8811 	msr	BASEPRI, r3
    }
 800310e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8003110:	bf00      	nop
 8003112:	3708      	adds	r7, #8
 8003114:	46bd      	mov	sp, r7
 8003116:	bd80      	pop	{r7, pc}
 8003118:	e000ed04 	.word	0xe000ed04

0800311c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8003120:	4b0b      	ldr	r3, [pc, #44]	; (8003150 <vPortSetupTimerInterrupt+0x34>)
 8003122:	2200      	movs	r2, #0
 8003124:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8003126:	4b0b      	ldr	r3, [pc, #44]	; (8003154 <vPortSetupTimerInterrupt+0x38>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800312c:	4b0a      	ldr	r3, [pc, #40]	; (8003158 <vPortSetupTimerInterrupt+0x3c>)
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a0a      	ldr	r2, [pc, #40]	; (800315c <vPortSetupTimerInterrupt+0x40>)
 8003132:	fba2 2303 	umull	r2, r3, r2, r3
 8003136:	099b      	lsrs	r3, r3, #6
 8003138:	4a09      	ldr	r2, [pc, #36]	; (8003160 <vPortSetupTimerInterrupt+0x44>)
 800313a:	3b01      	subs	r3, #1
 800313c:	6013      	str	r3, [r2, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800313e:	4b04      	ldr	r3, [pc, #16]	; (8003150 <vPortSetupTimerInterrupt+0x34>)
 8003140:	2207      	movs	r2, #7
 8003142:	601a      	str	r2, [r3, #0]
}
 8003144:	bf00      	nop
 8003146:	46bd      	mov	sp, r7
 8003148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314c:	4770      	bx	lr
 800314e:	bf00      	nop
 8003150:	e000e010 	.word	0xe000e010
 8003154:	e000e018 	.word	0xe000e018
 8003158:	20000000 	.word	0x20000000
 800315c:	10624dd3 	.word	0x10624dd3
 8003160:	e000e014 	.word	0xe000e014

08003164 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 8003164:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8003174 <vPortEnableVFP+0x10>
 8003168:	6801      	ldr	r1, [r0, #0]
 800316a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800316e:	6001      	str	r1, [r0, #0]
 8003170:	4770      	bx	lr
 8003172:	0000      	.short	0x0000
 8003174:	e000ed88 	.word	0xe000ed88
        "	orr r1, r1, #( 0xf << 20 )	\n"/* Enable CP10 and CP11 coprocessors, then save back. */
        "	str r1, [r0]				\n"
        "	bx r14						\n"
        "	.ltorg						\n"
    );
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop

0800317c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 800317c:	b580      	push	{r7, lr}
 800317e:	b08a      	sub	sp, #40	; 0x28
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8003184:	2300      	movs	r3, #0
 8003186:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8003188:	f7ff fab6 	bl	80026f8 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 800318c:	4b65      	ldr	r3, [pc, #404]	; (8003324 <pvPortMalloc+0x1a8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d101      	bne.n	8003198 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8003194:	f000 f934 	bl	8003400 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8003198:	4b63      	ldr	r3, [pc, #396]	; (8003328 <pvPortMalloc+0x1ac>)
 800319a:	681a      	ldr	r2, [r3, #0]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4013      	ands	r3, r2
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	f040 80a7 	bne.w	80032f4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d02d      	beq.n	8003208 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 80031ac:	2208      	movs	r2, #8
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	429a      	cmp	r2, r3
 80031b6:	d227      	bcs.n	8003208 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 80031b8:	2208      	movs	r2, #8
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4413      	add	r3, r2
 80031be:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f003 0307 	and.w	r3, r3, #7
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d021      	beq.n	800320e <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f023 0307 	bic.w	r3, r3, #7
 80031d0:	3308      	adds	r3, #8
 80031d2:	687a      	ldr	r2, [r7, #4]
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d214      	bcs.n	8003202 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f023 0307 	bic.w	r3, r3, #7
 80031de:	3308      	adds	r3, #8
 80031e0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	f003 0307 	and.w	r3, r3, #7
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d010      	beq.n	800320e <pvPortMalloc+0x92>
        __asm volatile
 80031ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031f0:	f383 8811 	msr	BASEPRI, r3
 80031f4:	f3bf 8f6f 	isb	sy
 80031f8:	f3bf 8f4f 	dsb	sy
 80031fc:	617b      	str	r3, [r7, #20]
    }
 80031fe:	bf00      	nop
 8003200:	e7fe      	b.n	8003200 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8003202:	2300      	movs	r3, #0
 8003204:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8003206:	e002      	b.n	800320e <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8003208:	2300      	movs	r3, #0
 800320a:	607b      	str	r3, [r7, #4]
 800320c:	e000      	b.n	8003210 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800320e:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d06e      	beq.n	80032f4 <pvPortMalloc+0x178>
 8003216:	4b45      	ldr	r3, [pc, #276]	; (800332c <pvPortMalloc+0x1b0>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	687a      	ldr	r2, [r7, #4]
 800321c:	429a      	cmp	r2, r3
 800321e:	d869      	bhi.n	80032f4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8003220:	4b43      	ldr	r3, [pc, #268]	; (8003330 <pvPortMalloc+0x1b4>)
 8003222:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8003224:	4b42      	ldr	r3, [pc, #264]	; (8003330 <pvPortMalloc+0x1b4>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800322a:	e004      	b.n	8003236 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 800322c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800322e:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	685b      	ldr	r3, [r3, #4]
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	429a      	cmp	r2, r3
 800323e:	d903      	bls.n	8003248 <pvPortMalloc+0xcc>
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d1f1      	bne.n	800322c <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8003248:	4b36      	ldr	r3, [pc, #216]	; (8003324 <pvPortMalloc+0x1a8>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800324e:	429a      	cmp	r2, r3
 8003250:	d050      	beq.n	80032f4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8003252:	6a3b      	ldr	r3, [r7, #32]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2208      	movs	r2, #8
 8003258:	4413      	add	r3, r2
 800325a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	681a      	ldr	r2, [r3, #0]
 8003260:	6a3b      	ldr	r3, [r7, #32]
 8003262:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8003264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003266:	685a      	ldr	r2, [r3, #4]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	1ad2      	subs	r2, r2, r3
 800326c:	2308      	movs	r3, #8
 800326e:	005b      	lsls	r3, r3, #1
 8003270:	429a      	cmp	r2, r3
 8003272:	d91f      	bls.n	80032b4 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8003274:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4413      	add	r3, r2
 800327a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800327c:	69bb      	ldr	r3, [r7, #24]
 800327e:	f003 0307 	and.w	r3, r3, #7
 8003282:	2b00      	cmp	r3, #0
 8003284:	d00a      	beq.n	800329c <pvPortMalloc+0x120>
        __asm volatile
 8003286:	f04f 0350 	mov.w	r3, #80	; 0x50
 800328a:	f383 8811 	msr	BASEPRI, r3
 800328e:	f3bf 8f6f 	isb	sy
 8003292:	f3bf 8f4f 	dsb	sy
 8003296:	613b      	str	r3, [r7, #16]
    }
 8003298:	bf00      	nop
 800329a:	e7fe      	b.n	800329a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800329c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800329e:	685a      	ldr	r2, [r3, #4]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	1ad2      	subs	r2, r2, r3
 80032a4:	69bb      	ldr	r3, [r7, #24]
 80032a6:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	687a      	ldr	r2, [r7, #4]
 80032ac:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 80032ae:	69b8      	ldr	r0, [r7, #24]
 80032b0:	f000 f908 	bl	80034c4 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 80032b4:	4b1d      	ldr	r3, [pc, #116]	; (800332c <pvPortMalloc+0x1b0>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	1ad3      	subs	r3, r2, r3
 80032be:	4a1b      	ldr	r2, [pc, #108]	; (800332c <pvPortMalloc+0x1b0>)
 80032c0:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80032c2:	4b1a      	ldr	r3, [pc, #104]	; (800332c <pvPortMalloc+0x1b0>)
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	4b1b      	ldr	r3, [pc, #108]	; (8003334 <pvPortMalloc+0x1b8>)
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	429a      	cmp	r2, r3
 80032cc:	d203      	bcs.n	80032d6 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80032ce:	4b17      	ldr	r3, [pc, #92]	; (800332c <pvPortMalloc+0x1b0>)
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a18      	ldr	r2, [pc, #96]	; (8003334 <pvPortMalloc+0x1b8>)
 80032d4:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 80032d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	4b13      	ldr	r3, [pc, #76]	; (8003328 <pvPortMalloc+0x1ac>)
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	431a      	orrs	r2, r3
 80032e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 80032e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032e6:	2200      	movs	r2, #0
 80032e8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 80032ea:	4b13      	ldr	r3, [pc, #76]	; (8003338 <pvPortMalloc+0x1bc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	3301      	adds	r3, #1
 80032f0:	4a11      	ldr	r2, [pc, #68]	; (8003338 <pvPortMalloc+0x1bc>)
 80032f2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80032f4:	f7ff fa0e 	bl	8002714 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80032f8:	69fb      	ldr	r3, [r7, #28]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <pvPortMalloc+0x19c>
        __asm volatile
 8003302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003306:	f383 8811 	msr	BASEPRI, r3
 800330a:	f3bf 8f6f 	isb	sy
 800330e:	f3bf 8f4f 	dsb	sy
 8003312:	60fb      	str	r3, [r7, #12]
    }
 8003314:	bf00      	nop
 8003316:	e7fe      	b.n	8003316 <pvPortMalloc+0x19a>
    return pvReturn;
 8003318:	69fb      	ldr	r3, [r7, #28]
}
 800331a:	4618      	mov	r0, r3
 800331c:	3728      	adds	r7, #40	; 0x28
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	20012df4 	.word	0x20012df4
 8003328:	20012e08 	.word	0x20012e08
 800332c:	20012df8 	.word	0x20012df8
 8003330:	20012dec 	.word	0x20012dec
 8003334:	20012dfc 	.word	0x20012dfc
 8003338:	20012e00 	.word	0x20012e00

0800333c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b086      	sub	sp, #24
 8003340:	af00      	add	r7, sp, #0
 8003342:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d04d      	beq.n	80033ea <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 800334e:	2308      	movs	r3, #8
 8003350:	425b      	negs	r3, r3
 8003352:	697a      	ldr	r2, [r7, #20]
 8003354:	4413      	add	r3, r2
 8003356:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	685a      	ldr	r2, [r3, #4]
 8003360:	4b24      	ldr	r3, [pc, #144]	; (80033f4 <vPortFree+0xb8>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4013      	ands	r3, r2
 8003366:	2b00      	cmp	r3, #0
 8003368:	d10a      	bne.n	8003380 <vPortFree+0x44>
        __asm volatile
 800336a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800336e:	f383 8811 	msr	BASEPRI, r3
 8003372:	f3bf 8f6f 	isb	sy
 8003376:	f3bf 8f4f 	dsb	sy
 800337a:	60fb      	str	r3, [r7, #12]
    }
 800337c:	bf00      	nop
 800337e:	e7fe      	b.n	800337e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d00a      	beq.n	800339e <vPortFree+0x62>
        __asm volatile
 8003388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338c:	f383 8811 	msr	BASEPRI, r3
 8003390:	f3bf 8f6f 	isb	sy
 8003394:	f3bf 8f4f 	dsb	sy
 8003398:	60bb      	str	r3, [r7, #8]
    }
 800339a:	bf00      	nop
 800339c:	e7fe      	b.n	800339c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	685a      	ldr	r2, [r3, #4]
 80033a2:	4b14      	ldr	r3, [pc, #80]	; (80033f4 <vPortFree+0xb8>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4013      	ands	r3, r2
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01e      	beq.n	80033ea <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d11a      	bne.n	80033ea <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80033b4:	693b      	ldr	r3, [r7, #16]
 80033b6:	685a      	ldr	r2, [r3, #4]
 80033b8:	4b0e      	ldr	r3, [pc, #56]	; (80033f4 <vPortFree+0xb8>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	43db      	mvns	r3, r3
 80033be:	401a      	ands	r2, r3
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 80033c4:	f7ff f998 	bl	80026f8 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	685a      	ldr	r2, [r3, #4]
 80033cc:	4b0a      	ldr	r3, [pc, #40]	; (80033f8 <vPortFree+0xbc>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4413      	add	r3, r2
 80033d2:	4a09      	ldr	r2, [pc, #36]	; (80033f8 <vPortFree+0xbc>)
 80033d4:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80033d6:	6938      	ldr	r0, [r7, #16]
 80033d8:	f000 f874 	bl	80034c4 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 80033dc:	4b07      	ldr	r3, [pc, #28]	; (80033fc <vPortFree+0xc0>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	3301      	adds	r3, #1
 80033e2:	4a06      	ldr	r2, [pc, #24]	; (80033fc <vPortFree+0xc0>)
 80033e4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 80033e6:	f7ff f995 	bl	8002714 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 80033ea:	bf00      	nop
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	20012e08 	.word	0x20012e08
 80033f8:	20012df8 	.word	0x20012df8
 80033fc:	20012e04 	.word	0x20012e04

08003400 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8003400:	b480      	push	{r7}
 8003402:	b085      	sub	sp, #20
 8003404:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8003406:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 800340a:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 800340c:	4b27      	ldr	r3, [pc, #156]	; (80034ac <prvHeapInit+0xac>)
 800340e:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	f003 0307 	and.w	r3, r3, #7
 8003416:	2b00      	cmp	r3, #0
 8003418:	d00c      	beq.n	8003434 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	3307      	adds	r3, #7
 800341e:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0307 	bic.w	r3, r3, #7
 8003426:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8003428:	68ba      	ldr	r2, [r7, #8]
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	4a1f      	ldr	r2, [pc, #124]	; (80034ac <prvHeapInit+0xac>)
 8003430:	4413      	add	r3, r2
 8003432:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8003438:	4a1d      	ldr	r2, [pc, #116]	; (80034b0 <prvHeapInit+0xb0>)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 800343e:	4b1c      	ldr	r3, [pc, #112]	; (80034b0 <prvHeapInit+0xb0>)
 8003440:	2200      	movs	r2, #0
 8003442:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	68ba      	ldr	r2, [r7, #8]
 8003448:	4413      	add	r3, r2
 800344a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 800344c:	2208      	movs	r2, #8
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1a9b      	subs	r3, r3, r2
 8003452:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f023 0307 	bic.w	r3, r3, #7
 800345a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4a15      	ldr	r2, [pc, #84]	; (80034b4 <prvHeapInit+0xb4>)
 8003460:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8003462:	4b14      	ldr	r3, [pc, #80]	; (80034b4 <prvHeapInit+0xb4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	2200      	movs	r2, #0
 8003468:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 800346a:	4b12      	ldr	r3, [pc, #72]	; (80034b4 <prvHeapInit+0xb4>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	2200      	movs	r2, #0
 8003470:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	1ad2      	subs	r2, r2, r3
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <prvHeapInit+0xb4>)
 8003482:	681a      	ldr	r2, [r3, #0]
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	4a0a      	ldr	r2, [pc, #40]	; (80034b8 <prvHeapInit+0xb8>)
 800348e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	685b      	ldr	r3, [r3, #4]
 8003494:	4a09      	ldr	r2, [pc, #36]	; (80034bc <prvHeapInit+0xbc>)
 8003496:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8003498:	4b09      	ldr	r3, [pc, #36]	; (80034c0 <prvHeapInit+0xc0>)
 800349a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800349e:	601a      	str	r2, [r3, #0]
}
 80034a0:	bf00      	nop
 80034a2:	3714      	adds	r7, #20
 80034a4:	46bd      	mov	sp, r7
 80034a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034aa:	4770      	bx	lr
 80034ac:	200001ec 	.word	0x200001ec
 80034b0:	20012dec 	.word	0x20012dec
 80034b4:	20012df4 	.word	0x20012df4
 80034b8:	20012dfc 	.word	0x20012dfc
 80034bc:	20012df8 	.word	0x20012df8
 80034c0:	20012e08 	.word	0x20012e08

080034c4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80034c4:	b480      	push	{r7}
 80034c6:	b085      	sub	sp, #20
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80034cc:	4b28      	ldr	r3, [pc, #160]	; (8003570 <prvInsertBlockIntoFreeList+0xac>)
 80034ce:	60fb      	str	r3, [r7, #12]
 80034d0:	e002      	b.n	80034d8 <prvInsertBlockIntoFreeList+0x14>
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	60fb      	str	r3, [r7, #12]
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	687a      	ldr	r2, [r7, #4]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d8f7      	bhi.n	80034d2 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	685b      	ldr	r3, [r3, #4]
 80034ea:	68ba      	ldr	r2, [r7, #8]
 80034ec:	4413      	add	r3, r2
 80034ee:	687a      	ldr	r2, [r7, #4]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d108      	bne.n	8003506 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	441a      	add	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	441a      	add	r2, r3
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d118      	bne.n	800354c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	4b15      	ldr	r3, [pc, #84]	; (8003574 <prvInsertBlockIntoFreeList+0xb0>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d00d      	beq.n	8003542 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	685a      	ldr	r2, [r3, #4]
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	685b      	ldr	r3, [r3, #4]
 8003530:	441a      	add	r2, r3
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	681a      	ldr	r2, [r3, #0]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	e008      	b.n	8003554 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003542:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <prvInsertBlockIntoFreeList+0xb0>)
 8003544:	681a      	ldr	r2, [r3, #0]
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	601a      	str	r2, [r3, #0]
 800354a:	e003      	b.n	8003554 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681a      	ldr	r2, [r3, #0]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003554:	68fa      	ldr	r2, [r7, #12]
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	429a      	cmp	r2, r3
 800355a:	d002      	beq.n	8003562 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003562:	bf00      	nop
 8003564:	3714      	adds	r7, #20
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
 800356e:	bf00      	nop
 8003570:	20012dec 	.word	0x20012dec
 8003574:	20012df4 	.word	0x20012df4

08003578 <__libc_init_array>:
 8003578:	b570      	push	{r4, r5, r6, lr}
 800357a:	4d0d      	ldr	r5, [pc, #52]	; (80035b0 <__libc_init_array+0x38>)
 800357c:	4c0d      	ldr	r4, [pc, #52]	; (80035b4 <__libc_init_array+0x3c>)
 800357e:	1b64      	subs	r4, r4, r5
 8003580:	10a4      	asrs	r4, r4, #2
 8003582:	2600      	movs	r6, #0
 8003584:	42a6      	cmp	r6, r4
 8003586:	d109      	bne.n	800359c <__libc_init_array+0x24>
 8003588:	4d0b      	ldr	r5, [pc, #44]	; (80035b8 <__libc_init_array+0x40>)
 800358a:	4c0c      	ldr	r4, [pc, #48]	; (80035bc <__libc_init_array+0x44>)
 800358c:	f000 ffbc 	bl	8004508 <_init>
 8003590:	1b64      	subs	r4, r4, r5
 8003592:	10a4      	asrs	r4, r4, #2
 8003594:	2600      	movs	r6, #0
 8003596:	42a6      	cmp	r6, r4
 8003598:	d105      	bne.n	80035a6 <__libc_init_array+0x2e>
 800359a:	bd70      	pop	{r4, r5, r6, pc}
 800359c:	f855 3b04 	ldr.w	r3, [r5], #4
 80035a0:	4798      	blx	r3
 80035a2:	3601      	adds	r6, #1
 80035a4:	e7ee      	b.n	8003584 <__libc_init_array+0xc>
 80035a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80035aa:	4798      	blx	r3
 80035ac:	3601      	adds	r6, #1
 80035ae:	e7f2      	b.n	8003596 <__libc_init_array+0x1e>
 80035b0:	0800462c 	.word	0x0800462c
 80035b4:	0800462c 	.word	0x0800462c
 80035b8:	0800462c 	.word	0x0800462c
 80035bc:	08004630 	.word	0x08004630

080035c0 <memset>:
 80035c0:	4402      	add	r2, r0
 80035c2:	4603      	mov	r3, r0
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d100      	bne.n	80035ca <memset+0xa>
 80035c8:	4770      	bx	lr
 80035ca:	f803 1b01 	strb.w	r1, [r3], #1
 80035ce:	e7f9      	b.n	80035c4 <memset+0x4>

080035d0 <iprintf>:
 80035d0:	b40f      	push	{r0, r1, r2, r3}
 80035d2:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <iprintf+0x2c>)
 80035d4:	b513      	push	{r0, r1, r4, lr}
 80035d6:	681c      	ldr	r4, [r3, #0]
 80035d8:	b124      	cbz	r4, 80035e4 <iprintf+0x14>
 80035da:	69a3      	ldr	r3, [r4, #24]
 80035dc:	b913      	cbnz	r3, 80035e4 <iprintf+0x14>
 80035de:	4620      	mov	r0, r4
 80035e0:	f000 f866 	bl	80036b0 <__sinit>
 80035e4:	ab05      	add	r3, sp, #20
 80035e6:	9a04      	ldr	r2, [sp, #16]
 80035e8:	68a1      	ldr	r1, [r4, #8]
 80035ea:	9301      	str	r3, [sp, #4]
 80035ec:	4620      	mov	r0, r4
 80035ee:	f000 f9bd 	bl	800396c <_vfiprintf_r>
 80035f2:	b002      	add	sp, #8
 80035f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80035f8:	b004      	add	sp, #16
 80035fa:	4770      	bx	lr
 80035fc:	20000014 	.word	0x20000014

08003600 <std>:
 8003600:	2300      	movs	r3, #0
 8003602:	b510      	push	{r4, lr}
 8003604:	4604      	mov	r4, r0
 8003606:	e9c0 3300 	strd	r3, r3, [r0]
 800360a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800360e:	6083      	str	r3, [r0, #8]
 8003610:	8181      	strh	r1, [r0, #12]
 8003612:	6643      	str	r3, [r0, #100]	; 0x64
 8003614:	81c2      	strh	r2, [r0, #14]
 8003616:	6183      	str	r3, [r0, #24]
 8003618:	4619      	mov	r1, r3
 800361a:	2208      	movs	r2, #8
 800361c:	305c      	adds	r0, #92	; 0x5c
 800361e:	f7ff ffcf 	bl	80035c0 <memset>
 8003622:	4b05      	ldr	r3, [pc, #20]	; (8003638 <std+0x38>)
 8003624:	6263      	str	r3, [r4, #36]	; 0x24
 8003626:	4b05      	ldr	r3, [pc, #20]	; (800363c <std+0x3c>)
 8003628:	62a3      	str	r3, [r4, #40]	; 0x28
 800362a:	4b05      	ldr	r3, [pc, #20]	; (8003640 <std+0x40>)
 800362c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800362e:	4b05      	ldr	r3, [pc, #20]	; (8003644 <std+0x44>)
 8003630:	6224      	str	r4, [r4, #32]
 8003632:	6323      	str	r3, [r4, #48]	; 0x30
 8003634:	bd10      	pop	{r4, pc}
 8003636:	bf00      	nop
 8003638:	08003f15 	.word	0x08003f15
 800363c:	08003f37 	.word	0x08003f37
 8003640:	08003f6f 	.word	0x08003f6f
 8003644:	08003f93 	.word	0x08003f93

08003648 <_cleanup_r>:
 8003648:	4901      	ldr	r1, [pc, #4]	; (8003650 <_cleanup_r+0x8>)
 800364a:	f000 b8af 	b.w	80037ac <_fwalk_reent>
 800364e:	bf00      	nop
 8003650:	0800426d 	.word	0x0800426d

08003654 <__sfmoreglue>:
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	2268      	movs	r2, #104	; 0x68
 8003658:	1e4d      	subs	r5, r1, #1
 800365a:	4355      	muls	r5, r2
 800365c:	460e      	mov	r6, r1
 800365e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003662:	f000 f8e5 	bl	8003830 <_malloc_r>
 8003666:	4604      	mov	r4, r0
 8003668:	b140      	cbz	r0, 800367c <__sfmoreglue+0x28>
 800366a:	2100      	movs	r1, #0
 800366c:	e9c0 1600 	strd	r1, r6, [r0]
 8003670:	300c      	adds	r0, #12
 8003672:	60a0      	str	r0, [r4, #8]
 8003674:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003678:	f7ff ffa2 	bl	80035c0 <memset>
 800367c:	4620      	mov	r0, r4
 800367e:	bd70      	pop	{r4, r5, r6, pc}

08003680 <__sfp_lock_acquire>:
 8003680:	4801      	ldr	r0, [pc, #4]	; (8003688 <__sfp_lock_acquire+0x8>)
 8003682:	f000 b8b3 	b.w	80037ec <__retarget_lock_acquire_recursive>
 8003686:	bf00      	nop
 8003688:	20012e0d 	.word	0x20012e0d

0800368c <__sfp_lock_release>:
 800368c:	4801      	ldr	r0, [pc, #4]	; (8003694 <__sfp_lock_release+0x8>)
 800368e:	f000 b8ae 	b.w	80037ee <__retarget_lock_release_recursive>
 8003692:	bf00      	nop
 8003694:	20012e0d 	.word	0x20012e0d

08003698 <__sinit_lock_acquire>:
 8003698:	4801      	ldr	r0, [pc, #4]	; (80036a0 <__sinit_lock_acquire+0x8>)
 800369a:	f000 b8a7 	b.w	80037ec <__retarget_lock_acquire_recursive>
 800369e:	bf00      	nop
 80036a0:	20012e0e 	.word	0x20012e0e

080036a4 <__sinit_lock_release>:
 80036a4:	4801      	ldr	r0, [pc, #4]	; (80036ac <__sinit_lock_release+0x8>)
 80036a6:	f000 b8a2 	b.w	80037ee <__retarget_lock_release_recursive>
 80036aa:	bf00      	nop
 80036ac:	20012e0e 	.word	0x20012e0e

080036b0 <__sinit>:
 80036b0:	b510      	push	{r4, lr}
 80036b2:	4604      	mov	r4, r0
 80036b4:	f7ff fff0 	bl	8003698 <__sinit_lock_acquire>
 80036b8:	69a3      	ldr	r3, [r4, #24]
 80036ba:	b11b      	cbz	r3, 80036c4 <__sinit+0x14>
 80036bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036c0:	f7ff bff0 	b.w	80036a4 <__sinit_lock_release>
 80036c4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80036c8:	6523      	str	r3, [r4, #80]	; 0x50
 80036ca:	4b13      	ldr	r3, [pc, #76]	; (8003718 <__sinit+0x68>)
 80036cc:	4a13      	ldr	r2, [pc, #76]	; (800371c <__sinit+0x6c>)
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	62a2      	str	r2, [r4, #40]	; 0x28
 80036d2:	42a3      	cmp	r3, r4
 80036d4:	bf04      	itt	eq
 80036d6:	2301      	moveq	r3, #1
 80036d8:	61a3      	streq	r3, [r4, #24]
 80036da:	4620      	mov	r0, r4
 80036dc:	f000 f820 	bl	8003720 <__sfp>
 80036e0:	6060      	str	r0, [r4, #4]
 80036e2:	4620      	mov	r0, r4
 80036e4:	f000 f81c 	bl	8003720 <__sfp>
 80036e8:	60a0      	str	r0, [r4, #8]
 80036ea:	4620      	mov	r0, r4
 80036ec:	f000 f818 	bl	8003720 <__sfp>
 80036f0:	2200      	movs	r2, #0
 80036f2:	60e0      	str	r0, [r4, #12]
 80036f4:	2104      	movs	r1, #4
 80036f6:	6860      	ldr	r0, [r4, #4]
 80036f8:	f7ff ff82 	bl	8003600 <std>
 80036fc:	68a0      	ldr	r0, [r4, #8]
 80036fe:	2201      	movs	r2, #1
 8003700:	2109      	movs	r1, #9
 8003702:	f7ff ff7d 	bl	8003600 <std>
 8003706:	68e0      	ldr	r0, [r4, #12]
 8003708:	2202      	movs	r2, #2
 800370a:	2112      	movs	r1, #18
 800370c:	f7ff ff78 	bl	8003600 <std>
 8003710:	2301      	movs	r3, #1
 8003712:	61a3      	str	r3, [r4, #24]
 8003714:	e7d2      	b.n	80036bc <__sinit+0xc>
 8003716:	bf00      	nop
 8003718:	0800458c 	.word	0x0800458c
 800371c:	08003649 	.word	0x08003649

08003720 <__sfp>:
 8003720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003722:	4607      	mov	r7, r0
 8003724:	f7ff ffac 	bl	8003680 <__sfp_lock_acquire>
 8003728:	4b1e      	ldr	r3, [pc, #120]	; (80037a4 <__sfp+0x84>)
 800372a:	681e      	ldr	r6, [r3, #0]
 800372c:	69b3      	ldr	r3, [r6, #24]
 800372e:	b913      	cbnz	r3, 8003736 <__sfp+0x16>
 8003730:	4630      	mov	r0, r6
 8003732:	f7ff ffbd 	bl	80036b0 <__sinit>
 8003736:	3648      	adds	r6, #72	; 0x48
 8003738:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800373c:	3b01      	subs	r3, #1
 800373e:	d503      	bpl.n	8003748 <__sfp+0x28>
 8003740:	6833      	ldr	r3, [r6, #0]
 8003742:	b30b      	cbz	r3, 8003788 <__sfp+0x68>
 8003744:	6836      	ldr	r6, [r6, #0]
 8003746:	e7f7      	b.n	8003738 <__sfp+0x18>
 8003748:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800374c:	b9d5      	cbnz	r5, 8003784 <__sfp+0x64>
 800374e:	4b16      	ldr	r3, [pc, #88]	; (80037a8 <__sfp+0x88>)
 8003750:	60e3      	str	r3, [r4, #12]
 8003752:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003756:	6665      	str	r5, [r4, #100]	; 0x64
 8003758:	f000 f847 	bl	80037ea <__retarget_lock_init_recursive>
 800375c:	f7ff ff96 	bl	800368c <__sfp_lock_release>
 8003760:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003764:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003768:	6025      	str	r5, [r4, #0]
 800376a:	61a5      	str	r5, [r4, #24]
 800376c:	2208      	movs	r2, #8
 800376e:	4629      	mov	r1, r5
 8003770:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003774:	f7ff ff24 	bl	80035c0 <memset>
 8003778:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800377c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003780:	4620      	mov	r0, r4
 8003782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003784:	3468      	adds	r4, #104	; 0x68
 8003786:	e7d9      	b.n	800373c <__sfp+0x1c>
 8003788:	2104      	movs	r1, #4
 800378a:	4638      	mov	r0, r7
 800378c:	f7ff ff62 	bl	8003654 <__sfmoreglue>
 8003790:	4604      	mov	r4, r0
 8003792:	6030      	str	r0, [r6, #0]
 8003794:	2800      	cmp	r0, #0
 8003796:	d1d5      	bne.n	8003744 <__sfp+0x24>
 8003798:	f7ff ff78 	bl	800368c <__sfp_lock_release>
 800379c:	230c      	movs	r3, #12
 800379e:	603b      	str	r3, [r7, #0]
 80037a0:	e7ee      	b.n	8003780 <__sfp+0x60>
 80037a2:	bf00      	nop
 80037a4:	0800458c 	.word	0x0800458c
 80037a8:	ffff0001 	.word	0xffff0001

080037ac <_fwalk_reent>:
 80037ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80037b0:	4606      	mov	r6, r0
 80037b2:	4688      	mov	r8, r1
 80037b4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80037b8:	2700      	movs	r7, #0
 80037ba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80037be:	f1b9 0901 	subs.w	r9, r9, #1
 80037c2:	d505      	bpl.n	80037d0 <_fwalk_reent+0x24>
 80037c4:	6824      	ldr	r4, [r4, #0]
 80037c6:	2c00      	cmp	r4, #0
 80037c8:	d1f7      	bne.n	80037ba <_fwalk_reent+0xe>
 80037ca:	4638      	mov	r0, r7
 80037cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037d0:	89ab      	ldrh	r3, [r5, #12]
 80037d2:	2b01      	cmp	r3, #1
 80037d4:	d907      	bls.n	80037e6 <_fwalk_reent+0x3a>
 80037d6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037da:	3301      	adds	r3, #1
 80037dc:	d003      	beq.n	80037e6 <_fwalk_reent+0x3a>
 80037de:	4629      	mov	r1, r5
 80037e0:	4630      	mov	r0, r6
 80037e2:	47c0      	blx	r8
 80037e4:	4307      	orrs	r7, r0
 80037e6:	3568      	adds	r5, #104	; 0x68
 80037e8:	e7e9      	b.n	80037be <_fwalk_reent+0x12>

080037ea <__retarget_lock_init_recursive>:
 80037ea:	4770      	bx	lr

080037ec <__retarget_lock_acquire_recursive>:
 80037ec:	4770      	bx	lr

080037ee <__retarget_lock_release_recursive>:
 80037ee:	4770      	bx	lr

080037f0 <sbrk_aligned>:
 80037f0:	b570      	push	{r4, r5, r6, lr}
 80037f2:	4e0e      	ldr	r6, [pc, #56]	; (800382c <sbrk_aligned+0x3c>)
 80037f4:	460c      	mov	r4, r1
 80037f6:	6831      	ldr	r1, [r6, #0]
 80037f8:	4605      	mov	r5, r0
 80037fa:	b911      	cbnz	r1, 8003802 <sbrk_aligned+0x12>
 80037fc:	f000 fb7a 	bl	8003ef4 <_sbrk_r>
 8003800:	6030      	str	r0, [r6, #0]
 8003802:	4621      	mov	r1, r4
 8003804:	4628      	mov	r0, r5
 8003806:	f000 fb75 	bl	8003ef4 <_sbrk_r>
 800380a:	1c43      	adds	r3, r0, #1
 800380c:	d00a      	beq.n	8003824 <sbrk_aligned+0x34>
 800380e:	1cc4      	adds	r4, r0, #3
 8003810:	f024 0403 	bic.w	r4, r4, #3
 8003814:	42a0      	cmp	r0, r4
 8003816:	d007      	beq.n	8003828 <sbrk_aligned+0x38>
 8003818:	1a21      	subs	r1, r4, r0
 800381a:	4628      	mov	r0, r5
 800381c:	f000 fb6a 	bl	8003ef4 <_sbrk_r>
 8003820:	3001      	adds	r0, #1
 8003822:	d101      	bne.n	8003828 <sbrk_aligned+0x38>
 8003824:	f04f 34ff 	mov.w	r4, #4294967295
 8003828:	4620      	mov	r0, r4
 800382a:	bd70      	pop	{r4, r5, r6, pc}
 800382c:	20012e14 	.word	0x20012e14

08003830 <_malloc_r>:
 8003830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003834:	1ccd      	adds	r5, r1, #3
 8003836:	f025 0503 	bic.w	r5, r5, #3
 800383a:	3508      	adds	r5, #8
 800383c:	2d0c      	cmp	r5, #12
 800383e:	bf38      	it	cc
 8003840:	250c      	movcc	r5, #12
 8003842:	2d00      	cmp	r5, #0
 8003844:	4607      	mov	r7, r0
 8003846:	db01      	blt.n	800384c <_malloc_r+0x1c>
 8003848:	42a9      	cmp	r1, r5
 800384a:	d905      	bls.n	8003858 <_malloc_r+0x28>
 800384c:	230c      	movs	r3, #12
 800384e:	603b      	str	r3, [r7, #0]
 8003850:	2600      	movs	r6, #0
 8003852:	4630      	mov	r0, r6
 8003854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003858:	4e2e      	ldr	r6, [pc, #184]	; (8003914 <_malloc_r+0xe4>)
 800385a:	f000 fdbb 	bl	80043d4 <__malloc_lock>
 800385e:	6833      	ldr	r3, [r6, #0]
 8003860:	461c      	mov	r4, r3
 8003862:	bb34      	cbnz	r4, 80038b2 <_malloc_r+0x82>
 8003864:	4629      	mov	r1, r5
 8003866:	4638      	mov	r0, r7
 8003868:	f7ff ffc2 	bl	80037f0 <sbrk_aligned>
 800386c:	1c43      	adds	r3, r0, #1
 800386e:	4604      	mov	r4, r0
 8003870:	d14d      	bne.n	800390e <_malloc_r+0xde>
 8003872:	6834      	ldr	r4, [r6, #0]
 8003874:	4626      	mov	r6, r4
 8003876:	2e00      	cmp	r6, #0
 8003878:	d140      	bne.n	80038fc <_malloc_r+0xcc>
 800387a:	6823      	ldr	r3, [r4, #0]
 800387c:	4631      	mov	r1, r6
 800387e:	4638      	mov	r0, r7
 8003880:	eb04 0803 	add.w	r8, r4, r3
 8003884:	f000 fb36 	bl	8003ef4 <_sbrk_r>
 8003888:	4580      	cmp	r8, r0
 800388a:	d13a      	bne.n	8003902 <_malloc_r+0xd2>
 800388c:	6821      	ldr	r1, [r4, #0]
 800388e:	3503      	adds	r5, #3
 8003890:	1a6d      	subs	r5, r5, r1
 8003892:	f025 0503 	bic.w	r5, r5, #3
 8003896:	3508      	adds	r5, #8
 8003898:	2d0c      	cmp	r5, #12
 800389a:	bf38      	it	cc
 800389c:	250c      	movcc	r5, #12
 800389e:	4629      	mov	r1, r5
 80038a0:	4638      	mov	r0, r7
 80038a2:	f7ff ffa5 	bl	80037f0 <sbrk_aligned>
 80038a6:	3001      	adds	r0, #1
 80038a8:	d02b      	beq.n	8003902 <_malloc_r+0xd2>
 80038aa:	6823      	ldr	r3, [r4, #0]
 80038ac:	442b      	add	r3, r5
 80038ae:	6023      	str	r3, [r4, #0]
 80038b0:	e00e      	b.n	80038d0 <_malloc_r+0xa0>
 80038b2:	6822      	ldr	r2, [r4, #0]
 80038b4:	1b52      	subs	r2, r2, r5
 80038b6:	d41e      	bmi.n	80038f6 <_malloc_r+0xc6>
 80038b8:	2a0b      	cmp	r2, #11
 80038ba:	d916      	bls.n	80038ea <_malloc_r+0xba>
 80038bc:	1961      	adds	r1, r4, r5
 80038be:	42a3      	cmp	r3, r4
 80038c0:	6025      	str	r5, [r4, #0]
 80038c2:	bf18      	it	ne
 80038c4:	6059      	strne	r1, [r3, #4]
 80038c6:	6863      	ldr	r3, [r4, #4]
 80038c8:	bf08      	it	eq
 80038ca:	6031      	streq	r1, [r6, #0]
 80038cc:	5162      	str	r2, [r4, r5]
 80038ce:	604b      	str	r3, [r1, #4]
 80038d0:	4638      	mov	r0, r7
 80038d2:	f104 060b 	add.w	r6, r4, #11
 80038d6:	f000 fd83 	bl	80043e0 <__malloc_unlock>
 80038da:	f026 0607 	bic.w	r6, r6, #7
 80038de:	1d23      	adds	r3, r4, #4
 80038e0:	1af2      	subs	r2, r6, r3
 80038e2:	d0b6      	beq.n	8003852 <_malloc_r+0x22>
 80038e4:	1b9b      	subs	r3, r3, r6
 80038e6:	50a3      	str	r3, [r4, r2]
 80038e8:	e7b3      	b.n	8003852 <_malloc_r+0x22>
 80038ea:	6862      	ldr	r2, [r4, #4]
 80038ec:	42a3      	cmp	r3, r4
 80038ee:	bf0c      	ite	eq
 80038f0:	6032      	streq	r2, [r6, #0]
 80038f2:	605a      	strne	r2, [r3, #4]
 80038f4:	e7ec      	b.n	80038d0 <_malloc_r+0xa0>
 80038f6:	4623      	mov	r3, r4
 80038f8:	6864      	ldr	r4, [r4, #4]
 80038fa:	e7b2      	b.n	8003862 <_malloc_r+0x32>
 80038fc:	4634      	mov	r4, r6
 80038fe:	6876      	ldr	r6, [r6, #4]
 8003900:	e7b9      	b.n	8003876 <_malloc_r+0x46>
 8003902:	230c      	movs	r3, #12
 8003904:	603b      	str	r3, [r7, #0]
 8003906:	4638      	mov	r0, r7
 8003908:	f000 fd6a 	bl	80043e0 <__malloc_unlock>
 800390c:	e7a1      	b.n	8003852 <_malloc_r+0x22>
 800390e:	6025      	str	r5, [r4, #0]
 8003910:	e7de      	b.n	80038d0 <_malloc_r+0xa0>
 8003912:	bf00      	nop
 8003914:	20012e10 	.word	0x20012e10

08003918 <__sfputc_r>:
 8003918:	6893      	ldr	r3, [r2, #8]
 800391a:	3b01      	subs	r3, #1
 800391c:	2b00      	cmp	r3, #0
 800391e:	b410      	push	{r4}
 8003920:	6093      	str	r3, [r2, #8]
 8003922:	da08      	bge.n	8003936 <__sfputc_r+0x1e>
 8003924:	6994      	ldr	r4, [r2, #24]
 8003926:	42a3      	cmp	r3, r4
 8003928:	db01      	blt.n	800392e <__sfputc_r+0x16>
 800392a:	290a      	cmp	r1, #10
 800392c:	d103      	bne.n	8003936 <__sfputc_r+0x1e>
 800392e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003932:	f000 bb33 	b.w	8003f9c <__swbuf_r>
 8003936:	6813      	ldr	r3, [r2, #0]
 8003938:	1c58      	adds	r0, r3, #1
 800393a:	6010      	str	r0, [r2, #0]
 800393c:	7019      	strb	r1, [r3, #0]
 800393e:	4608      	mov	r0, r1
 8003940:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003944:	4770      	bx	lr

08003946 <__sfputs_r>:
 8003946:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003948:	4606      	mov	r6, r0
 800394a:	460f      	mov	r7, r1
 800394c:	4614      	mov	r4, r2
 800394e:	18d5      	adds	r5, r2, r3
 8003950:	42ac      	cmp	r4, r5
 8003952:	d101      	bne.n	8003958 <__sfputs_r+0x12>
 8003954:	2000      	movs	r0, #0
 8003956:	e007      	b.n	8003968 <__sfputs_r+0x22>
 8003958:	f814 1b01 	ldrb.w	r1, [r4], #1
 800395c:	463a      	mov	r2, r7
 800395e:	4630      	mov	r0, r6
 8003960:	f7ff ffda 	bl	8003918 <__sfputc_r>
 8003964:	1c43      	adds	r3, r0, #1
 8003966:	d1f3      	bne.n	8003950 <__sfputs_r+0xa>
 8003968:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800396c <_vfiprintf_r>:
 800396c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003970:	460d      	mov	r5, r1
 8003972:	b09d      	sub	sp, #116	; 0x74
 8003974:	4614      	mov	r4, r2
 8003976:	4698      	mov	r8, r3
 8003978:	4606      	mov	r6, r0
 800397a:	b118      	cbz	r0, 8003984 <_vfiprintf_r+0x18>
 800397c:	6983      	ldr	r3, [r0, #24]
 800397e:	b90b      	cbnz	r3, 8003984 <_vfiprintf_r+0x18>
 8003980:	f7ff fe96 	bl	80036b0 <__sinit>
 8003984:	4b89      	ldr	r3, [pc, #548]	; (8003bac <_vfiprintf_r+0x240>)
 8003986:	429d      	cmp	r5, r3
 8003988:	d11b      	bne.n	80039c2 <_vfiprintf_r+0x56>
 800398a:	6875      	ldr	r5, [r6, #4]
 800398c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800398e:	07d9      	lsls	r1, r3, #31
 8003990:	d405      	bmi.n	800399e <_vfiprintf_r+0x32>
 8003992:	89ab      	ldrh	r3, [r5, #12]
 8003994:	059a      	lsls	r2, r3, #22
 8003996:	d402      	bmi.n	800399e <_vfiprintf_r+0x32>
 8003998:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800399a:	f7ff ff27 	bl	80037ec <__retarget_lock_acquire_recursive>
 800399e:	89ab      	ldrh	r3, [r5, #12]
 80039a0:	071b      	lsls	r3, r3, #28
 80039a2:	d501      	bpl.n	80039a8 <_vfiprintf_r+0x3c>
 80039a4:	692b      	ldr	r3, [r5, #16]
 80039a6:	b9eb      	cbnz	r3, 80039e4 <_vfiprintf_r+0x78>
 80039a8:	4629      	mov	r1, r5
 80039aa:	4630      	mov	r0, r6
 80039ac:	f000 fb5a 	bl	8004064 <__swsetup_r>
 80039b0:	b1c0      	cbz	r0, 80039e4 <_vfiprintf_r+0x78>
 80039b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80039b4:	07dc      	lsls	r4, r3, #31
 80039b6:	d50e      	bpl.n	80039d6 <_vfiprintf_r+0x6a>
 80039b8:	f04f 30ff 	mov.w	r0, #4294967295
 80039bc:	b01d      	add	sp, #116	; 0x74
 80039be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039c2:	4b7b      	ldr	r3, [pc, #492]	; (8003bb0 <_vfiprintf_r+0x244>)
 80039c4:	429d      	cmp	r5, r3
 80039c6:	d101      	bne.n	80039cc <_vfiprintf_r+0x60>
 80039c8:	68b5      	ldr	r5, [r6, #8]
 80039ca:	e7df      	b.n	800398c <_vfiprintf_r+0x20>
 80039cc:	4b79      	ldr	r3, [pc, #484]	; (8003bb4 <_vfiprintf_r+0x248>)
 80039ce:	429d      	cmp	r5, r3
 80039d0:	bf08      	it	eq
 80039d2:	68f5      	ldreq	r5, [r6, #12]
 80039d4:	e7da      	b.n	800398c <_vfiprintf_r+0x20>
 80039d6:	89ab      	ldrh	r3, [r5, #12]
 80039d8:	0598      	lsls	r0, r3, #22
 80039da:	d4ed      	bmi.n	80039b8 <_vfiprintf_r+0x4c>
 80039dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80039de:	f7ff ff06 	bl	80037ee <__retarget_lock_release_recursive>
 80039e2:	e7e9      	b.n	80039b8 <_vfiprintf_r+0x4c>
 80039e4:	2300      	movs	r3, #0
 80039e6:	9309      	str	r3, [sp, #36]	; 0x24
 80039e8:	2320      	movs	r3, #32
 80039ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80039ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80039f2:	2330      	movs	r3, #48	; 0x30
 80039f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8003bb8 <_vfiprintf_r+0x24c>
 80039f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80039fc:	f04f 0901 	mov.w	r9, #1
 8003a00:	4623      	mov	r3, r4
 8003a02:	469a      	mov	sl, r3
 8003a04:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003a08:	b10a      	cbz	r2, 8003a0e <_vfiprintf_r+0xa2>
 8003a0a:	2a25      	cmp	r2, #37	; 0x25
 8003a0c:	d1f9      	bne.n	8003a02 <_vfiprintf_r+0x96>
 8003a0e:	ebba 0b04 	subs.w	fp, sl, r4
 8003a12:	d00b      	beq.n	8003a2c <_vfiprintf_r+0xc0>
 8003a14:	465b      	mov	r3, fp
 8003a16:	4622      	mov	r2, r4
 8003a18:	4629      	mov	r1, r5
 8003a1a:	4630      	mov	r0, r6
 8003a1c:	f7ff ff93 	bl	8003946 <__sfputs_r>
 8003a20:	3001      	adds	r0, #1
 8003a22:	f000 80aa 	beq.w	8003b7a <_vfiprintf_r+0x20e>
 8003a26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003a28:	445a      	add	r2, fp
 8003a2a:	9209      	str	r2, [sp, #36]	; 0x24
 8003a2c:	f89a 3000 	ldrb.w	r3, [sl]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80a2 	beq.w	8003b7a <_vfiprintf_r+0x20e>
 8003a36:	2300      	movs	r3, #0
 8003a38:	f04f 32ff 	mov.w	r2, #4294967295
 8003a3c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003a40:	f10a 0a01 	add.w	sl, sl, #1
 8003a44:	9304      	str	r3, [sp, #16]
 8003a46:	9307      	str	r3, [sp, #28]
 8003a48:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003a4c:	931a      	str	r3, [sp, #104]	; 0x68
 8003a4e:	4654      	mov	r4, sl
 8003a50:	2205      	movs	r2, #5
 8003a52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003a56:	4858      	ldr	r0, [pc, #352]	; (8003bb8 <_vfiprintf_r+0x24c>)
 8003a58:	f7fc fbda 	bl	8000210 <memchr>
 8003a5c:	9a04      	ldr	r2, [sp, #16]
 8003a5e:	b9d8      	cbnz	r0, 8003a98 <_vfiprintf_r+0x12c>
 8003a60:	06d1      	lsls	r1, r2, #27
 8003a62:	bf44      	itt	mi
 8003a64:	2320      	movmi	r3, #32
 8003a66:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a6a:	0713      	lsls	r3, r2, #28
 8003a6c:	bf44      	itt	mi
 8003a6e:	232b      	movmi	r3, #43	; 0x2b
 8003a70:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8003a74:	f89a 3000 	ldrb.w	r3, [sl]
 8003a78:	2b2a      	cmp	r3, #42	; 0x2a
 8003a7a:	d015      	beq.n	8003aa8 <_vfiprintf_r+0x13c>
 8003a7c:	9a07      	ldr	r2, [sp, #28]
 8003a7e:	4654      	mov	r4, sl
 8003a80:	2000      	movs	r0, #0
 8003a82:	f04f 0c0a 	mov.w	ip, #10
 8003a86:	4621      	mov	r1, r4
 8003a88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003a8c:	3b30      	subs	r3, #48	; 0x30
 8003a8e:	2b09      	cmp	r3, #9
 8003a90:	d94e      	bls.n	8003b30 <_vfiprintf_r+0x1c4>
 8003a92:	b1b0      	cbz	r0, 8003ac2 <_vfiprintf_r+0x156>
 8003a94:	9207      	str	r2, [sp, #28]
 8003a96:	e014      	b.n	8003ac2 <_vfiprintf_r+0x156>
 8003a98:	eba0 0308 	sub.w	r3, r0, r8
 8003a9c:	fa09 f303 	lsl.w	r3, r9, r3
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	9304      	str	r3, [sp, #16]
 8003aa4:	46a2      	mov	sl, r4
 8003aa6:	e7d2      	b.n	8003a4e <_vfiprintf_r+0xe2>
 8003aa8:	9b03      	ldr	r3, [sp, #12]
 8003aaa:	1d19      	adds	r1, r3, #4
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	9103      	str	r1, [sp, #12]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	bfbb      	ittet	lt
 8003ab4:	425b      	neglt	r3, r3
 8003ab6:	f042 0202 	orrlt.w	r2, r2, #2
 8003aba:	9307      	strge	r3, [sp, #28]
 8003abc:	9307      	strlt	r3, [sp, #28]
 8003abe:	bfb8      	it	lt
 8003ac0:	9204      	strlt	r2, [sp, #16]
 8003ac2:	7823      	ldrb	r3, [r4, #0]
 8003ac4:	2b2e      	cmp	r3, #46	; 0x2e
 8003ac6:	d10c      	bne.n	8003ae2 <_vfiprintf_r+0x176>
 8003ac8:	7863      	ldrb	r3, [r4, #1]
 8003aca:	2b2a      	cmp	r3, #42	; 0x2a
 8003acc:	d135      	bne.n	8003b3a <_vfiprintf_r+0x1ce>
 8003ace:	9b03      	ldr	r3, [sp, #12]
 8003ad0:	1d1a      	adds	r2, r3, #4
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	9203      	str	r2, [sp, #12]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	bfb8      	it	lt
 8003ada:	f04f 33ff 	movlt.w	r3, #4294967295
 8003ade:	3402      	adds	r4, #2
 8003ae0:	9305      	str	r3, [sp, #20]
 8003ae2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8003bc8 <_vfiprintf_r+0x25c>
 8003ae6:	7821      	ldrb	r1, [r4, #0]
 8003ae8:	2203      	movs	r2, #3
 8003aea:	4650      	mov	r0, sl
 8003aec:	f7fc fb90 	bl	8000210 <memchr>
 8003af0:	b140      	cbz	r0, 8003b04 <_vfiprintf_r+0x198>
 8003af2:	2340      	movs	r3, #64	; 0x40
 8003af4:	eba0 000a 	sub.w	r0, r0, sl
 8003af8:	fa03 f000 	lsl.w	r0, r3, r0
 8003afc:	9b04      	ldr	r3, [sp, #16]
 8003afe:	4303      	orrs	r3, r0
 8003b00:	3401      	adds	r4, #1
 8003b02:	9304      	str	r3, [sp, #16]
 8003b04:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003b08:	482c      	ldr	r0, [pc, #176]	; (8003bbc <_vfiprintf_r+0x250>)
 8003b0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003b0e:	2206      	movs	r2, #6
 8003b10:	f7fc fb7e 	bl	8000210 <memchr>
 8003b14:	2800      	cmp	r0, #0
 8003b16:	d03f      	beq.n	8003b98 <_vfiprintf_r+0x22c>
 8003b18:	4b29      	ldr	r3, [pc, #164]	; (8003bc0 <_vfiprintf_r+0x254>)
 8003b1a:	bb1b      	cbnz	r3, 8003b64 <_vfiprintf_r+0x1f8>
 8003b1c:	9b03      	ldr	r3, [sp, #12]
 8003b1e:	3307      	adds	r3, #7
 8003b20:	f023 0307 	bic.w	r3, r3, #7
 8003b24:	3308      	adds	r3, #8
 8003b26:	9303      	str	r3, [sp, #12]
 8003b28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003b2a:	443b      	add	r3, r7
 8003b2c:	9309      	str	r3, [sp, #36]	; 0x24
 8003b2e:	e767      	b.n	8003a00 <_vfiprintf_r+0x94>
 8003b30:	fb0c 3202 	mla	r2, ip, r2, r3
 8003b34:	460c      	mov	r4, r1
 8003b36:	2001      	movs	r0, #1
 8003b38:	e7a5      	b.n	8003a86 <_vfiprintf_r+0x11a>
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	3401      	adds	r4, #1
 8003b3e:	9305      	str	r3, [sp, #20]
 8003b40:	4619      	mov	r1, r3
 8003b42:	f04f 0c0a 	mov.w	ip, #10
 8003b46:	4620      	mov	r0, r4
 8003b48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003b4c:	3a30      	subs	r2, #48	; 0x30
 8003b4e:	2a09      	cmp	r2, #9
 8003b50:	d903      	bls.n	8003b5a <_vfiprintf_r+0x1ee>
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d0c5      	beq.n	8003ae2 <_vfiprintf_r+0x176>
 8003b56:	9105      	str	r1, [sp, #20]
 8003b58:	e7c3      	b.n	8003ae2 <_vfiprintf_r+0x176>
 8003b5a:	fb0c 2101 	mla	r1, ip, r1, r2
 8003b5e:	4604      	mov	r4, r0
 8003b60:	2301      	movs	r3, #1
 8003b62:	e7f0      	b.n	8003b46 <_vfiprintf_r+0x1da>
 8003b64:	ab03      	add	r3, sp, #12
 8003b66:	9300      	str	r3, [sp, #0]
 8003b68:	462a      	mov	r2, r5
 8003b6a:	4b16      	ldr	r3, [pc, #88]	; (8003bc4 <_vfiprintf_r+0x258>)
 8003b6c:	a904      	add	r1, sp, #16
 8003b6e:	4630      	mov	r0, r6
 8003b70:	f3af 8000 	nop.w
 8003b74:	4607      	mov	r7, r0
 8003b76:	1c78      	adds	r0, r7, #1
 8003b78:	d1d6      	bne.n	8003b28 <_vfiprintf_r+0x1bc>
 8003b7a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003b7c:	07d9      	lsls	r1, r3, #31
 8003b7e:	d405      	bmi.n	8003b8c <_vfiprintf_r+0x220>
 8003b80:	89ab      	ldrh	r3, [r5, #12]
 8003b82:	059a      	lsls	r2, r3, #22
 8003b84:	d402      	bmi.n	8003b8c <_vfiprintf_r+0x220>
 8003b86:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003b88:	f7ff fe31 	bl	80037ee <__retarget_lock_release_recursive>
 8003b8c:	89ab      	ldrh	r3, [r5, #12]
 8003b8e:	065b      	lsls	r3, r3, #25
 8003b90:	f53f af12 	bmi.w	80039b8 <_vfiprintf_r+0x4c>
 8003b94:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003b96:	e711      	b.n	80039bc <_vfiprintf_r+0x50>
 8003b98:	ab03      	add	r3, sp, #12
 8003b9a:	9300      	str	r3, [sp, #0]
 8003b9c:	462a      	mov	r2, r5
 8003b9e:	4b09      	ldr	r3, [pc, #36]	; (8003bc4 <_vfiprintf_r+0x258>)
 8003ba0:	a904      	add	r1, sp, #16
 8003ba2:	4630      	mov	r0, r6
 8003ba4:	f000 f880 	bl	8003ca8 <_printf_i>
 8003ba8:	e7e4      	b.n	8003b74 <_vfiprintf_r+0x208>
 8003baa:	bf00      	nop
 8003bac:	080045b0 	.word	0x080045b0
 8003bb0:	080045d0 	.word	0x080045d0
 8003bb4:	08004590 	.word	0x08004590
 8003bb8:	080045f0 	.word	0x080045f0
 8003bbc:	080045fa 	.word	0x080045fa
 8003bc0:	00000000 	.word	0x00000000
 8003bc4:	08003947 	.word	0x08003947
 8003bc8:	080045f6 	.word	0x080045f6

08003bcc <_printf_common>:
 8003bcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003bd0:	4616      	mov	r6, r2
 8003bd2:	4699      	mov	r9, r3
 8003bd4:	688a      	ldr	r2, [r1, #8]
 8003bd6:	690b      	ldr	r3, [r1, #16]
 8003bd8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	bfb8      	it	lt
 8003be0:	4613      	movlt	r3, r2
 8003be2:	6033      	str	r3, [r6, #0]
 8003be4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003be8:	4607      	mov	r7, r0
 8003bea:	460c      	mov	r4, r1
 8003bec:	b10a      	cbz	r2, 8003bf2 <_printf_common+0x26>
 8003bee:	3301      	adds	r3, #1
 8003bf0:	6033      	str	r3, [r6, #0]
 8003bf2:	6823      	ldr	r3, [r4, #0]
 8003bf4:	0699      	lsls	r1, r3, #26
 8003bf6:	bf42      	ittt	mi
 8003bf8:	6833      	ldrmi	r3, [r6, #0]
 8003bfa:	3302      	addmi	r3, #2
 8003bfc:	6033      	strmi	r3, [r6, #0]
 8003bfe:	6825      	ldr	r5, [r4, #0]
 8003c00:	f015 0506 	ands.w	r5, r5, #6
 8003c04:	d106      	bne.n	8003c14 <_printf_common+0x48>
 8003c06:	f104 0a19 	add.w	sl, r4, #25
 8003c0a:	68e3      	ldr	r3, [r4, #12]
 8003c0c:	6832      	ldr	r2, [r6, #0]
 8003c0e:	1a9b      	subs	r3, r3, r2
 8003c10:	42ab      	cmp	r3, r5
 8003c12:	dc26      	bgt.n	8003c62 <_printf_common+0x96>
 8003c14:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003c18:	1e13      	subs	r3, r2, #0
 8003c1a:	6822      	ldr	r2, [r4, #0]
 8003c1c:	bf18      	it	ne
 8003c1e:	2301      	movne	r3, #1
 8003c20:	0692      	lsls	r2, r2, #26
 8003c22:	d42b      	bmi.n	8003c7c <_printf_common+0xb0>
 8003c24:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003c28:	4649      	mov	r1, r9
 8003c2a:	4638      	mov	r0, r7
 8003c2c:	47c0      	blx	r8
 8003c2e:	3001      	adds	r0, #1
 8003c30:	d01e      	beq.n	8003c70 <_printf_common+0xa4>
 8003c32:	6823      	ldr	r3, [r4, #0]
 8003c34:	68e5      	ldr	r5, [r4, #12]
 8003c36:	6832      	ldr	r2, [r6, #0]
 8003c38:	f003 0306 	and.w	r3, r3, #6
 8003c3c:	2b04      	cmp	r3, #4
 8003c3e:	bf08      	it	eq
 8003c40:	1aad      	subeq	r5, r5, r2
 8003c42:	68a3      	ldr	r3, [r4, #8]
 8003c44:	6922      	ldr	r2, [r4, #16]
 8003c46:	bf0c      	ite	eq
 8003c48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003c4c:	2500      	movne	r5, #0
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	bfc4      	itt	gt
 8003c52:	1a9b      	subgt	r3, r3, r2
 8003c54:	18ed      	addgt	r5, r5, r3
 8003c56:	2600      	movs	r6, #0
 8003c58:	341a      	adds	r4, #26
 8003c5a:	42b5      	cmp	r5, r6
 8003c5c:	d11a      	bne.n	8003c94 <_printf_common+0xc8>
 8003c5e:	2000      	movs	r0, #0
 8003c60:	e008      	b.n	8003c74 <_printf_common+0xa8>
 8003c62:	2301      	movs	r3, #1
 8003c64:	4652      	mov	r2, sl
 8003c66:	4649      	mov	r1, r9
 8003c68:	4638      	mov	r0, r7
 8003c6a:	47c0      	blx	r8
 8003c6c:	3001      	adds	r0, #1
 8003c6e:	d103      	bne.n	8003c78 <_printf_common+0xac>
 8003c70:	f04f 30ff 	mov.w	r0, #4294967295
 8003c74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c78:	3501      	adds	r5, #1
 8003c7a:	e7c6      	b.n	8003c0a <_printf_common+0x3e>
 8003c7c:	18e1      	adds	r1, r4, r3
 8003c7e:	1c5a      	adds	r2, r3, #1
 8003c80:	2030      	movs	r0, #48	; 0x30
 8003c82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003c86:	4422      	add	r2, r4
 8003c88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003c8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003c90:	3302      	adds	r3, #2
 8003c92:	e7c7      	b.n	8003c24 <_printf_common+0x58>
 8003c94:	2301      	movs	r3, #1
 8003c96:	4622      	mov	r2, r4
 8003c98:	4649      	mov	r1, r9
 8003c9a:	4638      	mov	r0, r7
 8003c9c:	47c0      	blx	r8
 8003c9e:	3001      	adds	r0, #1
 8003ca0:	d0e6      	beq.n	8003c70 <_printf_common+0xa4>
 8003ca2:	3601      	adds	r6, #1
 8003ca4:	e7d9      	b.n	8003c5a <_printf_common+0x8e>
	...

08003ca8 <_printf_i>:
 8003ca8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003cac:	7e0f      	ldrb	r7, [r1, #24]
 8003cae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003cb0:	2f78      	cmp	r7, #120	; 0x78
 8003cb2:	4691      	mov	r9, r2
 8003cb4:	4680      	mov	r8, r0
 8003cb6:	460c      	mov	r4, r1
 8003cb8:	469a      	mov	sl, r3
 8003cba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003cbe:	d807      	bhi.n	8003cd0 <_printf_i+0x28>
 8003cc0:	2f62      	cmp	r7, #98	; 0x62
 8003cc2:	d80a      	bhi.n	8003cda <_printf_i+0x32>
 8003cc4:	2f00      	cmp	r7, #0
 8003cc6:	f000 80d8 	beq.w	8003e7a <_printf_i+0x1d2>
 8003cca:	2f58      	cmp	r7, #88	; 0x58
 8003ccc:	f000 80a3 	beq.w	8003e16 <_printf_i+0x16e>
 8003cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003cd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003cd8:	e03a      	b.n	8003d50 <_printf_i+0xa8>
 8003cda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003cde:	2b15      	cmp	r3, #21
 8003ce0:	d8f6      	bhi.n	8003cd0 <_printf_i+0x28>
 8003ce2:	a101      	add	r1, pc, #4	; (adr r1, 8003ce8 <_printf_i+0x40>)
 8003ce4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003ce8:	08003d41 	.word	0x08003d41
 8003cec:	08003d55 	.word	0x08003d55
 8003cf0:	08003cd1 	.word	0x08003cd1
 8003cf4:	08003cd1 	.word	0x08003cd1
 8003cf8:	08003cd1 	.word	0x08003cd1
 8003cfc:	08003cd1 	.word	0x08003cd1
 8003d00:	08003d55 	.word	0x08003d55
 8003d04:	08003cd1 	.word	0x08003cd1
 8003d08:	08003cd1 	.word	0x08003cd1
 8003d0c:	08003cd1 	.word	0x08003cd1
 8003d10:	08003cd1 	.word	0x08003cd1
 8003d14:	08003e61 	.word	0x08003e61
 8003d18:	08003d85 	.word	0x08003d85
 8003d1c:	08003e43 	.word	0x08003e43
 8003d20:	08003cd1 	.word	0x08003cd1
 8003d24:	08003cd1 	.word	0x08003cd1
 8003d28:	08003e83 	.word	0x08003e83
 8003d2c:	08003cd1 	.word	0x08003cd1
 8003d30:	08003d85 	.word	0x08003d85
 8003d34:	08003cd1 	.word	0x08003cd1
 8003d38:	08003cd1 	.word	0x08003cd1
 8003d3c:	08003e4b 	.word	0x08003e4b
 8003d40:	682b      	ldr	r3, [r5, #0]
 8003d42:	1d1a      	adds	r2, r3, #4
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	602a      	str	r2, [r5, #0]
 8003d48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003d4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003d50:	2301      	movs	r3, #1
 8003d52:	e0a3      	b.n	8003e9c <_printf_i+0x1f4>
 8003d54:	6820      	ldr	r0, [r4, #0]
 8003d56:	6829      	ldr	r1, [r5, #0]
 8003d58:	0606      	lsls	r6, r0, #24
 8003d5a:	f101 0304 	add.w	r3, r1, #4
 8003d5e:	d50a      	bpl.n	8003d76 <_printf_i+0xce>
 8003d60:	680e      	ldr	r6, [r1, #0]
 8003d62:	602b      	str	r3, [r5, #0]
 8003d64:	2e00      	cmp	r6, #0
 8003d66:	da03      	bge.n	8003d70 <_printf_i+0xc8>
 8003d68:	232d      	movs	r3, #45	; 0x2d
 8003d6a:	4276      	negs	r6, r6
 8003d6c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d70:	485e      	ldr	r0, [pc, #376]	; (8003eec <_printf_i+0x244>)
 8003d72:	230a      	movs	r3, #10
 8003d74:	e019      	b.n	8003daa <_printf_i+0x102>
 8003d76:	680e      	ldr	r6, [r1, #0]
 8003d78:	602b      	str	r3, [r5, #0]
 8003d7a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003d7e:	bf18      	it	ne
 8003d80:	b236      	sxthne	r6, r6
 8003d82:	e7ef      	b.n	8003d64 <_printf_i+0xbc>
 8003d84:	682b      	ldr	r3, [r5, #0]
 8003d86:	6820      	ldr	r0, [r4, #0]
 8003d88:	1d19      	adds	r1, r3, #4
 8003d8a:	6029      	str	r1, [r5, #0]
 8003d8c:	0601      	lsls	r1, r0, #24
 8003d8e:	d501      	bpl.n	8003d94 <_printf_i+0xec>
 8003d90:	681e      	ldr	r6, [r3, #0]
 8003d92:	e002      	b.n	8003d9a <_printf_i+0xf2>
 8003d94:	0646      	lsls	r6, r0, #25
 8003d96:	d5fb      	bpl.n	8003d90 <_printf_i+0xe8>
 8003d98:	881e      	ldrh	r6, [r3, #0]
 8003d9a:	4854      	ldr	r0, [pc, #336]	; (8003eec <_printf_i+0x244>)
 8003d9c:	2f6f      	cmp	r7, #111	; 0x6f
 8003d9e:	bf0c      	ite	eq
 8003da0:	2308      	moveq	r3, #8
 8003da2:	230a      	movne	r3, #10
 8003da4:	2100      	movs	r1, #0
 8003da6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003daa:	6865      	ldr	r5, [r4, #4]
 8003dac:	60a5      	str	r5, [r4, #8]
 8003dae:	2d00      	cmp	r5, #0
 8003db0:	bfa2      	ittt	ge
 8003db2:	6821      	ldrge	r1, [r4, #0]
 8003db4:	f021 0104 	bicge.w	r1, r1, #4
 8003db8:	6021      	strge	r1, [r4, #0]
 8003dba:	b90e      	cbnz	r6, 8003dc0 <_printf_i+0x118>
 8003dbc:	2d00      	cmp	r5, #0
 8003dbe:	d04d      	beq.n	8003e5c <_printf_i+0x1b4>
 8003dc0:	4615      	mov	r5, r2
 8003dc2:	fbb6 f1f3 	udiv	r1, r6, r3
 8003dc6:	fb03 6711 	mls	r7, r3, r1, r6
 8003dca:	5dc7      	ldrb	r7, [r0, r7]
 8003dcc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003dd0:	4637      	mov	r7, r6
 8003dd2:	42bb      	cmp	r3, r7
 8003dd4:	460e      	mov	r6, r1
 8003dd6:	d9f4      	bls.n	8003dc2 <_printf_i+0x11a>
 8003dd8:	2b08      	cmp	r3, #8
 8003dda:	d10b      	bne.n	8003df4 <_printf_i+0x14c>
 8003ddc:	6823      	ldr	r3, [r4, #0]
 8003dde:	07de      	lsls	r6, r3, #31
 8003de0:	d508      	bpl.n	8003df4 <_printf_i+0x14c>
 8003de2:	6923      	ldr	r3, [r4, #16]
 8003de4:	6861      	ldr	r1, [r4, #4]
 8003de6:	4299      	cmp	r1, r3
 8003de8:	bfde      	ittt	le
 8003dea:	2330      	movle	r3, #48	; 0x30
 8003dec:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003df0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003df4:	1b52      	subs	r2, r2, r5
 8003df6:	6122      	str	r2, [r4, #16]
 8003df8:	f8cd a000 	str.w	sl, [sp]
 8003dfc:	464b      	mov	r3, r9
 8003dfe:	aa03      	add	r2, sp, #12
 8003e00:	4621      	mov	r1, r4
 8003e02:	4640      	mov	r0, r8
 8003e04:	f7ff fee2 	bl	8003bcc <_printf_common>
 8003e08:	3001      	adds	r0, #1
 8003e0a:	d14c      	bne.n	8003ea6 <_printf_i+0x1fe>
 8003e0c:	f04f 30ff 	mov.w	r0, #4294967295
 8003e10:	b004      	add	sp, #16
 8003e12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003e16:	4835      	ldr	r0, [pc, #212]	; (8003eec <_printf_i+0x244>)
 8003e18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003e1c:	6829      	ldr	r1, [r5, #0]
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	f851 6b04 	ldr.w	r6, [r1], #4
 8003e24:	6029      	str	r1, [r5, #0]
 8003e26:	061d      	lsls	r5, r3, #24
 8003e28:	d514      	bpl.n	8003e54 <_printf_i+0x1ac>
 8003e2a:	07df      	lsls	r7, r3, #31
 8003e2c:	bf44      	itt	mi
 8003e2e:	f043 0320 	orrmi.w	r3, r3, #32
 8003e32:	6023      	strmi	r3, [r4, #0]
 8003e34:	b91e      	cbnz	r6, 8003e3e <_printf_i+0x196>
 8003e36:	6823      	ldr	r3, [r4, #0]
 8003e38:	f023 0320 	bic.w	r3, r3, #32
 8003e3c:	6023      	str	r3, [r4, #0]
 8003e3e:	2310      	movs	r3, #16
 8003e40:	e7b0      	b.n	8003da4 <_printf_i+0xfc>
 8003e42:	6823      	ldr	r3, [r4, #0]
 8003e44:	f043 0320 	orr.w	r3, r3, #32
 8003e48:	6023      	str	r3, [r4, #0]
 8003e4a:	2378      	movs	r3, #120	; 0x78
 8003e4c:	4828      	ldr	r0, [pc, #160]	; (8003ef0 <_printf_i+0x248>)
 8003e4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003e52:	e7e3      	b.n	8003e1c <_printf_i+0x174>
 8003e54:	0659      	lsls	r1, r3, #25
 8003e56:	bf48      	it	mi
 8003e58:	b2b6      	uxthmi	r6, r6
 8003e5a:	e7e6      	b.n	8003e2a <_printf_i+0x182>
 8003e5c:	4615      	mov	r5, r2
 8003e5e:	e7bb      	b.n	8003dd8 <_printf_i+0x130>
 8003e60:	682b      	ldr	r3, [r5, #0]
 8003e62:	6826      	ldr	r6, [r4, #0]
 8003e64:	6961      	ldr	r1, [r4, #20]
 8003e66:	1d18      	adds	r0, r3, #4
 8003e68:	6028      	str	r0, [r5, #0]
 8003e6a:	0635      	lsls	r5, r6, #24
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	d501      	bpl.n	8003e74 <_printf_i+0x1cc>
 8003e70:	6019      	str	r1, [r3, #0]
 8003e72:	e002      	b.n	8003e7a <_printf_i+0x1d2>
 8003e74:	0670      	lsls	r0, r6, #25
 8003e76:	d5fb      	bpl.n	8003e70 <_printf_i+0x1c8>
 8003e78:	8019      	strh	r1, [r3, #0]
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	6123      	str	r3, [r4, #16]
 8003e7e:	4615      	mov	r5, r2
 8003e80:	e7ba      	b.n	8003df8 <_printf_i+0x150>
 8003e82:	682b      	ldr	r3, [r5, #0]
 8003e84:	1d1a      	adds	r2, r3, #4
 8003e86:	602a      	str	r2, [r5, #0]
 8003e88:	681d      	ldr	r5, [r3, #0]
 8003e8a:	6862      	ldr	r2, [r4, #4]
 8003e8c:	2100      	movs	r1, #0
 8003e8e:	4628      	mov	r0, r5
 8003e90:	f7fc f9be 	bl	8000210 <memchr>
 8003e94:	b108      	cbz	r0, 8003e9a <_printf_i+0x1f2>
 8003e96:	1b40      	subs	r0, r0, r5
 8003e98:	6060      	str	r0, [r4, #4]
 8003e9a:	6863      	ldr	r3, [r4, #4]
 8003e9c:	6123      	str	r3, [r4, #16]
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003ea4:	e7a8      	b.n	8003df8 <_printf_i+0x150>
 8003ea6:	6923      	ldr	r3, [r4, #16]
 8003ea8:	462a      	mov	r2, r5
 8003eaa:	4649      	mov	r1, r9
 8003eac:	4640      	mov	r0, r8
 8003eae:	47d0      	blx	sl
 8003eb0:	3001      	adds	r0, #1
 8003eb2:	d0ab      	beq.n	8003e0c <_printf_i+0x164>
 8003eb4:	6823      	ldr	r3, [r4, #0]
 8003eb6:	079b      	lsls	r3, r3, #30
 8003eb8:	d413      	bmi.n	8003ee2 <_printf_i+0x23a>
 8003eba:	68e0      	ldr	r0, [r4, #12]
 8003ebc:	9b03      	ldr	r3, [sp, #12]
 8003ebe:	4298      	cmp	r0, r3
 8003ec0:	bfb8      	it	lt
 8003ec2:	4618      	movlt	r0, r3
 8003ec4:	e7a4      	b.n	8003e10 <_printf_i+0x168>
 8003ec6:	2301      	movs	r3, #1
 8003ec8:	4632      	mov	r2, r6
 8003eca:	4649      	mov	r1, r9
 8003ecc:	4640      	mov	r0, r8
 8003ece:	47d0      	blx	sl
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d09b      	beq.n	8003e0c <_printf_i+0x164>
 8003ed4:	3501      	adds	r5, #1
 8003ed6:	68e3      	ldr	r3, [r4, #12]
 8003ed8:	9903      	ldr	r1, [sp, #12]
 8003eda:	1a5b      	subs	r3, r3, r1
 8003edc:	42ab      	cmp	r3, r5
 8003ede:	dcf2      	bgt.n	8003ec6 <_printf_i+0x21e>
 8003ee0:	e7eb      	b.n	8003eba <_printf_i+0x212>
 8003ee2:	2500      	movs	r5, #0
 8003ee4:	f104 0619 	add.w	r6, r4, #25
 8003ee8:	e7f5      	b.n	8003ed6 <_printf_i+0x22e>
 8003eea:	bf00      	nop
 8003eec:	08004601 	.word	0x08004601
 8003ef0:	08004612 	.word	0x08004612

08003ef4 <_sbrk_r>:
 8003ef4:	b538      	push	{r3, r4, r5, lr}
 8003ef6:	4d06      	ldr	r5, [pc, #24]	; (8003f10 <_sbrk_r+0x1c>)
 8003ef8:	2300      	movs	r3, #0
 8003efa:	4604      	mov	r4, r0
 8003efc:	4608      	mov	r0, r1
 8003efe:	602b      	str	r3, [r5, #0]
 8003f00:	f000 faf4 	bl	80044ec <_sbrk>
 8003f04:	1c43      	adds	r3, r0, #1
 8003f06:	d102      	bne.n	8003f0e <_sbrk_r+0x1a>
 8003f08:	682b      	ldr	r3, [r5, #0]
 8003f0a:	b103      	cbz	r3, 8003f0e <_sbrk_r+0x1a>
 8003f0c:	6023      	str	r3, [r4, #0]
 8003f0e:	bd38      	pop	{r3, r4, r5, pc}
 8003f10:	20012e18 	.word	0x20012e18

08003f14 <__sread>:
 8003f14:	b510      	push	{r4, lr}
 8003f16:	460c      	mov	r4, r1
 8003f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f1c:	f000 fab2 	bl	8004484 <_read_r>
 8003f20:	2800      	cmp	r0, #0
 8003f22:	bfab      	itete	ge
 8003f24:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003f26:	89a3      	ldrhlt	r3, [r4, #12]
 8003f28:	181b      	addge	r3, r3, r0
 8003f2a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003f2e:	bfac      	ite	ge
 8003f30:	6563      	strge	r3, [r4, #84]	; 0x54
 8003f32:	81a3      	strhlt	r3, [r4, #12]
 8003f34:	bd10      	pop	{r4, pc}

08003f36 <__swrite>:
 8003f36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f3a:	461f      	mov	r7, r3
 8003f3c:	898b      	ldrh	r3, [r1, #12]
 8003f3e:	05db      	lsls	r3, r3, #23
 8003f40:	4605      	mov	r5, r0
 8003f42:	460c      	mov	r4, r1
 8003f44:	4616      	mov	r6, r2
 8003f46:	d505      	bpl.n	8003f54 <__swrite+0x1e>
 8003f48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	2200      	movs	r2, #0
 8003f50:	f000 f9c8 	bl	80042e4 <_lseek_r>
 8003f54:	89a3      	ldrh	r3, [r4, #12]
 8003f56:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003f5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f5e:	81a3      	strh	r3, [r4, #12]
 8003f60:	4632      	mov	r2, r6
 8003f62:	463b      	mov	r3, r7
 8003f64:	4628      	mov	r0, r5
 8003f66:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003f6a:	f000 b869 	b.w	8004040 <_write_r>

08003f6e <__sseek>:
 8003f6e:	b510      	push	{r4, lr}
 8003f70:	460c      	mov	r4, r1
 8003f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f76:	f000 f9b5 	bl	80042e4 <_lseek_r>
 8003f7a:	1c43      	adds	r3, r0, #1
 8003f7c:	89a3      	ldrh	r3, [r4, #12]
 8003f7e:	bf15      	itete	ne
 8003f80:	6560      	strne	r0, [r4, #84]	; 0x54
 8003f82:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003f86:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003f8a:	81a3      	strheq	r3, [r4, #12]
 8003f8c:	bf18      	it	ne
 8003f8e:	81a3      	strhne	r3, [r4, #12]
 8003f90:	bd10      	pop	{r4, pc}

08003f92 <__sclose>:
 8003f92:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f96:	f000 b8d3 	b.w	8004140 <_close_r>
	...

08003f9c <__swbuf_r>:
 8003f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f9e:	460e      	mov	r6, r1
 8003fa0:	4614      	mov	r4, r2
 8003fa2:	4605      	mov	r5, r0
 8003fa4:	b118      	cbz	r0, 8003fae <__swbuf_r+0x12>
 8003fa6:	6983      	ldr	r3, [r0, #24]
 8003fa8:	b90b      	cbnz	r3, 8003fae <__swbuf_r+0x12>
 8003faa:	f7ff fb81 	bl	80036b0 <__sinit>
 8003fae:	4b21      	ldr	r3, [pc, #132]	; (8004034 <__swbuf_r+0x98>)
 8003fb0:	429c      	cmp	r4, r3
 8003fb2:	d12b      	bne.n	800400c <__swbuf_r+0x70>
 8003fb4:	686c      	ldr	r4, [r5, #4]
 8003fb6:	69a3      	ldr	r3, [r4, #24]
 8003fb8:	60a3      	str	r3, [r4, #8]
 8003fba:	89a3      	ldrh	r3, [r4, #12]
 8003fbc:	071a      	lsls	r2, r3, #28
 8003fbe:	d52f      	bpl.n	8004020 <__swbuf_r+0x84>
 8003fc0:	6923      	ldr	r3, [r4, #16]
 8003fc2:	b36b      	cbz	r3, 8004020 <__swbuf_r+0x84>
 8003fc4:	6923      	ldr	r3, [r4, #16]
 8003fc6:	6820      	ldr	r0, [r4, #0]
 8003fc8:	1ac0      	subs	r0, r0, r3
 8003fca:	6963      	ldr	r3, [r4, #20]
 8003fcc:	b2f6      	uxtb	r6, r6
 8003fce:	4283      	cmp	r3, r0
 8003fd0:	4637      	mov	r7, r6
 8003fd2:	dc04      	bgt.n	8003fde <__swbuf_r+0x42>
 8003fd4:	4621      	mov	r1, r4
 8003fd6:	4628      	mov	r0, r5
 8003fd8:	f000 f948 	bl	800426c <_fflush_r>
 8003fdc:	bb30      	cbnz	r0, 800402c <__swbuf_r+0x90>
 8003fde:	68a3      	ldr	r3, [r4, #8]
 8003fe0:	3b01      	subs	r3, #1
 8003fe2:	60a3      	str	r3, [r4, #8]
 8003fe4:	6823      	ldr	r3, [r4, #0]
 8003fe6:	1c5a      	adds	r2, r3, #1
 8003fe8:	6022      	str	r2, [r4, #0]
 8003fea:	701e      	strb	r6, [r3, #0]
 8003fec:	6963      	ldr	r3, [r4, #20]
 8003fee:	3001      	adds	r0, #1
 8003ff0:	4283      	cmp	r3, r0
 8003ff2:	d004      	beq.n	8003ffe <__swbuf_r+0x62>
 8003ff4:	89a3      	ldrh	r3, [r4, #12]
 8003ff6:	07db      	lsls	r3, r3, #31
 8003ff8:	d506      	bpl.n	8004008 <__swbuf_r+0x6c>
 8003ffa:	2e0a      	cmp	r6, #10
 8003ffc:	d104      	bne.n	8004008 <__swbuf_r+0x6c>
 8003ffe:	4621      	mov	r1, r4
 8004000:	4628      	mov	r0, r5
 8004002:	f000 f933 	bl	800426c <_fflush_r>
 8004006:	b988      	cbnz	r0, 800402c <__swbuf_r+0x90>
 8004008:	4638      	mov	r0, r7
 800400a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800400c:	4b0a      	ldr	r3, [pc, #40]	; (8004038 <__swbuf_r+0x9c>)
 800400e:	429c      	cmp	r4, r3
 8004010:	d101      	bne.n	8004016 <__swbuf_r+0x7a>
 8004012:	68ac      	ldr	r4, [r5, #8]
 8004014:	e7cf      	b.n	8003fb6 <__swbuf_r+0x1a>
 8004016:	4b09      	ldr	r3, [pc, #36]	; (800403c <__swbuf_r+0xa0>)
 8004018:	429c      	cmp	r4, r3
 800401a:	bf08      	it	eq
 800401c:	68ec      	ldreq	r4, [r5, #12]
 800401e:	e7ca      	b.n	8003fb6 <__swbuf_r+0x1a>
 8004020:	4621      	mov	r1, r4
 8004022:	4628      	mov	r0, r5
 8004024:	f000 f81e 	bl	8004064 <__swsetup_r>
 8004028:	2800      	cmp	r0, #0
 800402a:	d0cb      	beq.n	8003fc4 <__swbuf_r+0x28>
 800402c:	f04f 37ff 	mov.w	r7, #4294967295
 8004030:	e7ea      	b.n	8004008 <__swbuf_r+0x6c>
 8004032:	bf00      	nop
 8004034:	080045b0 	.word	0x080045b0
 8004038:	080045d0 	.word	0x080045d0
 800403c:	08004590 	.word	0x08004590

08004040 <_write_r>:
 8004040:	b538      	push	{r3, r4, r5, lr}
 8004042:	4d07      	ldr	r5, [pc, #28]	; (8004060 <_write_r+0x20>)
 8004044:	4604      	mov	r4, r0
 8004046:	4608      	mov	r0, r1
 8004048:	4611      	mov	r1, r2
 800404a:	2200      	movs	r2, #0
 800404c:	602a      	str	r2, [r5, #0]
 800404e:	461a      	mov	r2, r3
 8004050:	f7fc fd21 	bl	8000a96 <_write>
 8004054:	1c43      	adds	r3, r0, #1
 8004056:	d102      	bne.n	800405e <_write_r+0x1e>
 8004058:	682b      	ldr	r3, [r5, #0]
 800405a:	b103      	cbz	r3, 800405e <_write_r+0x1e>
 800405c:	6023      	str	r3, [r4, #0]
 800405e:	bd38      	pop	{r3, r4, r5, pc}
 8004060:	20012e18 	.word	0x20012e18

08004064 <__swsetup_r>:
 8004064:	4b32      	ldr	r3, [pc, #200]	; (8004130 <__swsetup_r+0xcc>)
 8004066:	b570      	push	{r4, r5, r6, lr}
 8004068:	681d      	ldr	r5, [r3, #0]
 800406a:	4606      	mov	r6, r0
 800406c:	460c      	mov	r4, r1
 800406e:	b125      	cbz	r5, 800407a <__swsetup_r+0x16>
 8004070:	69ab      	ldr	r3, [r5, #24]
 8004072:	b913      	cbnz	r3, 800407a <__swsetup_r+0x16>
 8004074:	4628      	mov	r0, r5
 8004076:	f7ff fb1b 	bl	80036b0 <__sinit>
 800407a:	4b2e      	ldr	r3, [pc, #184]	; (8004134 <__swsetup_r+0xd0>)
 800407c:	429c      	cmp	r4, r3
 800407e:	d10f      	bne.n	80040a0 <__swsetup_r+0x3c>
 8004080:	686c      	ldr	r4, [r5, #4]
 8004082:	89a3      	ldrh	r3, [r4, #12]
 8004084:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004088:	0719      	lsls	r1, r3, #28
 800408a:	d42c      	bmi.n	80040e6 <__swsetup_r+0x82>
 800408c:	06dd      	lsls	r5, r3, #27
 800408e:	d411      	bmi.n	80040b4 <__swsetup_r+0x50>
 8004090:	2309      	movs	r3, #9
 8004092:	6033      	str	r3, [r6, #0]
 8004094:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8004098:	81a3      	strh	r3, [r4, #12]
 800409a:	f04f 30ff 	mov.w	r0, #4294967295
 800409e:	e03e      	b.n	800411e <__swsetup_r+0xba>
 80040a0:	4b25      	ldr	r3, [pc, #148]	; (8004138 <__swsetup_r+0xd4>)
 80040a2:	429c      	cmp	r4, r3
 80040a4:	d101      	bne.n	80040aa <__swsetup_r+0x46>
 80040a6:	68ac      	ldr	r4, [r5, #8]
 80040a8:	e7eb      	b.n	8004082 <__swsetup_r+0x1e>
 80040aa:	4b24      	ldr	r3, [pc, #144]	; (800413c <__swsetup_r+0xd8>)
 80040ac:	429c      	cmp	r4, r3
 80040ae:	bf08      	it	eq
 80040b0:	68ec      	ldreq	r4, [r5, #12]
 80040b2:	e7e6      	b.n	8004082 <__swsetup_r+0x1e>
 80040b4:	0758      	lsls	r0, r3, #29
 80040b6:	d512      	bpl.n	80040de <__swsetup_r+0x7a>
 80040b8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040ba:	b141      	cbz	r1, 80040ce <__swsetup_r+0x6a>
 80040bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040c0:	4299      	cmp	r1, r3
 80040c2:	d002      	beq.n	80040ca <__swsetup_r+0x66>
 80040c4:	4630      	mov	r0, r6
 80040c6:	f000 f991 	bl	80043ec <_free_r>
 80040ca:	2300      	movs	r3, #0
 80040cc:	6363      	str	r3, [r4, #52]	; 0x34
 80040ce:	89a3      	ldrh	r3, [r4, #12]
 80040d0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040d4:	81a3      	strh	r3, [r4, #12]
 80040d6:	2300      	movs	r3, #0
 80040d8:	6063      	str	r3, [r4, #4]
 80040da:	6923      	ldr	r3, [r4, #16]
 80040dc:	6023      	str	r3, [r4, #0]
 80040de:	89a3      	ldrh	r3, [r4, #12]
 80040e0:	f043 0308 	orr.w	r3, r3, #8
 80040e4:	81a3      	strh	r3, [r4, #12]
 80040e6:	6923      	ldr	r3, [r4, #16]
 80040e8:	b94b      	cbnz	r3, 80040fe <__swsetup_r+0x9a>
 80040ea:	89a3      	ldrh	r3, [r4, #12]
 80040ec:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80040f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80040f4:	d003      	beq.n	80040fe <__swsetup_r+0x9a>
 80040f6:	4621      	mov	r1, r4
 80040f8:	4630      	mov	r0, r6
 80040fa:	f000 f92b 	bl	8004354 <__smakebuf_r>
 80040fe:	89a0      	ldrh	r0, [r4, #12]
 8004100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004104:	f010 0301 	ands.w	r3, r0, #1
 8004108:	d00a      	beq.n	8004120 <__swsetup_r+0xbc>
 800410a:	2300      	movs	r3, #0
 800410c:	60a3      	str	r3, [r4, #8]
 800410e:	6963      	ldr	r3, [r4, #20]
 8004110:	425b      	negs	r3, r3
 8004112:	61a3      	str	r3, [r4, #24]
 8004114:	6923      	ldr	r3, [r4, #16]
 8004116:	b943      	cbnz	r3, 800412a <__swsetup_r+0xc6>
 8004118:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800411c:	d1ba      	bne.n	8004094 <__swsetup_r+0x30>
 800411e:	bd70      	pop	{r4, r5, r6, pc}
 8004120:	0781      	lsls	r1, r0, #30
 8004122:	bf58      	it	pl
 8004124:	6963      	ldrpl	r3, [r4, #20]
 8004126:	60a3      	str	r3, [r4, #8]
 8004128:	e7f4      	b.n	8004114 <__swsetup_r+0xb0>
 800412a:	2000      	movs	r0, #0
 800412c:	e7f7      	b.n	800411e <__swsetup_r+0xba>
 800412e:	bf00      	nop
 8004130:	20000014 	.word	0x20000014
 8004134:	080045b0 	.word	0x080045b0
 8004138:	080045d0 	.word	0x080045d0
 800413c:	08004590 	.word	0x08004590

08004140 <_close_r>:
 8004140:	b538      	push	{r3, r4, r5, lr}
 8004142:	4d06      	ldr	r5, [pc, #24]	; (800415c <_close_r+0x1c>)
 8004144:	2300      	movs	r3, #0
 8004146:	4604      	mov	r4, r0
 8004148:	4608      	mov	r0, r1
 800414a:	602b      	str	r3, [r5, #0]
 800414c:	f7fc fcbf 	bl	8000ace <_close>
 8004150:	1c43      	adds	r3, r0, #1
 8004152:	d102      	bne.n	800415a <_close_r+0x1a>
 8004154:	682b      	ldr	r3, [r5, #0]
 8004156:	b103      	cbz	r3, 800415a <_close_r+0x1a>
 8004158:	6023      	str	r3, [r4, #0]
 800415a:	bd38      	pop	{r3, r4, r5, pc}
 800415c:	20012e18 	.word	0x20012e18

08004160 <__sflush_r>:
 8004160:	898a      	ldrh	r2, [r1, #12]
 8004162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004166:	4605      	mov	r5, r0
 8004168:	0710      	lsls	r0, r2, #28
 800416a:	460c      	mov	r4, r1
 800416c:	d458      	bmi.n	8004220 <__sflush_r+0xc0>
 800416e:	684b      	ldr	r3, [r1, #4]
 8004170:	2b00      	cmp	r3, #0
 8004172:	dc05      	bgt.n	8004180 <__sflush_r+0x20>
 8004174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004176:	2b00      	cmp	r3, #0
 8004178:	dc02      	bgt.n	8004180 <__sflush_r+0x20>
 800417a:	2000      	movs	r0, #0
 800417c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004182:	2e00      	cmp	r6, #0
 8004184:	d0f9      	beq.n	800417a <__sflush_r+0x1a>
 8004186:	2300      	movs	r3, #0
 8004188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800418c:	682f      	ldr	r7, [r5, #0]
 800418e:	602b      	str	r3, [r5, #0]
 8004190:	d032      	beq.n	80041f8 <__sflush_r+0x98>
 8004192:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004194:	89a3      	ldrh	r3, [r4, #12]
 8004196:	075a      	lsls	r2, r3, #29
 8004198:	d505      	bpl.n	80041a6 <__sflush_r+0x46>
 800419a:	6863      	ldr	r3, [r4, #4]
 800419c:	1ac0      	subs	r0, r0, r3
 800419e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80041a0:	b10b      	cbz	r3, 80041a6 <__sflush_r+0x46>
 80041a2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80041a4:	1ac0      	subs	r0, r0, r3
 80041a6:	2300      	movs	r3, #0
 80041a8:	4602      	mov	r2, r0
 80041aa:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80041ac:	6a21      	ldr	r1, [r4, #32]
 80041ae:	4628      	mov	r0, r5
 80041b0:	47b0      	blx	r6
 80041b2:	1c43      	adds	r3, r0, #1
 80041b4:	89a3      	ldrh	r3, [r4, #12]
 80041b6:	d106      	bne.n	80041c6 <__sflush_r+0x66>
 80041b8:	6829      	ldr	r1, [r5, #0]
 80041ba:	291d      	cmp	r1, #29
 80041bc:	d82c      	bhi.n	8004218 <__sflush_r+0xb8>
 80041be:	4a2a      	ldr	r2, [pc, #168]	; (8004268 <__sflush_r+0x108>)
 80041c0:	40ca      	lsrs	r2, r1
 80041c2:	07d6      	lsls	r6, r2, #31
 80041c4:	d528      	bpl.n	8004218 <__sflush_r+0xb8>
 80041c6:	2200      	movs	r2, #0
 80041c8:	6062      	str	r2, [r4, #4]
 80041ca:	04d9      	lsls	r1, r3, #19
 80041cc:	6922      	ldr	r2, [r4, #16]
 80041ce:	6022      	str	r2, [r4, #0]
 80041d0:	d504      	bpl.n	80041dc <__sflush_r+0x7c>
 80041d2:	1c42      	adds	r2, r0, #1
 80041d4:	d101      	bne.n	80041da <__sflush_r+0x7a>
 80041d6:	682b      	ldr	r3, [r5, #0]
 80041d8:	b903      	cbnz	r3, 80041dc <__sflush_r+0x7c>
 80041da:	6560      	str	r0, [r4, #84]	; 0x54
 80041dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041de:	602f      	str	r7, [r5, #0]
 80041e0:	2900      	cmp	r1, #0
 80041e2:	d0ca      	beq.n	800417a <__sflush_r+0x1a>
 80041e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041e8:	4299      	cmp	r1, r3
 80041ea:	d002      	beq.n	80041f2 <__sflush_r+0x92>
 80041ec:	4628      	mov	r0, r5
 80041ee:	f000 f8fd 	bl	80043ec <_free_r>
 80041f2:	2000      	movs	r0, #0
 80041f4:	6360      	str	r0, [r4, #52]	; 0x34
 80041f6:	e7c1      	b.n	800417c <__sflush_r+0x1c>
 80041f8:	6a21      	ldr	r1, [r4, #32]
 80041fa:	2301      	movs	r3, #1
 80041fc:	4628      	mov	r0, r5
 80041fe:	47b0      	blx	r6
 8004200:	1c41      	adds	r1, r0, #1
 8004202:	d1c7      	bne.n	8004194 <__sflush_r+0x34>
 8004204:	682b      	ldr	r3, [r5, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d0c4      	beq.n	8004194 <__sflush_r+0x34>
 800420a:	2b1d      	cmp	r3, #29
 800420c:	d001      	beq.n	8004212 <__sflush_r+0xb2>
 800420e:	2b16      	cmp	r3, #22
 8004210:	d101      	bne.n	8004216 <__sflush_r+0xb6>
 8004212:	602f      	str	r7, [r5, #0]
 8004214:	e7b1      	b.n	800417a <__sflush_r+0x1a>
 8004216:	89a3      	ldrh	r3, [r4, #12]
 8004218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800421c:	81a3      	strh	r3, [r4, #12]
 800421e:	e7ad      	b.n	800417c <__sflush_r+0x1c>
 8004220:	690f      	ldr	r7, [r1, #16]
 8004222:	2f00      	cmp	r7, #0
 8004224:	d0a9      	beq.n	800417a <__sflush_r+0x1a>
 8004226:	0793      	lsls	r3, r2, #30
 8004228:	680e      	ldr	r6, [r1, #0]
 800422a:	bf08      	it	eq
 800422c:	694b      	ldreq	r3, [r1, #20]
 800422e:	600f      	str	r7, [r1, #0]
 8004230:	bf18      	it	ne
 8004232:	2300      	movne	r3, #0
 8004234:	eba6 0807 	sub.w	r8, r6, r7
 8004238:	608b      	str	r3, [r1, #8]
 800423a:	f1b8 0f00 	cmp.w	r8, #0
 800423e:	dd9c      	ble.n	800417a <__sflush_r+0x1a>
 8004240:	6a21      	ldr	r1, [r4, #32]
 8004242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004244:	4643      	mov	r3, r8
 8004246:	463a      	mov	r2, r7
 8004248:	4628      	mov	r0, r5
 800424a:	47b0      	blx	r6
 800424c:	2800      	cmp	r0, #0
 800424e:	dc06      	bgt.n	800425e <__sflush_r+0xfe>
 8004250:	89a3      	ldrh	r3, [r4, #12]
 8004252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004256:	81a3      	strh	r3, [r4, #12]
 8004258:	f04f 30ff 	mov.w	r0, #4294967295
 800425c:	e78e      	b.n	800417c <__sflush_r+0x1c>
 800425e:	4407      	add	r7, r0
 8004260:	eba8 0800 	sub.w	r8, r8, r0
 8004264:	e7e9      	b.n	800423a <__sflush_r+0xda>
 8004266:	bf00      	nop
 8004268:	20400001 	.word	0x20400001

0800426c <_fflush_r>:
 800426c:	b538      	push	{r3, r4, r5, lr}
 800426e:	690b      	ldr	r3, [r1, #16]
 8004270:	4605      	mov	r5, r0
 8004272:	460c      	mov	r4, r1
 8004274:	b913      	cbnz	r3, 800427c <_fflush_r+0x10>
 8004276:	2500      	movs	r5, #0
 8004278:	4628      	mov	r0, r5
 800427a:	bd38      	pop	{r3, r4, r5, pc}
 800427c:	b118      	cbz	r0, 8004286 <_fflush_r+0x1a>
 800427e:	6983      	ldr	r3, [r0, #24]
 8004280:	b90b      	cbnz	r3, 8004286 <_fflush_r+0x1a>
 8004282:	f7ff fa15 	bl	80036b0 <__sinit>
 8004286:	4b14      	ldr	r3, [pc, #80]	; (80042d8 <_fflush_r+0x6c>)
 8004288:	429c      	cmp	r4, r3
 800428a:	d11b      	bne.n	80042c4 <_fflush_r+0x58>
 800428c:	686c      	ldr	r4, [r5, #4]
 800428e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d0ef      	beq.n	8004276 <_fflush_r+0xa>
 8004296:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8004298:	07d0      	lsls	r0, r2, #31
 800429a:	d404      	bmi.n	80042a6 <_fflush_r+0x3a>
 800429c:	0599      	lsls	r1, r3, #22
 800429e:	d402      	bmi.n	80042a6 <_fflush_r+0x3a>
 80042a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042a2:	f7ff faa3 	bl	80037ec <__retarget_lock_acquire_recursive>
 80042a6:	4628      	mov	r0, r5
 80042a8:	4621      	mov	r1, r4
 80042aa:	f7ff ff59 	bl	8004160 <__sflush_r>
 80042ae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80042b0:	07da      	lsls	r2, r3, #31
 80042b2:	4605      	mov	r5, r0
 80042b4:	d4e0      	bmi.n	8004278 <_fflush_r+0xc>
 80042b6:	89a3      	ldrh	r3, [r4, #12]
 80042b8:	059b      	lsls	r3, r3, #22
 80042ba:	d4dd      	bmi.n	8004278 <_fflush_r+0xc>
 80042bc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80042be:	f7ff fa96 	bl	80037ee <__retarget_lock_release_recursive>
 80042c2:	e7d9      	b.n	8004278 <_fflush_r+0xc>
 80042c4:	4b05      	ldr	r3, [pc, #20]	; (80042dc <_fflush_r+0x70>)
 80042c6:	429c      	cmp	r4, r3
 80042c8:	d101      	bne.n	80042ce <_fflush_r+0x62>
 80042ca:	68ac      	ldr	r4, [r5, #8]
 80042cc:	e7df      	b.n	800428e <_fflush_r+0x22>
 80042ce:	4b04      	ldr	r3, [pc, #16]	; (80042e0 <_fflush_r+0x74>)
 80042d0:	429c      	cmp	r4, r3
 80042d2:	bf08      	it	eq
 80042d4:	68ec      	ldreq	r4, [r5, #12]
 80042d6:	e7da      	b.n	800428e <_fflush_r+0x22>
 80042d8:	080045b0 	.word	0x080045b0
 80042dc:	080045d0 	.word	0x080045d0
 80042e0:	08004590 	.word	0x08004590

080042e4 <_lseek_r>:
 80042e4:	b538      	push	{r3, r4, r5, lr}
 80042e6:	4d07      	ldr	r5, [pc, #28]	; (8004304 <_lseek_r+0x20>)
 80042e8:	4604      	mov	r4, r0
 80042ea:	4608      	mov	r0, r1
 80042ec:	4611      	mov	r1, r2
 80042ee:	2200      	movs	r2, #0
 80042f0:	602a      	str	r2, [r5, #0]
 80042f2:	461a      	mov	r2, r3
 80042f4:	f7fc fc12 	bl	8000b1c <_lseek>
 80042f8:	1c43      	adds	r3, r0, #1
 80042fa:	d102      	bne.n	8004302 <_lseek_r+0x1e>
 80042fc:	682b      	ldr	r3, [r5, #0]
 80042fe:	b103      	cbz	r3, 8004302 <_lseek_r+0x1e>
 8004300:	6023      	str	r3, [r4, #0]
 8004302:	bd38      	pop	{r3, r4, r5, pc}
 8004304:	20012e18 	.word	0x20012e18

08004308 <__swhatbuf_r>:
 8004308:	b570      	push	{r4, r5, r6, lr}
 800430a:	460e      	mov	r6, r1
 800430c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004310:	2900      	cmp	r1, #0
 8004312:	b096      	sub	sp, #88	; 0x58
 8004314:	4614      	mov	r4, r2
 8004316:	461d      	mov	r5, r3
 8004318:	da08      	bge.n	800432c <__swhatbuf_r+0x24>
 800431a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800431e:	2200      	movs	r2, #0
 8004320:	602a      	str	r2, [r5, #0]
 8004322:	061a      	lsls	r2, r3, #24
 8004324:	d410      	bmi.n	8004348 <__swhatbuf_r+0x40>
 8004326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800432a:	e00e      	b.n	800434a <__swhatbuf_r+0x42>
 800432c:	466a      	mov	r2, sp
 800432e:	f000 f8bb 	bl	80044a8 <_fstat_r>
 8004332:	2800      	cmp	r0, #0
 8004334:	dbf1      	blt.n	800431a <__swhatbuf_r+0x12>
 8004336:	9a01      	ldr	r2, [sp, #4]
 8004338:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800433c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004340:	425a      	negs	r2, r3
 8004342:	415a      	adcs	r2, r3
 8004344:	602a      	str	r2, [r5, #0]
 8004346:	e7ee      	b.n	8004326 <__swhatbuf_r+0x1e>
 8004348:	2340      	movs	r3, #64	; 0x40
 800434a:	2000      	movs	r0, #0
 800434c:	6023      	str	r3, [r4, #0]
 800434e:	b016      	add	sp, #88	; 0x58
 8004350:	bd70      	pop	{r4, r5, r6, pc}
	...

08004354 <__smakebuf_r>:
 8004354:	898b      	ldrh	r3, [r1, #12]
 8004356:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004358:	079d      	lsls	r5, r3, #30
 800435a:	4606      	mov	r6, r0
 800435c:	460c      	mov	r4, r1
 800435e:	d507      	bpl.n	8004370 <__smakebuf_r+0x1c>
 8004360:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8004364:	6023      	str	r3, [r4, #0]
 8004366:	6123      	str	r3, [r4, #16]
 8004368:	2301      	movs	r3, #1
 800436a:	6163      	str	r3, [r4, #20]
 800436c:	b002      	add	sp, #8
 800436e:	bd70      	pop	{r4, r5, r6, pc}
 8004370:	ab01      	add	r3, sp, #4
 8004372:	466a      	mov	r2, sp
 8004374:	f7ff ffc8 	bl	8004308 <__swhatbuf_r>
 8004378:	9900      	ldr	r1, [sp, #0]
 800437a:	4605      	mov	r5, r0
 800437c:	4630      	mov	r0, r6
 800437e:	f7ff fa57 	bl	8003830 <_malloc_r>
 8004382:	b948      	cbnz	r0, 8004398 <__smakebuf_r+0x44>
 8004384:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004388:	059a      	lsls	r2, r3, #22
 800438a:	d4ef      	bmi.n	800436c <__smakebuf_r+0x18>
 800438c:	f023 0303 	bic.w	r3, r3, #3
 8004390:	f043 0302 	orr.w	r3, r3, #2
 8004394:	81a3      	strh	r3, [r4, #12]
 8004396:	e7e3      	b.n	8004360 <__smakebuf_r+0xc>
 8004398:	4b0d      	ldr	r3, [pc, #52]	; (80043d0 <__smakebuf_r+0x7c>)
 800439a:	62b3      	str	r3, [r6, #40]	; 0x28
 800439c:	89a3      	ldrh	r3, [r4, #12]
 800439e:	6020      	str	r0, [r4, #0]
 80043a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043a4:	81a3      	strh	r3, [r4, #12]
 80043a6:	9b00      	ldr	r3, [sp, #0]
 80043a8:	6163      	str	r3, [r4, #20]
 80043aa:	9b01      	ldr	r3, [sp, #4]
 80043ac:	6120      	str	r0, [r4, #16]
 80043ae:	b15b      	cbz	r3, 80043c8 <__smakebuf_r+0x74>
 80043b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043b4:	4630      	mov	r0, r6
 80043b6:	f000 f889 	bl	80044cc <_isatty_r>
 80043ba:	b128      	cbz	r0, 80043c8 <__smakebuf_r+0x74>
 80043bc:	89a3      	ldrh	r3, [r4, #12]
 80043be:	f023 0303 	bic.w	r3, r3, #3
 80043c2:	f043 0301 	orr.w	r3, r3, #1
 80043c6:	81a3      	strh	r3, [r4, #12]
 80043c8:	89a0      	ldrh	r0, [r4, #12]
 80043ca:	4305      	orrs	r5, r0
 80043cc:	81a5      	strh	r5, [r4, #12]
 80043ce:	e7cd      	b.n	800436c <__smakebuf_r+0x18>
 80043d0:	08003649 	.word	0x08003649

080043d4 <__malloc_lock>:
 80043d4:	4801      	ldr	r0, [pc, #4]	; (80043dc <__malloc_lock+0x8>)
 80043d6:	f7ff ba09 	b.w	80037ec <__retarget_lock_acquire_recursive>
 80043da:	bf00      	nop
 80043dc:	20012e0c 	.word	0x20012e0c

080043e0 <__malloc_unlock>:
 80043e0:	4801      	ldr	r0, [pc, #4]	; (80043e8 <__malloc_unlock+0x8>)
 80043e2:	f7ff ba04 	b.w	80037ee <__retarget_lock_release_recursive>
 80043e6:	bf00      	nop
 80043e8:	20012e0c 	.word	0x20012e0c

080043ec <_free_r>:
 80043ec:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80043ee:	2900      	cmp	r1, #0
 80043f0:	d044      	beq.n	800447c <_free_r+0x90>
 80043f2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80043f6:	9001      	str	r0, [sp, #4]
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f1a1 0404 	sub.w	r4, r1, #4
 80043fe:	bfb8      	it	lt
 8004400:	18e4      	addlt	r4, r4, r3
 8004402:	f7ff ffe7 	bl	80043d4 <__malloc_lock>
 8004406:	4a1e      	ldr	r2, [pc, #120]	; (8004480 <_free_r+0x94>)
 8004408:	9801      	ldr	r0, [sp, #4]
 800440a:	6813      	ldr	r3, [r2, #0]
 800440c:	b933      	cbnz	r3, 800441c <_free_r+0x30>
 800440e:	6063      	str	r3, [r4, #4]
 8004410:	6014      	str	r4, [r2, #0]
 8004412:	b003      	add	sp, #12
 8004414:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004418:	f7ff bfe2 	b.w	80043e0 <__malloc_unlock>
 800441c:	42a3      	cmp	r3, r4
 800441e:	d908      	bls.n	8004432 <_free_r+0x46>
 8004420:	6825      	ldr	r5, [r4, #0]
 8004422:	1961      	adds	r1, r4, r5
 8004424:	428b      	cmp	r3, r1
 8004426:	bf01      	itttt	eq
 8004428:	6819      	ldreq	r1, [r3, #0]
 800442a:	685b      	ldreq	r3, [r3, #4]
 800442c:	1949      	addeq	r1, r1, r5
 800442e:	6021      	streq	r1, [r4, #0]
 8004430:	e7ed      	b.n	800440e <_free_r+0x22>
 8004432:	461a      	mov	r2, r3
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	b10b      	cbz	r3, 800443c <_free_r+0x50>
 8004438:	42a3      	cmp	r3, r4
 800443a:	d9fa      	bls.n	8004432 <_free_r+0x46>
 800443c:	6811      	ldr	r1, [r2, #0]
 800443e:	1855      	adds	r5, r2, r1
 8004440:	42a5      	cmp	r5, r4
 8004442:	d10b      	bne.n	800445c <_free_r+0x70>
 8004444:	6824      	ldr	r4, [r4, #0]
 8004446:	4421      	add	r1, r4
 8004448:	1854      	adds	r4, r2, r1
 800444a:	42a3      	cmp	r3, r4
 800444c:	6011      	str	r1, [r2, #0]
 800444e:	d1e0      	bne.n	8004412 <_free_r+0x26>
 8004450:	681c      	ldr	r4, [r3, #0]
 8004452:	685b      	ldr	r3, [r3, #4]
 8004454:	6053      	str	r3, [r2, #4]
 8004456:	4421      	add	r1, r4
 8004458:	6011      	str	r1, [r2, #0]
 800445a:	e7da      	b.n	8004412 <_free_r+0x26>
 800445c:	d902      	bls.n	8004464 <_free_r+0x78>
 800445e:	230c      	movs	r3, #12
 8004460:	6003      	str	r3, [r0, #0]
 8004462:	e7d6      	b.n	8004412 <_free_r+0x26>
 8004464:	6825      	ldr	r5, [r4, #0]
 8004466:	1961      	adds	r1, r4, r5
 8004468:	428b      	cmp	r3, r1
 800446a:	bf04      	itt	eq
 800446c:	6819      	ldreq	r1, [r3, #0]
 800446e:	685b      	ldreq	r3, [r3, #4]
 8004470:	6063      	str	r3, [r4, #4]
 8004472:	bf04      	itt	eq
 8004474:	1949      	addeq	r1, r1, r5
 8004476:	6021      	streq	r1, [r4, #0]
 8004478:	6054      	str	r4, [r2, #4]
 800447a:	e7ca      	b.n	8004412 <_free_r+0x26>
 800447c:	b003      	add	sp, #12
 800447e:	bd30      	pop	{r4, r5, pc}
 8004480:	20012e10 	.word	0x20012e10

08004484 <_read_r>:
 8004484:	b538      	push	{r3, r4, r5, lr}
 8004486:	4d07      	ldr	r5, [pc, #28]	; (80044a4 <_read_r+0x20>)
 8004488:	4604      	mov	r4, r0
 800448a:	4608      	mov	r0, r1
 800448c:	4611      	mov	r1, r2
 800448e:	2200      	movs	r2, #0
 8004490:	602a      	str	r2, [r5, #0]
 8004492:	461a      	mov	r2, r3
 8004494:	f7fc fae2 	bl	8000a5c <_read>
 8004498:	1c43      	adds	r3, r0, #1
 800449a:	d102      	bne.n	80044a2 <_read_r+0x1e>
 800449c:	682b      	ldr	r3, [r5, #0]
 800449e:	b103      	cbz	r3, 80044a2 <_read_r+0x1e>
 80044a0:	6023      	str	r3, [r4, #0]
 80044a2:	bd38      	pop	{r3, r4, r5, pc}
 80044a4:	20012e18 	.word	0x20012e18

080044a8 <_fstat_r>:
 80044a8:	b538      	push	{r3, r4, r5, lr}
 80044aa:	4d07      	ldr	r5, [pc, #28]	; (80044c8 <_fstat_r+0x20>)
 80044ac:	2300      	movs	r3, #0
 80044ae:	4604      	mov	r4, r0
 80044b0:	4608      	mov	r0, r1
 80044b2:	4611      	mov	r1, r2
 80044b4:	602b      	str	r3, [r5, #0]
 80044b6:	f7fc fb16 	bl	8000ae6 <_fstat>
 80044ba:	1c43      	adds	r3, r0, #1
 80044bc:	d102      	bne.n	80044c4 <_fstat_r+0x1c>
 80044be:	682b      	ldr	r3, [r5, #0]
 80044c0:	b103      	cbz	r3, 80044c4 <_fstat_r+0x1c>
 80044c2:	6023      	str	r3, [r4, #0]
 80044c4:	bd38      	pop	{r3, r4, r5, pc}
 80044c6:	bf00      	nop
 80044c8:	20012e18 	.word	0x20012e18

080044cc <_isatty_r>:
 80044cc:	b538      	push	{r3, r4, r5, lr}
 80044ce:	4d06      	ldr	r5, [pc, #24]	; (80044e8 <_isatty_r+0x1c>)
 80044d0:	2300      	movs	r3, #0
 80044d2:	4604      	mov	r4, r0
 80044d4:	4608      	mov	r0, r1
 80044d6:	602b      	str	r3, [r5, #0]
 80044d8:	f7fc fb15 	bl	8000b06 <_isatty>
 80044dc:	1c43      	adds	r3, r0, #1
 80044de:	d102      	bne.n	80044e6 <_isatty_r+0x1a>
 80044e0:	682b      	ldr	r3, [r5, #0]
 80044e2:	b103      	cbz	r3, 80044e6 <_isatty_r+0x1a>
 80044e4:	6023      	str	r3, [r4, #0]
 80044e6:	bd38      	pop	{r3, r4, r5, pc}
 80044e8:	20012e18 	.word	0x20012e18

080044ec <_sbrk>:
 80044ec:	4a04      	ldr	r2, [pc, #16]	; (8004500 <_sbrk+0x14>)
 80044ee:	6811      	ldr	r1, [r2, #0]
 80044f0:	4603      	mov	r3, r0
 80044f2:	b909      	cbnz	r1, 80044f8 <_sbrk+0xc>
 80044f4:	4903      	ldr	r1, [pc, #12]	; (8004504 <_sbrk+0x18>)
 80044f6:	6011      	str	r1, [r2, #0]
 80044f8:	6810      	ldr	r0, [r2, #0]
 80044fa:	4403      	add	r3, r0
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	4770      	bx	lr
 8004500:	20012e1c 	.word	0x20012e1c
 8004504:	20012e20 	.word	0x20012e20

08004508 <_init>:
 8004508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800450a:	bf00      	nop
 800450c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800450e:	bc08      	pop	{r3}
 8004510:	469e      	mov	lr, r3
 8004512:	4770      	bx	lr

08004514 <_fini>:
 8004514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004516:	bf00      	nop
 8004518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800451a:	bc08      	pop	{r3}
 800451c:	469e      	mov	lr, r3
 800451e:	4770      	bx	lr
