
001Tasks.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ed8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080030a8  080030a8  000130a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003100  08003100  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003100  08003100  00013100  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003108  08003108  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003108  08003108  00013108  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800310c  0800310c  0001310c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08003110  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012d84  20000010  08003120  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012d94  08003120  00022d94  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1cf  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002110  00000000  00000000  0002d20f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce0  00000000  00000000  0002f320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000bd8  00000000  00000000  00030000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021e30  00000000  00000000  00030bd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ed58  00000000  00000000  00052a08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d4b4c  00000000  00000000  00061760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001362ac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034d4  00000000  00000000  001362fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003090 	.word	0x08003090

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08003090 	.word	0x08003090

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b974 	b.w	8000510 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468e      	mov	lr, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	d14d      	bne.n	80002ea <__udivmoddi4+0xaa>
 800024e:	428a      	cmp	r2, r1
 8000250:	4694      	mov	ip, r2
 8000252:	d969      	bls.n	8000328 <__udivmoddi4+0xe8>
 8000254:	fab2 f282 	clz	r2, r2
 8000258:	b152      	cbz	r2, 8000270 <__udivmoddi4+0x30>
 800025a:	fa01 f302 	lsl.w	r3, r1, r2
 800025e:	f1c2 0120 	rsb	r1, r2, #32
 8000262:	fa20 f101 	lsr.w	r1, r0, r1
 8000266:	fa0c fc02 	lsl.w	ip, ip, r2
 800026a:	ea41 0e03 	orr.w	lr, r1, r3
 800026e:	4094      	lsls	r4, r2
 8000270:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000274:	0c21      	lsrs	r1, r4, #16
 8000276:	fbbe f6f8 	udiv	r6, lr, r8
 800027a:	fa1f f78c 	uxth.w	r7, ip
 800027e:	fb08 e316 	mls	r3, r8, r6, lr
 8000282:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000286:	fb06 f107 	mul.w	r1, r6, r7
 800028a:	4299      	cmp	r1, r3
 800028c:	d90a      	bls.n	80002a4 <__udivmoddi4+0x64>
 800028e:	eb1c 0303 	adds.w	r3, ip, r3
 8000292:	f106 30ff 	add.w	r0, r6, #4294967295
 8000296:	f080 811f 	bcs.w	80004d8 <__udivmoddi4+0x298>
 800029a:	4299      	cmp	r1, r3
 800029c:	f240 811c 	bls.w	80004d8 <__udivmoddi4+0x298>
 80002a0:	3e02      	subs	r6, #2
 80002a2:	4463      	add	r3, ip
 80002a4:	1a5b      	subs	r3, r3, r1
 80002a6:	b2a4      	uxth	r4, r4
 80002a8:	fbb3 f0f8 	udiv	r0, r3, r8
 80002ac:	fb08 3310 	mls	r3, r8, r0, r3
 80002b0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b4:	fb00 f707 	mul.w	r7, r0, r7
 80002b8:	42a7      	cmp	r7, r4
 80002ba:	d90a      	bls.n	80002d2 <__udivmoddi4+0x92>
 80002bc:	eb1c 0404 	adds.w	r4, ip, r4
 80002c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80002c4:	f080 810a 	bcs.w	80004dc <__udivmoddi4+0x29c>
 80002c8:	42a7      	cmp	r7, r4
 80002ca:	f240 8107 	bls.w	80004dc <__udivmoddi4+0x29c>
 80002ce:	4464      	add	r4, ip
 80002d0:	3802      	subs	r0, #2
 80002d2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d6:	1be4      	subs	r4, r4, r7
 80002d8:	2600      	movs	r6, #0
 80002da:	b11d      	cbz	r5, 80002e4 <__udivmoddi4+0xa4>
 80002dc:	40d4      	lsrs	r4, r2
 80002de:	2300      	movs	r3, #0
 80002e0:	e9c5 4300 	strd	r4, r3, [r5]
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	428b      	cmp	r3, r1
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0xc2>
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	f000 80ef 	beq.w	80004d2 <__udivmoddi4+0x292>
 80002f4:	2600      	movs	r6, #0
 80002f6:	e9c5 0100 	strd	r0, r1, [r5]
 80002fa:	4630      	mov	r0, r6
 80002fc:	4631      	mov	r1, r6
 80002fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000302:	fab3 f683 	clz	r6, r3
 8000306:	2e00      	cmp	r6, #0
 8000308:	d14a      	bne.n	80003a0 <__udivmoddi4+0x160>
 800030a:	428b      	cmp	r3, r1
 800030c:	d302      	bcc.n	8000314 <__udivmoddi4+0xd4>
 800030e:	4282      	cmp	r2, r0
 8000310:	f200 80f9 	bhi.w	8000506 <__udivmoddi4+0x2c6>
 8000314:	1a84      	subs	r4, r0, r2
 8000316:	eb61 0303 	sbc.w	r3, r1, r3
 800031a:	2001      	movs	r0, #1
 800031c:	469e      	mov	lr, r3
 800031e:	2d00      	cmp	r5, #0
 8000320:	d0e0      	beq.n	80002e4 <__udivmoddi4+0xa4>
 8000322:	e9c5 4e00 	strd	r4, lr, [r5]
 8000326:	e7dd      	b.n	80002e4 <__udivmoddi4+0xa4>
 8000328:	b902      	cbnz	r2, 800032c <__udivmoddi4+0xec>
 800032a:	deff      	udf	#255	; 0xff
 800032c:	fab2 f282 	clz	r2, r2
 8000330:	2a00      	cmp	r2, #0
 8000332:	f040 8092 	bne.w	800045a <__udivmoddi4+0x21a>
 8000336:	eba1 010c 	sub.w	r1, r1, ip
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2601      	movs	r6, #1
 8000344:	0c20      	lsrs	r0, r4, #16
 8000346:	fbb1 f3f7 	udiv	r3, r1, r7
 800034a:	fb07 1113 	mls	r1, r7, r3, r1
 800034e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000352:	fb0e f003 	mul.w	r0, lr, r3
 8000356:	4288      	cmp	r0, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x12c>
 800035a:	eb1c 0101 	adds.w	r1, ip, r1
 800035e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x12a>
 8000364:	4288      	cmp	r0, r1
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2c0>
 800036a:	4643      	mov	r3, r8
 800036c:	1a09      	subs	r1, r1, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb1 f0f7 	udiv	r0, r1, r7
 8000374:	fb07 1110 	mls	r1, r7, r0, r1
 8000378:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x156>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 31ff 	add.w	r1, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x154>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2ca>
 8000394:	4608      	mov	r0, r1
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800039e:	e79c      	b.n	80002da <__udivmoddi4+0x9a>
 80003a0:	f1c6 0720 	rsb	r7, r6, #32
 80003a4:	40b3      	lsls	r3, r6
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa20 f407 	lsr.w	r4, r0, r7
 80003b2:	fa01 f306 	lsl.w	r3, r1, r6
 80003b6:	431c      	orrs	r4, r3
 80003b8:	40f9      	lsrs	r1, r7
 80003ba:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003be:	fa00 f306 	lsl.w	r3, r0, r6
 80003c2:	fbb1 f8f9 	udiv	r8, r1, r9
 80003c6:	0c20      	lsrs	r0, r4, #16
 80003c8:	fa1f fe8c 	uxth.w	lr, ip
 80003cc:	fb09 1118 	mls	r1, r9, r8, r1
 80003d0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d4:	fb08 f00e 	mul.w	r0, r8, lr
 80003d8:	4288      	cmp	r0, r1
 80003da:	fa02 f206 	lsl.w	r2, r2, r6
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b8>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2bc>
 80003ec:	4288      	cmp	r0, r1
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2bc>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4461      	add	r1, ip
 80003f8:	1a09      	subs	r1, r1, r0
 80003fa:	b2a4      	uxth	r4, r4
 80003fc:	fbb1 f0f9 	udiv	r0, r1, r9
 8000400:	fb09 1110 	mls	r1, r9, r0, r1
 8000404:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000408:	fb00 fe0e 	mul.w	lr, r0, lr
 800040c:	458e      	cmp	lr, r1
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1e2>
 8000410:	eb1c 0101 	adds.w	r1, ip, r1
 8000414:	f100 34ff 	add.w	r4, r0, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2b4>
 800041a:	458e      	cmp	lr, r1
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2b4>
 800041e:	3802      	subs	r0, #2
 8000420:	4461      	add	r1, ip
 8000422:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000426:	fba0 9402 	umull	r9, r4, r0, r2
 800042a:	eba1 010e 	sub.w	r1, r1, lr
 800042e:	42a1      	cmp	r1, r4
 8000430:	46c8      	mov	r8, r9
 8000432:	46a6      	mov	lr, r4
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x2a4>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x2a0>
 8000438:	b15d      	cbz	r5, 8000452 <__udivmoddi4+0x212>
 800043a:	ebb3 0208 	subs.w	r2, r3, r8
 800043e:	eb61 010e 	sbc.w	r1, r1, lr
 8000442:	fa01 f707 	lsl.w	r7, r1, r7
 8000446:	fa22 f306 	lsr.w	r3, r2, r6
 800044a:	40f1      	lsrs	r1, r6
 800044c:	431f      	orrs	r7, r3
 800044e:	e9c5 7100 	strd	r7, r1, [r5]
 8000452:	2600      	movs	r6, #0
 8000454:	4631      	mov	r1, r6
 8000456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800045a:	f1c2 0320 	rsb	r3, r2, #32
 800045e:	40d8      	lsrs	r0, r3
 8000460:	fa0c fc02 	lsl.w	ip, ip, r2
 8000464:	fa21 f303 	lsr.w	r3, r1, r3
 8000468:	4091      	lsls	r1, r2
 800046a:	4301      	orrs	r1, r0
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb3 f0f7 	udiv	r0, r3, r7
 8000478:	fb07 3610 	mls	r6, r7, r0, r3
 800047c:	0c0b      	lsrs	r3, r1, #16
 800047e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000482:	fb00 f60e 	mul.w	r6, r0, lr
 8000486:	429e      	cmp	r6, r3
 8000488:	fa04 f402 	lsl.w	r4, r4, r2
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x260>
 800048e:	eb1c 0303 	adds.w	r3, ip, r3
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b8>
 8000498:	429e      	cmp	r6, r3
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b8>
 800049c:	3802      	subs	r0, #2
 800049e:	4463      	add	r3, ip
 80004a0:	1b9b      	subs	r3, r3, r6
 80004a2:	b289      	uxth	r1, r1
 80004a4:	fbb3 f6f7 	udiv	r6, r3, r7
 80004a8:	fb07 3316 	mls	r3, r7, r6, r3
 80004ac:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004b0:	fb06 f30e 	mul.w	r3, r6, lr
 80004b4:	428b      	cmp	r3, r1
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x28a>
 80004b8:	eb1c 0101 	adds.w	r1, ip, r1
 80004bc:	f106 38ff 	add.w	r8, r6, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 80004c2:	428b      	cmp	r3, r1
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 80004c6:	3e02      	subs	r6, #2
 80004c8:	4461      	add	r1, ip
 80004ca:	1ac9      	subs	r1, r1, r3
 80004cc:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0x104>
 80004d2:	462e      	mov	r6, r5
 80004d4:	4628      	mov	r0, r5
 80004d6:	e705      	b.n	80002e4 <__udivmoddi4+0xa4>
 80004d8:	4606      	mov	r6, r0
 80004da:	e6e3      	b.n	80002a4 <__udivmoddi4+0x64>
 80004dc:	4618      	mov	r0, r3
 80004de:	e6f8      	b.n	80002d2 <__udivmoddi4+0x92>
 80004e0:	454b      	cmp	r3, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f8>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ec:	3801      	subs	r0, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f8>
 80004f0:	4646      	mov	r6, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x28a>
 80004f4:	4620      	mov	r0, r4
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1e2>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x260>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b8>
 8000500:	3b02      	subs	r3, #2
 8000502:	4461      	add	r1, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x12c>
 8000506:	4630      	mov	r0, r6
 8000508:	e709      	b.n	800031e <__udivmoddi4+0xde>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x156>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	b088      	sub	sp, #32
 8000518:	af02      	add	r7, sp, #8
    BaseType_t status;

    TaskHandle_t task1_handle;
    TaskHandle_t task2_handle;

    status = xTaskCreate( task1_handler,
 800051a:	f107 0308 	add.w	r3, r7, #8
 800051e:	9301      	str	r3, [sp, #4]
 8000520:	2302      	movs	r3, #2
 8000522:	9300      	str	r3, [sp, #0]
 8000524:	4b1a      	ldr	r3, [pc, #104]	; (8000590 <main+0x7c>)
 8000526:	22c8      	movs	r2, #200	; 0xc8
 8000528:	491a      	ldr	r1, [pc, #104]	; (8000594 <main+0x80>)
 800052a:	481b      	ldr	r0, [pc, #108]	; (8000598 <main+0x84>)
 800052c:	f001 fe07 	bl	800213e <xTaskCreate>
 8000530:	6178      	str	r0, [r7, #20]
                            200, /* 800 bytes */
                            "Hello World from task 1",
                            2,
							&task1_handle);

    configASSERT(status == pdPASS);
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	2b01      	cmp	r3, #1
 8000536:	d00a      	beq.n	800054e <main+0x3a>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8000538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800053c:	f383 8811 	msr	BASEPRI, r3
 8000540:	f3bf 8f6f 	isb	sy
 8000544:	f3bf 8f4f 	dsb	sy
 8000548:	613b      	str	r3, [r7, #16]
            "	msr basepri, %0											\n"\
            "	isb														\n"\
            "	dsb														\n"\
            : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
        );
    }
 800054a:	bf00      	nop
 800054c:	e7fe      	b.n	800054c <main+0x38>
    status = xTaskCreate( task2_handler,
 800054e:	1d3b      	adds	r3, r7, #4
 8000550:	9301      	str	r3, [sp, #4]
 8000552:	2303      	movs	r3, #3
 8000554:	9300      	str	r3, [sp, #0]
 8000556:	4b11      	ldr	r3, [pc, #68]	; (800059c <main+0x88>)
 8000558:	22c8      	movs	r2, #200	; 0xc8
 800055a:	4911      	ldr	r1, [pc, #68]	; (80005a0 <main+0x8c>)
 800055c:	4811      	ldr	r0, [pc, #68]	; (80005a4 <main+0x90>)
 800055e:	f001 fdee 	bl	800213e <xTaskCreate>
 8000562:	6178      	str	r0, [r7, #20]
                            200, /* 800 bytes */
                            "Hello World from task 2",
                            3,
							&task2_handle);

    configASSERT(status == pdPASS);
 8000564:	697b      	ldr	r3, [r7, #20]
 8000566:	2b01      	cmp	r3, #1
 8000568:	d00a      	beq.n	8000580 <main+0x6c>
        __asm volatile
 800056a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800056e:	f383 8811 	msr	BASEPRI, r3
 8000572:	f3bf 8f6f 	isb	sy
 8000576:	f3bf 8f4f 	dsb	sy
 800057a:	60fb      	str	r3, [r7, #12]
    }
 800057c:	bf00      	nop
 800057e:	e7fe      	b.n	800057e <main+0x6a>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000580:	f000 fa2a 	bl	80009d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000584:	f000 f810 	bl	80005a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000588:	f000 f87c 	bl	8000684 <MX_GPIO_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800058c:	e7fe      	b.n	800058c <main+0x78>
 800058e:	bf00      	nop
 8000590:	080030a8 	.word	0x080030a8
 8000594:	080030c0 	.word	0x080030c0
 8000598:	08000781 	.word	0x08000781
 800059c:	080030c8 	.word	0x080030c8
 80005a0:	080030e0 	.word	0x080030e0
 80005a4:	08000795 	.word	0x08000795

080005a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b094      	sub	sp, #80	; 0x50
 80005ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005ae:	f107 031c 	add.w	r3, r7, #28
 80005b2:	2234      	movs	r2, #52	; 0x34
 80005b4:	2100      	movs	r1, #0
 80005b6:	4618      	mov	r0, r3
 80005b8:	f002 fd62 	bl	8003080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005bc:	f107 0308 	add.w	r3, r7, #8
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
 80005c4:	605a      	str	r2, [r3, #4]
 80005c6:	609a      	str	r2, [r3, #8]
 80005c8:	60da      	str	r2, [r3, #12]
 80005ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b2a      	ldr	r3, [pc, #168]	; (800067c <SystemClock_Config+0xd4>)
 80005d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d4:	4a29      	ldr	r2, [pc, #164]	; (800067c <SystemClock_Config+0xd4>)
 80005d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005da:	6413      	str	r3, [r2, #64]	; 0x40
 80005dc:	4b27      	ldr	r3, [pc, #156]	; (800067c <SystemClock_Config+0xd4>)
 80005de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005e8:	2300      	movs	r3, #0
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	4b24      	ldr	r3, [pc, #144]	; (8000680 <SystemClock_Config+0xd8>)
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005f4:	4a22      	ldr	r2, [pc, #136]	; (8000680 <SystemClock_Config+0xd8>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b20      	ldr	r3, [pc, #128]	; (8000680 <SystemClock_Config+0xd8>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000604:	603b      	str	r3, [r7, #0]
 8000606:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800061c:	2310      	movs	r3, #16
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000620:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000624:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000626:	2304      	movs	r3, #4
 8000628:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800062a:	2302      	movs	r3, #2
 800062c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800062e:	2302      	movs	r3, #2
 8000630:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000632:	f107 031c 	add.w	r3, r7, #28
 8000636:	4618      	mov	r0, r3
 8000638:	f001 f808 	bl	800164c <HAL_RCC_OscConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000642:	f000 f8c3 	bl	80007cc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000646:	230f      	movs	r3, #15
 8000648:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800064a:	2302      	movs	r3, #2
 800064c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800064e:	2300      	movs	r3, #0
 8000650:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000652:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000656:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065c:	f107 0308 	add.w	r3, r7, #8
 8000660:	2102      	movs	r1, #2
 8000662:	4618      	mov	r0, r3
 8000664:	f000 fc8a 	bl	8000f7c <HAL_RCC_ClockConfig>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d001      	beq.n	8000672 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800066e:	f000 f8ad 	bl	80007cc <Error_Handler>
  }
}
 8000672:	bf00      	nop
 8000674:	3750      	adds	r7, #80	; 0x50
 8000676:	46bd      	mov	sp, r7
 8000678:	bd80      	pop	{r7, pc}
 800067a:	bf00      	nop
 800067c:	40023800 	.word	0x40023800
 8000680:	40007000 	.word	0x40007000

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b08a      	sub	sp, #40	; 0x28
 8000688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	f107 0314 	add.w	r3, r7, #20
 800068e:	2200      	movs	r2, #0
 8000690:	601a      	str	r2, [r3, #0]
 8000692:	605a      	str	r2, [r3, #4]
 8000694:	609a      	str	r2, [r3, #8]
 8000696:	60da      	str	r2, [r3, #12]
 8000698:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	613b      	str	r3, [r7, #16]
 800069e:	4b35      	ldr	r3, [pc, #212]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a2:	4a34      	ldr	r2, [pc, #208]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006a4:	f043 0304 	orr.w	r3, r3, #4
 80006a8:	6313      	str	r3, [r2, #48]	; 0x30
 80006aa:	4b32      	ldr	r3, [pc, #200]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	f003 0304 	and.w	r3, r3, #4
 80006b2:	613b      	str	r3, [r7, #16]
 80006b4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60fb      	str	r3, [r7, #12]
 80006ba:	4b2e      	ldr	r3, [pc, #184]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006be:	4a2d      	ldr	r2, [pc, #180]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80006c4:	6313      	str	r3, [r2, #48]	; 0x30
 80006c6:	4b2b      	ldr	r3, [pc, #172]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	60fb      	str	r3, [r7, #12]
 80006d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	60bb      	str	r3, [r7, #8]
 80006d6:	4b27      	ldr	r3, [pc, #156]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006da:	4a26      	ldr	r2, [pc, #152]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006dc:	f043 0301 	orr.w	r3, r3, #1
 80006e0:	6313      	str	r3, [r2, #48]	; 0x30
 80006e2:	4b24      	ldr	r3, [pc, #144]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e6:	f003 0301 	and.w	r3, r3, #1
 80006ea:	60bb      	str	r3, [r7, #8]
 80006ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	4b20      	ldr	r3, [pc, #128]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f6:	4a1f      	ldr	r2, [pc, #124]	; (8000774 <MX_GPIO_Init+0xf0>)
 80006f8:	f043 0302 	orr.w	r3, r3, #2
 80006fc:	6313      	str	r3, [r2, #48]	; 0x30
 80006fe:	4b1d      	ldr	r3, [pc, #116]	; (8000774 <MX_GPIO_Init+0xf0>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	f003 0302 	and.w	r3, r3, #2
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070a:	2200      	movs	r2, #0
 800070c:	2120      	movs	r1, #32
 800070e:	481a      	ldr	r0, [pc, #104]	; (8000778 <MX_GPIO_Init+0xf4>)
 8000710:	f000 fc1a 	bl	8000f48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000714:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000718:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800071a:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800071e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0314 	add.w	r3, r7, #20
 8000728:	4619      	mov	r1, r3
 800072a:	4814      	ldr	r0, [pc, #80]	; (800077c <MX_GPIO_Init+0xf8>)
 800072c:	f000 fa78 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000730:	230c      	movs	r3, #12
 8000732:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000734:	2302      	movs	r3, #2
 8000736:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800073c:	2303      	movs	r3, #3
 800073e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000740:	2307      	movs	r3, #7
 8000742:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000744:	f107 0314 	add.w	r3, r7, #20
 8000748:	4619      	mov	r1, r3
 800074a:	480b      	ldr	r0, [pc, #44]	; (8000778 <MX_GPIO_Init+0xf4>)
 800074c:	f000 fa68 	bl	8000c20 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000750:	2320      	movs	r3, #32
 8000752:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000754:	2301      	movs	r3, #1
 8000756:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000758:	2300      	movs	r3, #0
 800075a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800075c:	2300      	movs	r3, #0
 800075e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	4619      	mov	r1, r3
 8000766:	4804      	ldr	r0, [pc, #16]	; (8000778 <MX_GPIO_Init+0xf4>)
 8000768:	f000 fa5a 	bl	8000c20 <HAL_GPIO_Init>

}
 800076c:	bf00      	nop
 800076e:	3728      	adds	r7, #40	; 0x28
 8000770:	46bd      	mov	sp, r7
 8000772:	bd80      	pop	{r7, pc}
 8000774:	40023800 	.word	0x40023800
 8000778:	40020000 	.word	0x40020000
 800077c:	40020800 	.word	0x40020800

08000780 <task1_handler>:

/* USER CODE BEGIN 4 */
void task1_handler(void* param){}
 8000780:	b480      	push	{r7}
 8000782:	b083      	sub	sp, #12
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <task2_handler>:
void task2_handler(void* param){}
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	6078      	str	r0, [r7, #4]
 800079c:	bf00      	nop
 800079e:	370c      	adds	r7, #12
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b082      	sub	sp, #8
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a04      	ldr	r2, [pc, #16]	; (80007c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d101      	bne.n	80007be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ba:	f000 f92f 	bl	8000a1c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007be:	bf00      	nop
 80007c0:	3708      	adds	r7, #8
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
 80007c6:	bf00      	nop
 80007c8:	40001000 	.word	0x40001000

080007cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007d0:	b672      	cpsid	i
}
 80007d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007d4:	e7fe      	b.n	80007d4 <Error_Handler+0x8>
	...

080007d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	4b10      	ldr	r3, [pc, #64]	; (8000824 <HAL_MspInit+0x4c>)
 80007e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007e6:	4a0f      	ldr	r2, [pc, #60]	; (8000824 <HAL_MspInit+0x4c>)
 80007e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007ec:	6453      	str	r3, [r2, #68]	; 0x44
 80007ee:	4b0d      	ldr	r3, [pc, #52]	; (8000824 <HAL_MspInit+0x4c>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007f6:	607b      	str	r3, [r7, #4]
 80007f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	603b      	str	r3, [r7, #0]
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_MspInit+0x4c>)
 8000800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000802:	4a08      	ldr	r2, [pc, #32]	; (8000824 <HAL_MspInit+0x4c>)
 8000804:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000808:	6413      	str	r3, [r2, #64]	; 0x40
 800080a:	4b06      	ldr	r3, [pc, #24]	; (8000824 <HAL_MspInit+0x4c>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000812:	603b      	str	r3, [r7, #0]
 8000814:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000816:	bf00      	nop
 8000818:	370c      	adds	r7, #12
 800081a:	46bd      	mov	sp, r7
 800081c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000820:	4770      	bx	lr
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08e      	sub	sp, #56	; 0x38
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000838:	2300      	movs	r3, #0
 800083a:	60fb      	str	r3, [r7, #12]
 800083c:	4b33      	ldr	r3, [pc, #204]	; (800090c <HAL_InitTick+0xe4>)
 800083e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000840:	4a32      	ldr	r2, [pc, #200]	; (800090c <HAL_InitTick+0xe4>)
 8000842:	f043 0310 	orr.w	r3, r3, #16
 8000846:	6413      	str	r3, [r2, #64]	; 0x40
 8000848:	4b30      	ldr	r3, [pc, #192]	; (800090c <HAL_InitTick+0xe4>)
 800084a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084c:	f003 0310 	and.w	r3, r3, #16
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000854:	f107 0210 	add.w	r2, r7, #16
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f000 fc92 	bl	8001188 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000864:	6a3b      	ldr	r3, [r7, #32]
 8000866:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800086a:	2b00      	cmp	r3, #0
 800086c:	d103      	bne.n	8000876 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800086e:	f000 fc77 	bl	8001160 <HAL_RCC_GetPCLK1Freq>
 8000872:	6378      	str	r0, [r7, #52]	; 0x34
 8000874:	e004      	b.n	8000880 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000876:	f000 fc73 	bl	8001160 <HAL_RCC_GetPCLK1Freq>
 800087a:	4603      	mov	r3, r0
 800087c:	005b      	lsls	r3, r3, #1
 800087e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000880:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000882:	4a23      	ldr	r2, [pc, #140]	; (8000910 <HAL_InitTick+0xe8>)
 8000884:	fba2 2303 	umull	r2, r3, r2, r3
 8000888:	0c9b      	lsrs	r3, r3, #18
 800088a:	3b01      	subs	r3, #1
 800088c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800088e:	4b21      	ldr	r3, [pc, #132]	; (8000914 <HAL_InitTick+0xec>)
 8000890:	4a21      	ldr	r2, [pc, #132]	; (8000918 <HAL_InitTick+0xf0>)
 8000892:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000894:	4b1f      	ldr	r3, [pc, #124]	; (8000914 <HAL_InitTick+0xec>)
 8000896:	f240 32e7 	movw	r2, #999	; 0x3e7
 800089a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800089c:	4a1d      	ldr	r2, [pc, #116]	; (8000914 <HAL_InitTick+0xec>)
 800089e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008a0:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008a2:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <HAL_InitTick+0xec>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a8:	4b1a      	ldr	r3, [pc, #104]	; (8000914 <HAL_InitTick+0xec>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ae:	4b19      	ldr	r3, [pc, #100]	; (8000914 <HAL_InitTick+0xec>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80008b4:	4817      	ldr	r0, [pc, #92]	; (8000914 <HAL_InitTick+0xec>)
 80008b6:	f001 f967 	bl	8001b88 <HAL_TIM_Base_Init>
 80008ba:	4603      	mov	r3, r0
 80008bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008c0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d11b      	bne.n	8000900 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008c8:	4812      	ldr	r0, [pc, #72]	; (8000914 <HAL_InitTick+0xec>)
 80008ca:	f001 f9b7 	bl	8001c3c <HAL_TIM_Base_Start_IT>
 80008ce:	4603      	mov	r3, r0
 80008d0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008d4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d111      	bne.n	8000900 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008dc:	2036      	movs	r0, #54	; 0x36
 80008de:	f000 f991 	bl	8000c04 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e2:	687b      	ldr	r3, [r7, #4]
 80008e4:	2b0f      	cmp	r3, #15
 80008e6:	d808      	bhi.n	80008fa <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80008e8:	2200      	movs	r2, #0
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	2036      	movs	r0, #54	; 0x36
 80008ee:	f000 f96d 	bl	8000bcc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008f2:	4a0a      	ldr	r2, [pc, #40]	; (800091c <HAL_InitTick+0xf4>)
 80008f4:	687b      	ldr	r3, [r7, #4]
 80008f6:	6013      	str	r3, [r2, #0]
 80008f8:	e002      	b.n	8000900 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80008fa:	2301      	movs	r3, #1
 80008fc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000900:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000904:	4618      	mov	r0, r3
 8000906:	3738      	adds	r7, #56	; 0x38
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	40023800 	.word	0x40023800
 8000910:	431bde83 	.word	0x431bde83
 8000914:	2000002c 	.word	0x2000002c
 8000918:	40001000 	.word	0x40001000
 800091c:	20000004 	.word	0x20000004

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <MemManage_Handler+0x4>

08000932 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <UsageFault_Handler+0x4>

0800093e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <TIM6_DAC_IRQHandler+0x10>)
 8000952:	f001 f9e3 	bl	8001d1c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	2000002c 	.word	0x2000002c

08000960 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000988:	480d      	ldr	r0, [pc, #52]	; (80009c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800098a:	490e      	ldr	r1, [pc, #56]	; (80009c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800098c:	4a0e      	ldr	r2, [pc, #56]	; (80009c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800098e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000990:	e002      	b.n	8000998 <LoopCopyDataInit>

08000992 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000992:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000994:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000996:	3304      	adds	r3, #4

08000998 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000998:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800099c:	d3f9      	bcc.n	8000992 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009a0:	4c0b      	ldr	r4, [pc, #44]	; (80009d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a4:	e001      	b.n	80009aa <LoopFillZerobss>

080009a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a8:	3204      	adds	r2, #4

080009aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ac:	d3fb      	bcc.n	80009a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009ae:	f7ff ffd7 	bl	8000960 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009b2:	f002 fb41 	bl	8003038 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009b6:	f7ff fdad 	bl	8000514 <main>
  bx  lr    
 80009ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80009bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80009c8:	08003110 	.word	0x08003110
  ldr r2, =_sbss
 80009cc:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80009d0:	20012d94 	.word	0x20012d94

080009d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC_IRQHandler>
	...

080009d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d8:	b580      	push	{r7, lr}
 80009da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009dc:	4b0e      	ldr	r3, [pc, #56]	; (8000a18 <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0d      	ldr	r2, [pc, #52]	; (8000a18 <HAL_Init+0x40>)
 80009e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009e8:	4b0b      	ldr	r3, [pc, #44]	; (8000a18 <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <HAL_Init+0x40>)
 80009ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009f4:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <HAL_Init+0x40>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_Init+0x40>)
 80009fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a00:	2003      	movs	r0, #3
 8000a02:	f000 f8d8 	bl	8000bb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a06:	2000      	movs	r0, #0
 8000a08:	f7ff ff0e 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a0c:	f7ff fee4 	bl	80007d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a10:	2300      	movs	r3, #0
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	bd80      	pop	{r7, pc}
 8000a16:	bf00      	nop
 8000a18:	40023c00 	.word	0x40023c00

08000a1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a1c:	b480      	push	{r7}
 8000a1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a20:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_IncTick+0x20>)
 8000a22:	781b      	ldrb	r3, [r3, #0]
 8000a24:	461a      	mov	r2, r3
 8000a26:	4b06      	ldr	r3, [pc, #24]	; (8000a40 <HAL_IncTick+0x24>)
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4413      	add	r3, r2
 8000a2c:	4a04      	ldr	r2, [pc, #16]	; (8000a40 <HAL_IncTick+0x24>)
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008
 8000a40:	20000074 	.word	0x20000074

08000a44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
  return uwTick;
 8000a48:	4b03      	ldr	r3, [pc, #12]	; (8000a58 <HAL_GetTick+0x14>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	20000074 	.word	0x20000074

08000a5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db0b      	blt.n	8000aea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 021f 	and.w	r2, r3, #31
 8000ad8:	4907      	ldr	r1, [pc, #28]	; (8000af8 <__NVIC_EnableIRQ+0x38>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	095b      	lsrs	r3, r3, #5
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100

08000afc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	; (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f1c3 0307 	rsb	r3, r3, #7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf28      	it	cs
 8000b6e:	2304      	movcs	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3304      	adds	r3, #4
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d902      	bls.n	8000b80 <NVIC_EncodePriority+0x30>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3b03      	subs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <NVIC_EncodePriority+0x32>
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43d9      	mvns	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	4313      	orrs	r3, r2
         );
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	; 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff4c 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bde:	f7ff ff61 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000be2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	68b9      	ldr	r1, [r7, #8]
 8000be8:	6978      	ldr	r0, [r7, #20]
 8000bea:	f7ff ffb1 	bl	8000b50 <NVIC_EncodePriority>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ff80 	bl	8000afc <__NVIC_SetPriority>
}
 8000bfc:	bf00      	nop
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff54 	bl	8000ac0 <__NVIC_EnableIRQ>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b089      	sub	sp, #36	; 0x24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
 8000c28:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c32:	2300      	movs	r3, #0
 8000c34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c36:	2300      	movs	r3, #0
 8000c38:	61fb      	str	r3, [r7, #28]
 8000c3a:	e165      	b.n	8000f08 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c3c:	2201      	movs	r2, #1
 8000c3e:	69fb      	ldr	r3, [r7, #28]
 8000c40:	fa02 f303 	lsl.w	r3, r2, r3
 8000c44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	4013      	ands	r3, r2
 8000c4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c50:	693a      	ldr	r2, [r7, #16]
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	429a      	cmp	r2, r3
 8000c56:	f040 8154 	bne.w	8000f02 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
 8000c62:	2b01      	cmp	r3, #1
 8000c64:	d005      	beq.n	8000c72 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	685b      	ldr	r3, [r3, #4]
 8000c6a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c6e:	2b02      	cmp	r3, #2
 8000c70:	d130      	bne.n	8000cd4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	689b      	ldr	r3, [r3, #8]
 8000c76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c78:	69fb      	ldr	r3, [r7, #28]
 8000c7a:	005b      	lsls	r3, r3, #1
 8000c7c:	2203      	movs	r2, #3
 8000c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c82:	43db      	mvns	r3, r3
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	4013      	ands	r3, r2
 8000c88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c8a:	683b      	ldr	r3, [r7, #0]
 8000c8c:	68da      	ldr	r2, [r3, #12]
 8000c8e:	69fb      	ldr	r3, [r7, #28]
 8000c90:	005b      	lsls	r3, r3, #1
 8000c92:	fa02 f303 	lsl.w	r3, r2, r3
 8000c96:	69ba      	ldr	r2, [r7, #24]
 8000c98:	4313      	orrs	r3, r2
 8000c9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	69ba      	ldr	r2, [r7, #24]
 8000ca0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000ca8:	2201      	movs	r2, #1
 8000caa:	69fb      	ldr	r3, [r7, #28]
 8000cac:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb0:	43db      	mvns	r3, r3
 8000cb2:	69ba      	ldr	r2, [r7, #24]
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cb8:	683b      	ldr	r3, [r7, #0]
 8000cba:	685b      	ldr	r3, [r3, #4]
 8000cbc:	091b      	lsrs	r3, r3, #4
 8000cbe:	f003 0201 	and.w	r2, r3, #1
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cc8:	69ba      	ldr	r2, [r7, #24]
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	69ba      	ldr	r2, [r7, #24]
 8000cd2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	f003 0303 	and.w	r3, r3, #3
 8000cdc:	2b03      	cmp	r3, #3
 8000cde:	d017      	beq.n	8000d10 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	68db      	ldr	r3, [r3, #12]
 8000ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	005b      	lsls	r3, r3, #1
 8000cea:	2203      	movs	r2, #3
 8000cec:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf0:	43db      	mvns	r3, r3
 8000cf2:	69ba      	ldr	r2, [r7, #24]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cf8:	683b      	ldr	r3, [r7, #0]
 8000cfa:	689a      	ldr	r2, [r3, #8]
 8000cfc:	69fb      	ldr	r3, [r7, #28]
 8000cfe:	005b      	lsls	r3, r3, #1
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	69ba      	ldr	r2, [r7, #24]
 8000d06:	4313      	orrs	r3, r2
 8000d08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	69ba      	ldr	r2, [r7, #24]
 8000d0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 0303 	and.w	r3, r3, #3
 8000d18:	2b02      	cmp	r3, #2
 8000d1a:	d123      	bne.n	8000d64 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d1c:	69fb      	ldr	r3, [r7, #28]
 8000d1e:	08da      	lsrs	r2, r3, #3
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	3208      	adds	r2, #8
 8000d24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d28:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d2a:	69fb      	ldr	r3, [r7, #28]
 8000d2c:	f003 0307 	and.w	r3, r3, #7
 8000d30:	009b      	lsls	r3, r3, #2
 8000d32:	220f      	movs	r2, #15
 8000d34:	fa02 f303 	lsl.w	r3, r2, r3
 8000d38:	43db      	mvns	r3, r3
 8000d3a:	69ba      	ldr	r2, [r7, #24]
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d40:	683b      	ldr	r3, [r7, #0]
 8000d42:	691a      	ldr	r2, [r3, #16]
 8000d44:	69fb      	ldr	r3, [r7, #28]
 8000d46:	f003 0307 	and.w	r3, r3, #7
 8000d4a:	009b      	lsls	r3, r3, #2
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	69ba      	ldr	r2, [r7, #24]
 8000d52:	4313      	orrs	r3, r2
 8000d54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	08da      	lsrs	r2, r3, #3
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	3208      	adds	r2, #8
 8000d5e:	69b9      	ldr	r1, [r7, #24]
 8000d60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d6a:	69fb      	ldr	r3, [r7, #28]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	2203      	movs	r2, #3
 8000d70:	fa02 f303 	lsl.w	r3, r2, r3
 8000d74:	43db      	mvns	r3, r3
 8000d76:	69ba      	ldr	r2, [r7, #24]
 8000d78:	4013      	ands	r3, r2
 8000d7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d7c:	683b      	ldr	r3, [r7, #0]
 8000d7e:	685b      	ldr	r3, [r3, #4]
 8000d80:	f003 0203 	and.w	r2, r3, #3
 8000d84:	69fb      	ldr	r3, [r7, #28]
 8000d86:	005b      	lsls	r3, r3, #1
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	69ba      	ldr	r2, [r7, #24]
 8000d8e:	4313      	orrs	r3, r2
 8000d90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	69ba      	ldr	r2, [r7, #24]
 8000d96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	685b      	ldr	r3, [r3, #4]
 8000d9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	f000 80ae 	beq.w	8000f02 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000da6:	2300      	movs	r3, #0
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	4b5d      	ldr	r3, [pc, #372]	; (8000f20 <HAL_GPIO_Init+0x300>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	4a5c      	ldr	r2, [pc, #368]	; (8000f20 <HAL_GPIO_Init+0x300>)
 8000db0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000db4:	6453      	str	r3, [r2, #68]	; 0x44
 8000db6:	4b5a      	ldr	r3, [pc, #360]	; (8000f20 <HAL_GPIO_Init+0x300>)
 8000db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dbe:	60fb      	str	r3, [r7, #12]
 8000dc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000dc2:	4a58      	ldr	r2, [pc, #352]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	089b      	lsrs	r3, r3, #2
 8000dc8:	3302      	adds	r3, #2
 8000dca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dd0:	69fb      	ldr	r3, [r7, #28]
 8000dd2:	f003 0303 	and.w	r3, r3, #3
 8000dd6:	009b      	lsls	r3, r3, #2
 8000dd8:	220f      	movs	r2, #15
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	43db      	mvns	r3, r3
 8000de0:	69ba      	ldr	r2, [r7, #24]
 8000de2:	4013      	ands	r3, r2
 8000de4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4a4f      	ldr	r2, [pc, #316]	; (8000f28 <HAL_GPIO_Init+0x308>)
 8000dea:	4293      	cmp	r3, r2
 8000dec:	d025      	beq.n	8000e3a <HAL_GPIO_Init+0x21a>
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	4a4e      	ldr	r2, [pc, #312]	; (8000f2c <HAL_GPIO_Init+0x30c>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d01f      	beq.n	8000e36 <HAL_GPIO_Init+0x216>
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a4d      	ldr	r2, [pc, #308]	; (8000f30 <HAL_GPIO_Init+0x310>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d019      	beq.n	8000e32 <HAL_GPIO_Init+0x212>
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4a4c      	ldr	r2, [pc, #304]	; (8000f34 <HAL_GPIO_Init+0x314>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d013      	beq.n	8000e2e <HAL_GPIO_Init+0x20e>
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	4a4b      	ldr	r2, [pc, #300]	; (8000f38 <HAL_GPIO_Init+0x318>)
 8000e0a:	4293      	cmp	r3, r2
 8000e0c:	d00d      	beq.n	8000e2a <HAL_GPIO_Init+0x20a>
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	4a4a      	ldr	r2, [pc, #296]	; (8000f3c <HAL_GPIO_Init+0x31c>)
 8000e12:	4293      	cmp	r3, r2
 8000e14:	d007      	beq.n	8000e26 <HAL_GPIO_Init+0x206>
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	4a49      	ldr	r2, [pc, #292]	; (8000f40 <HAL_GPIO_Init+0x320>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d101      	bne.n	8000e22 <HAL_GPIO_Init+0x202>
 8000e1e:	2306      	movs	r3, #6
 8000e20:	e00c      	b.n	8000e3c <HAL_GPIO_Init+0x21c>
 8000e22:	2307      	movs	r3, #7
 8000e24:	e00a      	b.n	8000e3c <HAL_GPIO_Init+0x21c>
 8000e26:	2305      	movs	r3, #5
 8000e28:	e008      	b.n	8000e3c <HAL_GPIO_Init+0x21c>
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x21c>
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e004      	b.n	8000e3c <HAL_GPIO_Init+0x21c>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_Init+0x21c>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x21c>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	69fa      	ldr	r2, [r7, #28]
 8000e3e:	f002 0203 	and.w	r2, r2, #3
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	4093      	lsls	r3, r2
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e4c:	4935      	ldr	r1, [pc, #212]	; (8000f24 <HAL_GPIO_Init+0x304>)
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e5a:	4b3a      	ldr	r3, [pc, #232]	; (8000f44 <HAL_GPIO_Init+0x324>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e7e:	4a31      	ldr	r2, [pc, #196]	; (8000f44 <HAL_GPIO_Init+0x324>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e84:	4b2f      	ldr	r3, [pc, #188]	; (8000f44 <HAL_GPIO_Init+0x324>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea8:	4a26      	ldr	r2, [pc, #152]	; (8000f44 <HAL_GPIO_Init+0x324>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eae:	4b25      	ldr	r3, [pc, #148]	; (8000f44 <HAL_GPIO_Init+0x324>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ed2:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <HAL_GPIO_Init+0x324>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed8:	4b1a      	ldr	r3, [pc, #104]	; (8000f44 <HAL_GPIO_Init+0x324>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000efc:	4a11      	ldr	r2, [pc, #68]	; (8000f44 <HAL_GPIO_Init+0x324>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	f67f ae96 	bls.w	8000c3c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40013800 	.word	0x40013800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40021400 	.word	0x40021400
 8000f40:	40021800 	.word	0x40021800
 8000f44:	40013c00 	.word	0x40013c00

08000f48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	460b      	mov	r3, r1
 8000f52:	807b      	strh	r3, [r7, #2]
 8000f54:	4613      	mov	r3, r2
 8000f56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000f58:	787b      	ldrb	r3, [r7, #1]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d003      	beq.n	8000f66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000f5e:	887a      	ldrh	r2, [r7, #2]
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000f64:	e003      	b.n	8000f6e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000f66:	887b      	ldrh	r3, [r7, #2]
 8000f68:	041a      	lsls	r2, r3, #16
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	619a      	str	r2, [r3, #24]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
	...

08000f7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b084      	sub	sp, #16
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
 8000f84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d101      	bne.n	8000f90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e0cc      	b.n	800112a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000f90:	4b68      	ldr	r3, [pc, #416]	; (8001134 <HAL_RCC_ClockConfig+0x1b8>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	f003 030f 	and.w	r3, r3, #15
 8000f98:	683a      	ldr	r2, [r7, #0]
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d90c      	bls.n	8000fb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000f9e:	4b65      	ldr	r3, [pc, #404]	; (8001134 <HAL_RCC_ClockConfig+0x1b8>)
 8000fa0:	683a      	ldr	r2, [r7, #0]
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000fa6:	4b63      	ldr	r3, [pc, #396]	; (8001134 <HAL_RCC_ClockConfig+0x1b8>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f003 030f 	and.w	r3, r3, #15
 8000fae:	683a      	ldr	r2, [r7, #0]
 8000fb0:	429a      	cmp	r2, r3
 8000fb2:	d001      	beq.n	8000fb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8000fb4:	2301      	movs	r3, #1
 8000fb6:	e0b8      	b.n	800112a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d020      	beq.n	8001006 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	f003 0304 	and.w	r3, r3, #4
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d005      	beq.n	8000fdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8000fd0:	4b59      	ldr	r3, [pc, #356]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	4a58      	ldr	r2, [pc, #352]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 8000fd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8000fda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f003 0308 	and.w	r3, r3, #8
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d005      	beq.n	8000ff4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8000fe8:	4b53      	ldr	r3, [pc, #332]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	4a52      	ldr	r2, [pc, #328]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 8000fee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8000ff2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ff4:	4b50      	ldr	r3, [pc, #320]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 8000ff6:	689b      	ldr	r3, [r3, #8]
 8000ff8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	494d      	ldr	r1, [pc, #308]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 8001002:	4313      	orrs	r3, r2
 8001004:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	d044      	beq.n	800109c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d107      	bne.n	800102a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800101a:	4b47      	ldr	r3, [pc, #284]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001022:	2b00      	cmp	r3, #0
 8001024:	d119      	bne.n	800105a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001026:	2301      	movs	r3, #1
 8001028:	e07f      	b.n	800112a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	685b      	ldr	r3, [r3, #4]
 800102e:	2b02      	cmp	r3, #2
 8001030:	d003      	beq.n	800103a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001036:	2b03      	cmp	r3, #3
 8001038:	d107      	bne.n	800104a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800103a:	4b3f      	ldr	r3, [pc, #252]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d109      	bne.n	800105a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001046:	2301      	movs	r3, #1
 8001048:	e06f      	b.n	800112a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800104a:	4b3b      	ldr	r3, [pc, #236]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	2b00      	cmp	r3, #0
 8001054:	d101      	bne.n	800105a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
 8001058:	e067      	b.n	800112a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800105a:	4b37      	ldr	r3, [pc, #220]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	f023 0203 	bic.w	r2, r3, #3
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	4934      	ldr	r1, [pc, #208]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 8001068:	4313      	orrs	r3, r2
 800106a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800106c:	f7ff fcea 	bl	8000a44 <HAL_GetTick>
 8001070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001072:	e00a      	b.n	800108a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001074:	f7ff fce6 	bl	8000a44 <HAL_GetTick>
 8001078:	4602      	mov	r2, r0
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	1ad3      	subs	r3, r2, r3
 800107e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001082:	4293      	cmp	r3, r2
 8001084:	d901      	bls.n	800108a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001086:	2303      	movs	r3, #3
 8001088:	e04f      	b.n	800112a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800108a:	4b2b      	ldr	r3, [pc, #172]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	f003 020c 	and.w	r2, r3, #12
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	009b      	lsls	r3, r3, #2
 8001098:	429a      	cmp	r2, r3
 800109a:	d1eb      	bne.n	8001074 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <HAL_RCC_ClockConfig+0x1b8>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 030f 	and.w	r3, r3, #15
 80010a4:	683a      	ldr	r2, [r7, #0]
 80010a6:	429a      	cmp	r2, r3
 80010a8:	d20c      	bcs.n	80010c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010aa:	4b22      	ldr	r3, [pc, #136]	; (8001134 <HAL_RCC_ClockConfig+0x1b8>)
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010b2:	4b20      	ldr	r3, [pc, #128]	; (8001134 <HAL_RCC_ClockConfig+0x1b8>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	f003 030f 	and.w	r3, r3, #15
 80010ba:	683a      	ldr	r2, [r7, #0]
 80010bc:	429a      	cmp	r2, r3
 80010be:	d001      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	e032      	b.n	800112a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0304 	and.w	r3, r3, #4
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d008      	beq.n	80010e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80010d0:	4b19      	ldr	r3, [pc, #100]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	4916      	ldr	r1, [pc, #88]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f003 0308 	and.w	r3, r3, #8
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d009      	beq.n	8001102 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80010ee:	4b12      	ldr	r3, [pc, #72]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	691b      	ldr	r3, [r3, #16]
 80010fa:	00db      	lsls	r3, r3, #3
 80010fc:	490e      	ldr	r1, [pc, #56]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001102:	f000 f873 	bl	80011ec <HAL_RCC_GetSysClockFreq>
 8001106:	4602      	mov	r2, r0
 8001108:	4b0b      	ldr	r3, [pc, #44]	; (8001138 <HAL_RCC_ClockConfig+0x1bc>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	091b      	lsrs	r3, r3, #4
 800110e:	f003 030f 	and.w	r3, r3, #15
 8001112:	490a      	ldr	r1, [pc, #40]	; (800113c <HAL_RCC_ClockConfig+0x1c0>)
 8001114:	5ccb      	ldrb	r3, [r1, r3]
 8001116:	fa22 f303 	lsr.w	r3, r2, r3
 800111a:	4a09      	ldr	r2, [pc, #36]	; (8001140 <HAL_RCC_ClockConfig+0x1c4>)
 800111c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800111e:	4b09      	ldr	r3, [pc, #36]	; (8001144 <HAL_RCC_ClockConfig+0x1c8>)
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	4618      	mov	r0, r3
 8001124:	f7ff fb80 	bl	8000828 <HAL_InitTick>

  return HAL_OK;
 8001128:	2300      	movs	r3, #0
}
 800112a:	4618      	mov	r0, r3
 800112c:	3710      	adds	r7, #16
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023c00 	.word	0x40023c00
 8001138:	40023800 	.word	0x40023800
 800113c:	080030e8 	.word	0x080030e8
 8001140:	20000000 	.word	0x20000000
 8001144:	20000004 	.word	0x20000004

08001148 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800114c:	4b03      	ldr	r3, [pc, #12]	; (800115c <HAL_RCC_GetHCLKFreq+0x14>)
 800114e:	681b      	ldr	r3, [r3, #0]
}
 8001150:	4618      	mov	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	20000000 	.word	0x20000000

08001160 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001164:	f7ff fff0 	bl	8001148 <HAL_RCC_GetHCLKFreq>
 8001168:	4602      	mov	r2, r0
 800116a:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_RCC_GetPCLK1Freq+0x20>)
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	0a9b      	lsrs	r3, r3, #10
 8001170:	f003 0307 	and.w	r3, r3, #7
 8001174:	4903      	ldr	r1, [pc, #12]	; (8001184 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001176:	5ccb      	ldrb	r3, [r1, r3]
 8001178:	fa22 f303 	lsr.w	r3, r2, r3
}
 800117c:	4618      	mov	r0, r3
 800117e:	bd80      	pop	{r7, pc}
 8001180:	40023800 	.word	0x40023800
 8001184:	080030f8 	.word	0x080030f8

08001188 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	220f      	movs	r2, #15
 8001196:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001198:	4b12      	ldr	r3, [pc, #72]	; (80011e4 <HAL_RCC_GetClockConfig+0x5c>)
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 0203 	and.w	r2, r3, #3
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80011a4:	4b0f      	ldr	r3, [pc, #60]	; (80011e4 <HAL_RCC_GetClockConfig+0x5c>)
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80011b0:	4b0c      	ldr	r3, [pc, #48]	; (80011e4 <HAL_RCC_GetClockConfig+0x5c>)
 80011b2:	689b      	ldr	r3, [r3, #8]
 80011b4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80011bc:	4b09      	ldr	r3, [pc, #36]	; (80011e4 <HAL_RCC_GetClockConfig+0x5c>)
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	08db      	lsrs	r3, r3, #3
 80011c2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80011ca:	4b07      	ldr	r3, [pc, #28]	; (80011e8 <HAL_RCC_GetClockConfig+0x60>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 020f 	and.w	r2, r3, #15
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	601a      	str	r2, [r3, #0]
}
 80011d6:	bf00      	nop
 80011d8:	370c      	adds	r7, #12
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40023800 	.word	0x40023800
 80011e8:	40023c00 	.word	0x40023c00

080011ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80011ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011f0:	b0ae      	sub	sp, #184	; 0xb8
 80011f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80011f4:	2300      	movs	r3, #0
 80011f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 8001206:	2300      	movs	r3, #0
 8001208:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800120c:	2300      	movs	r3, #0
 800120e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001212:	4bcb      	ldr	r3, [pc, #812]	; (8001540 <HAL_RCC_GetSysClockFreq+0x354>)
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 030c 	and.w	r3, r3, #12
 800121a:	2b0c      	cmp	r3, #12
 800121c:	f200 8206 	bhi.w	800162c <HAL_RCC_GetSysClockFreq+0x440>
 8001220:	a201      	add	r2, pc, #4	; (adr r2, 8001228 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001226:	bf00      	nop
 8001228:	0800125d 	.word	0x0800125d
 800122c:	0800162d 	.word	0x0800162d
 8001230:	0800162d 	.word	0x0800162d
 8001234:	0800162d 	.word	0x0800162d
 8001238:	08001265 	.word	0x08001265
 800123c:	0800162d 	.word	0x0800162d
 8001240:	0800162d 	.word	0x0800162d
 8001244:	0800162d 	.word	0x0800162d
 8001248:	0800126d 	.word	0x0800126d
 800124c:	0800162d 	.word	0x0800162d
 8001250:	0800162d 	.word	0x0800162d
 8001254:	0800162d 	.word	0x0800162d
 8001258:	0800145d 	.word	0x0800145d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800125c:	4bb9      	ldr	r3, [pc, #740]	; (8001544 <HAL_RCC_GetSysClockFreq+0x358>)
 800125e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8001262:	e1e7      	b.n	8001634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001264:	4bb8      	ldr	r3, [pc, #736]	; (8001548 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001266:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800126a:	e1e3      	b.n	8001634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800126c:	4bb4      	ldr	r3, [pc, #720]	; (8001540 <HAL_RCC_GetSysClockFreq+0x354>)
 800126e:	685b      	ldr	r3, [r3, #4]
 8001270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001274:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001278:	4bb1      	ldr	r3, [pc, #708]	; (8001540 <HAL_RCC_GetSysClockFreq+0x354>)
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d071      	beq.n	8001368 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001284:	4bae      	ldr	r3, [pc, #696]	; (8001540 <HAL_RCC_GetSysClockFreq+0x354>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	099b      	lsrs	r3, r3, #6
 800128a:	2200      	movs	r2, #0
 800128c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8001290:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8001294:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8001298:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800129c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80012a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80012aa:	4622      	mov	r2, r4
 80012ac:	462b      	mov	r3, r5
 80012ae:	f04f 0000 	mov.w	r0, #0
 80012b2:	f04f 0100 	mov.w	r1, #0
 80012b6:	0159      	lsls	r1, r3, #5
 80012b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012bc:	0150      	lsls	r0, r2, #5
 80012be:	4602      	mov	r2, r0
 80012c0:	460b      	mov	r3, r1
 80012c2:	4621      	mov	r1, r4
 80012c4:	1a51      	subs	r1, r2, r1
 80012c6:	6439      	str	r1, [r7, #64]	; 0x40
 80012c8:	4629      	mov	r1, r5
 80012ca:	eb63 0301 	sbc.w	r3, r3, r1
 80012ce:	647b      	str	r3, [r7, #68]	; 0x44
 80012d0:	f04f 0200 	mov.w	r2, #0
 80012d4:	f04f 0300 	mov.w	r3, #0
 80012d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80012dc:	4649      	mov	r1, r9
 80012de:	018b      	lsls	r3, r1, #6
 80012e0:	4641      	mov	r1, r8
 80012e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012e6:	4641      	mov	r1, r8
 80012e8:	018a      	lsls	r2, r1, #6
 80012ea:	4641      	mov	r1, r8
 80012ec:	1a51      	subs	r1, r2, r1
 80012ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80012f0:	4649      	mov	r1, r9
 80012f2:	eb63 0301 	sbc.w	r3, r3, r1
 80012f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80012f8:	f04f 0200 	mov.w	r2, #0
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8001304:	4649      	mov	r1, r9
 8001306:	00cb      	lsls	r3, r1, #3
 8001308:	4641      	mov	r1, r8
 800130a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800130e:	4641      	mov	r1, r8
 8001310:	00ca      	lsls	r2, r1, #3
 8001312:	4610      	mov	r0, r2
 8001314:	4619      	mov	r1, r3
 8001316:	4603      	mov	r3, r0
 8001318:	4622      	mov	r2, r4
 800131a:	189b      	adds	r3, r3, r2
 800131c:	633b      	str	r3, [r7, #48]	; 0x30
 800131e:	462b      	mov	r3, r5
 8001320:	460a      	mov	r2, r1
 8001322:	eb42 0303 	adc.w	r3, r2, r3
 8001326:	637b      	str	r3, [r7, #52]	; 0x34
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	f04f 0300 	mov.w	r3, #0
 8001330:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001334:	4629      	mov	r1, r5
 8001336:	024b      	lsls	r3, r1, #9
 8001338:	4621      	mov	r1, r4
 800133a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800133e:	4621      	mov	r1, r4
 8001340:	024a      	lsls	r2, r1, #9
 8001342:	4610      	mov	r0, r2
 8001344:	4619      	mov	r1, r3
 8001346:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800134a:	2200      	movs	r2, #0
 800134c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8001350:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8001354:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8001358:	f7fe ff5a 	bl	8000210 <__aeabi_uldivmod>
 800135c:	4602      	mov	r2, r0
 800135e:	460b      	mov	r3, r1
 8001360:	4613      	mov	r3, r2
 8001362:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8001366:	e067      	b.n	8001438 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001368:	4b75      	ldr	r3, [pc, #468]	; (8001540 <HAL_RCC_GetSysClockFreq+0x354>)
 800136a:	685b      	ldr	r3, [r3, #4]
 800136c:	099b      	lsrs	r3, r3, #6
 800136e:	2200      	movs	r2, #0
 8001370:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001374:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001378:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800137c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001380:	67bb      	str	r3, [r7, #120]	; 0x78
 8001382:	2300      	movs	r3, #0
 8001384:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001386:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800138a:	4622      	mov	r2, r4
 800138c:	462b      	mov	r3, r5
 800138e:	f04f 0000 	mov.w	r0, #0
 8001392:	f04f 0100 	mov.w	r1, #0
 8001396:	0159      	lsls	r1, r3, #5
 8001398:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800139c:	0150      	lsls	r0, r2, #5
 800139e:	4602      	mov	r2, r0
 80013a0:	460b      	mov	r3, r1
 80013a2:	4621      	mov	r1, r4
 80013a4:	1a51      	subs	r1, r2, r1
 80013a6:	62b9      	str	r1, [r7, #40]	; 0x28
 80013a8:	4629      	mov	r1, r5
 80013aa:	eb63 0301 	sbc.w	r3, r3, r1
 80013ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80013b0:	f04f 0200 	mov.w	r2, #0
 80013b4:	f04f 0300 	mov.w	r3, #0
 80013b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 80013bc:	4649      	mov	r1, r9
 80013be:	018b      	lsls	r3, r1, #6
 80013c0:	4641      	mov	r1, r8
 80013c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80013c6:	4641      	mov	r1, r8
 80013c8:	018a      	lsls	r2, r1, #6
 80013ca:	4641      	mov	r1, r8
 80013cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80013d0:	4649      	mov	r1, r9
 80013d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80013d6:	f04f 0200 	mov.w	r2, #0
 80013da:	f04f 0300 	mov.w	r3, #0
 80013de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80013e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80013e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80013ea:	4692      	mov	sl, r2
 80013ec:	469b      	mov	fp, r3
 80013ee:	4623      	mov	r3, r4
 80013f0:	eb1a 0303 	adds.w	r3, sl, r3
 80013f4:	623b      	str	r3, [r7, #32]
 80013f6:	462b      	mov	r3, r5
 80013f8:	eb4b 0303 	adc.w	r3, fp, r3
 80013fc:	627b      	str	r3, [r7, #36]	; 0x24
 80013fe:	f04f 0200 	mov.w	r2, #0
 8001402:	f04f 0300 	mov.w	r3, #0
 8001406:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800140a:	4629      	mov	r1, r5
 800140c:	028b      	lsls	r3, r1, #10
 800140e:	4621      	mov	r1, r4
 8001410:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001414:	4621      	mov	r1, r4
 8001416:	028a      	lsls	r2, r1, #10
 8001418:	4610      	mov	r0, r2
 800141a:	4619      	mov	r1, r3
 800141c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001420:	2200      	movs	r2, #0
 8001422:	673b      	str	r3, [r7, #112]	; 0x70
 8001424:	677a      	str	r2, [r7, #116]	; 0x74
 8001426:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800142a:	f7fe fef1 	bl	8000210 <__aeabi_uldivmod>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4613      	mov	r3, r2
 8001434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001438:	4b41      	ldr	r3, [pc, #260]	; (8001540 <HAL_RCC_GetSysClockFreq+0x354>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	0c1b      	lsrs	r3, r3, #16
 800143e:	f003 0303 	and.w	r3, r3, #3
 8001442:	3301      	adds	r3, #1
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800144a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800144e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8001452:	fbb2 f3f3 	udiv	r3, r2, r3
 8001456:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800145a:	e0eb      	b.n	8001634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800145c:	4b38      	ldr	r3, [pc, #224]	; (8001540 <HAL_RCC_GetSysClockFreq+0x354>)
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001464:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001468:	4b35      	ldr	r3, [pc, #212]	; (8001540 <HAL_RCC_GetSysClockFreq+0x354>)
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001470:	2b00      	cmp	r3, #0
 8001472:	d06b      	beq.n	800154c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001474:	4b32      	ldr	r3, [pc, #200]	; (8001540 <HAL_RCC_GetSysClockFreq+0x354>)
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	099b      	lsrs	r3, r3, #6
 800147a:	2200      	movs	r2, #0
 800147c:	66bb      	str	r3, [r7, #104]	; 0x68
 800147e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8001480:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001486:	663b      	str	r3, [r7, #96]	; 0x60
 8001488:	2300      	movs	r3, #0
 800148a:	667b      	str	r3, [r7, #100]	; 0x64
 800148c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8001490:	4622      	mov	r2, r4
 8001492:	462b      	mov	r3, r5
 8001494:	f04f 0000 	mov.w	r0, #0
 8001498:	f04f 0100 	mov.w	r1, #0
 800149c:	0159      	lsls	r1, r3, #5
 800149e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80014a2:	0150      	lsls	r0, r2, #5
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4621      	mov	r1, r4
 80014aa:	1a51      	subs	r1, r2, r1
 80014ac:	61b9      	str	r1, [r7, #24]
 80014ae:	4629      	mov	r1, r5
 80014b0:	eb63 0301 	sbc.w	r3, r3, r1
 80014b4:	61fb      	str	r3, [r7, #28]
 80014b6:	f04f 0200 	mov.w	r2, #0
 80014ba:	f04f 0300 	mov.w	r3, #0
 80014be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80014c2:	4659      	mov	r1, fp
 80014c4:	018b      	lsls	r3, r1, #6
 80014c6:	4651      	mov	r1, sl
 80014c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014cc:	4651      	mov	r1, sl
 80014ce:	018a      	lsls	r2, r1, #6
 80014d0:	4651      	mov	r1, sl
 80014d2:	ebb2 0801 	subs.w	r8, r2, r1
 80014d6:	4659      	mov	r1, fp
 80014d8:	eb63 0901 	sbc.w	r9, r3, r1
 80014dc:	f04f 0200 	mov.w	r2, #0
 80014e0:	f04f 0300 	mov.w	r3, #0
 80014e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80014e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80014ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80014f0:	4690      	mov	r8, r2
 80014f2:	4699      	mov	r9, r3
 80014f4:	4623      	mov	r3, r4
 80014f6:	eb18 0303 	adds.w	r3, r8, r3
 80014fa:	613b      	str	r3, [r7, #16]
 80014fc:	462b      	mov	r3, r5
 80014fe:	eb49 0303 	adc.w	r3, r9, r3
 8001502:	617b      	str	r3, [r7, #20]
 8001504:	f04f 0200 	mov.w	r2, #0
 8001508:	f04f 0300 	mov.w	r3, #0
 800150c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001510:	4629      	mov	r1, r5
 8001512:	024b      	lsls	r3, r1, #9
 8001514:	4621      	mov	r1, r4
 8001516:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800151a:	4621      	mov	r1, r4
 800151c:	024a      	lsls	r2, r1, #9
 800151e:	4610      	mov	r0, r2
 8001520:	4619      	mov	r1, r3
 8001522:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8001526:	2200      	movs	r2, #0
 8001528:	65bb      	str	r3, [r7, #88]	; 0x58
 800152a:	65fa      	str	r2, [r7, #92]	; 0x5c
 800152c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001530:	f7fe fe6e 	bl	8000210 <__aeabi_uldivmod>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4613      	mov	r3, r2
 800153a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800153e:	e065      	b.n	800160c <HAL_RCC_GetSysClockFreq+0x420>
 8001540:	40023800 	.word	0x40023800
 8001544:	00f42400 	.word	0x00f42400
 8001548:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800154c:	4b3d      	ldr	r3, [pc, #244]	; (8001644 <HAL_RCC_GetSysClockFreq+0x458>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	099b      	lsrs	r3, r3, #6
 8001552:	2200      	movs	r2, #0
 8001554:	4618      	mov	r0, r3
 8001556:	4611      	mov	r1, r2
 8001558:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800155c:	653b      	str	r3, [r7, #80]	; 0x50
 800155e:	2300      	movs	r3, #0
 8001560:	657b      	str	r3, [r7, #84]	; 0x54
 8001562:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8001566:	4642      	mov	r2, r8
 8001568:	464b      	mov	r3, r9
 800156a:	f04f 0000 	mov.w	r0, #0
 800156e:	f04f 0100 	mov.w	r1, #0
 8001572:	0159      	lsls	r1, r3, #5
 8001574:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001578:	0150      	lsls	r0, r2, #5
 800157a:	4602      	mov	r2, r0
 800157c:	460b      	mov	r3, r1
 800157e:	4641      	mov	r1, r8
 8001580:	1a51      	subs	r1, r2, r1
 8001582:	60b9      	str	r1, [r7, #8]
 8001584:	4649      	mov	r1, r9
 8001586:	eb63 0301 	sbc.w	r3, r3, r1
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	f04f 0200 	mov.w	r2, #0
 8001590:	f04f 0300 	mov.w	r3, #0
 8001594:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001598:	4659      	mov	r1, fp
 800159a:	018b      	lsls	r3, r1, #6
 800159c:	4651      	mov	r1, sl
 800159e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80015a2:	4651      	mov	r1, sl
 80015a4:	018a      	lsls	r2, r1, #6
 80015a6:	4651      	mov	r1, sl
 80015a8:	1a54      	subs	r4, r2, r1
 80015aa:	4659      	mov	r1, fp
 80015ac:	eb63 0501 	sbc.w	r5, r3, r1
 80015b0:	f04f 0200 	mov.w	r2, #0
 80015b4:	f04f 0300 	mov.w	r3, #0
 80015b8:	00eb      	lsls	r3, r5, #3
 80015ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80015be:	00e2      	lsls	r2, r4, #3
 80015c0:	4614      	mov	r4, r2
 80015c2:	461d      	mov	r5, r3
 80015c4:	4643      	mov	r3, r8
 80015c6:	18e3      	adds	r3, r4, r3
 80015c8:	603b      	str	r3, [r7, #0]
 80015ca:	464b      	mov	r3, r9
 80015cc:	eb45 0303 	adc.w	r3, r5, r3
 80015d0:	607b      	str	r3, [r7, #4]
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80015de:	4629      	mov	r1, r5
 80015e0:	028b      	lsls	r3, r1, #10
 80015e2:	4621      	mov	r1, r4
 80015e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80015e8:	4621      	mov	r1, r4
 80015ea:	028a      	lsls	r2, r1, #10
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80015f4:	2200      	movs	r2, #0
 80015f6:	64bb      	str	r3, [r7, #72]	; 0x48
 80015f8:	64fa      	str	r2, [r7, #76]	; 0x4c
 80015fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80015fe:	f7fe fe07 	bl	8000210 <__aeabi_uldivmod>
 8001602:	4602      	mov	r2, r0
 8001604:	460b      	mov	r3, r1
 8001606:	4613      	mov	r3, r2
 8001608:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800160c:	4b0d      	ldr	r3, [pc, #52]	; (8001644 <HAL_RCC_GetSysClockFreq+0x458>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	0f1b      	lsrs	r3, r3, #28
 8001612:	f003 0307 	and.w	r3, r3, #7
 8001616:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800161a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800161e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800162a:	e003      	b.n	8001634 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800162c:	4b06      	ldr	r3, [pc, #24]	; (8001648 <HAL_RCC_GetSysClockFreq+0x45c>)
 800162e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8001632:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001634:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8001638:	4618      	mov	r0, r3
 800163a:	37b8      	adds	r7, #184	; 0xb8
 800163c:	46bd      	mov	sp, r7
 800163e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001642:	bf00      	nop
 8001644:	40023800 	.word	0x40023800
 8001648:	00f42400 	.word	0x00f42400

0800164c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b086      	sub	sp, #24
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d101      	bne.n	800165e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800165a:	2301      	movs	r3, #1
 800165c:	e28d      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b00      	cmp	r3, #0
 8001668:	f000 8083 	beq.w	8001772 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800166c:	4b94      	ldr	r3, [pc, #592]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 030c 	and.w	r3, r3, #12
 8001674:	2b04      	cmp	r3, #4
 8001676:	d019      	beq.n	80016ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001678:	4b91      	ldr	r3, [pc, #580]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 800167a:	689b      	ldr	r3, [r3, #8]
 800167c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001680:	2b08      	cmp	r3, #8
 8001682:	d106      	bne.n	8001692 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001684:	4b8e      	ldr	r3, [pc, #568]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001690:	d00c      	beq.n	80016ac <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001692:	4b8b      	ldr	r3, [pc, #556]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800169a:	2b0c      	cmp	r3, #12
 800169c:	d112      	bne.n	80016c4 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800169e:	4b88      	ldr	r3, [pc, #544]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 80016a0:	685b      	ldr	r3, [r3, #4]
 80016a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016aa:	d10b      	bne.n	80016c4 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016ac:	4b84      	ldr	r3, [pc, #528]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d05b      	beq.n	8001770 <HAL_RCC_OscConfig+0x124>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d157      	bne.n	8001770 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e25a      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016cc:	d106      	bne.n	80016dc <HAL_RCC_OscConfig+0x90>
 80016ce:	4b7c      	ldr	r3, [pc, #496]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4a7b      	ldr	r2, [pc, #492]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 80016d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016d8:	6013      	str	r3, [r2, #0]
 80016da:	e01d      	b.n	8001718 <HAL_RCC_OscConfig+0xcc>
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80016e4:	d10c      	bne.n	8001700 <HAL_RCC_OscConfig+0xb4>
 80016e6:	4b76      	ldr	r3, [pc, #472]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4a75      	ldr	r2, [pc, #468]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 80016ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016f0:	6013      	str	r3, [r2, #0]
 80016f2:	4b73      	ldr	r3, [pc, #460]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a72      	ldr	r2, [pc, #456]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 80016f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016fc:	6013      	str	r3, [r2, #0]
 80016fe:	e00b      	b.n	8001718 <HAL_RCC_OscConfig+0xcc>
 8001700:	4b6f      	ldr	r3, [pc, #444]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	4a6e      	ldr	r2, [pc, #440]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001706:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800170a:	6013      	str	r3, [r2, #0]
 800170c:	4b6c      	ldr	r3, [pc, #432]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a6b      	ldr	r2, [pc, #428]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001712:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001716:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	685b      	ldr	r3, [r3, #4]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d013      	beq.n	8001748 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001720:	f7ff f990 	bl	8000a44 <HAL_GetTick>
 8001724:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001726:	e008      	b.n	800173a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001728:	f7ff f98c 	bl	8000a44 <HAL_GetTick>
 800172c:	4602      	mov	r2, r0
 800172e:	693b      	ldr	r3, [r7, #16]
 8001730:	1ad3      	subs	r3, r2, r3
 8001732:	2b64      	cmp	r3, #100	; 0x64
 8001734:	d901      	bls.n	800173a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e21f      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800173a:	4b61      	ldr	r3, [pc, #388]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d0f0      	beq.n	8001728 <HAL_RCC_OscConfig+0xdc>
 8001746:	e014      	b.n	8001772 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001748:	f7ff f97c 	bl	8000a44 <HAL_GetTick>
 800174c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800174e:	e008      	b.n	8001762 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001750:	f7ff f978 	bl	8000a44 <HAL_GetTick>
 8001754:	4602      	mov	r2, r0
 8001756:	693b      	ldr	r3, [r7, #16]
 8001758:	1ad3      	subs	r3, r2, r3
 800175a:	2b64      	cmp	r3, #100	; 0x64
 800175c:	d901      	bls.n	8001762 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800175e:	2303      	movs	r3, #3
 8001760:	e20b      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001762:	4b57      	ldr	r3, [pc, #348]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176a:	2b00      	cmp	r3, #0
 800176c:	d1f0      	bne.n	8001750 <HAL_RCC_OscConfig+0x104>
 800176e:	e000      	b.n	8001772 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001770:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0302 	and.w	r3, r3, #2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d06f      	beq.n	800185e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800177e:	4b50      	ldr	r3, [pc, #320]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	f003 030c 	and.w	r3, r3, #12
 8001786:	2b00      	cmp	r3, #0
 8001788:	d017      	beq.n	80017ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800178a:	4b4d      	ldr	r3, [pc, #308]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 800178c:	689b      	ldr	r3, [r3, #8]
 800178e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001792:	2b08      	cmp	r3, #8
 8001794:	d105      	bne.n	80017a2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001796:	4b4a      	ldr	r3, [pc, #296]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d00b      	beq.n	80017ba <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017a2:	4b47      	ldr	r3, [pc, #284]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 80017a4:	689b      	ldr	r3, [r3, #8]
 80017a6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	d11c      	bne.n	80017e8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017ae:	4b44      	ldr	r3, [pc, #272]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d116      	bne.n	80017e8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ba:	4b41      	ldr	r3, [pc, #260]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d005      	beq.n	80017d2 <HAL_RCC_OscConfig+0x186>
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	68db      	ldr	r3, [r3, #12]
 80017ca:	2b01      	cmp	r3, #1
 80017cc:	d001      	beq.n	80017d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e1d3      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017d2:	4b3b      	ldr	r3, [pc, #236]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	691b      	ldr	r3, [r3, #16]
 80017de:	00db      	lsls	r3, r3, #3
 80017e0:	4937      	ldr	r1, [pc, #220]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 80017e2:	4313      	orrs	r3, r2
 80017e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017e6:	e03a      	b.n	800185e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d020      	beq.n	8001832 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80017f0:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <HAL_RCC_OscConfig+0x278>)
 80017f2:	2201      	movs	r2, #1
 80017f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017f6:	f7ff f925 	bl	8000a44 <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80017fc:	e008      	b.n	8001810 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017fe:	f7ff f921 	bl	8000a44 <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	2b02      	cmp	r3, #2
 800180a:	d901      	bls.n	8001810 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800180c:	2303      	movs	r3, #3
 800180e:	e1b4      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001810:	4b2b      	ldr	r3, [pc, #172]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0302 	and.w	r3, r3, #2
 8001818:	2b00      	cmp	r3, #0
 800181a:	d0f0      	beq.n	80017fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800181c:	4b28      	ldr	r3, [pc, #160]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	691b      	ldr	r3, [r3, #16]
 8001828:	00db      	lsls	r3, r3, #3
 800182a:	4925      	ldr	r1, [pc, #148]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]
 8001830:	e015      	b.n	800185e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001832:	4b24      	ldr	r3, [pc, #144]	; (80018c4 <HAL_RCC_OscConfig+0x278>)
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff f904 	bl	8000a44 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001840:	f7ff f900 	bl	8000a44 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b02      	cmp	r3, #2
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e193      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001852:	4b1b      	ldr	r3, [pc, #108]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0302 	and.w	r3, r3, #2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	f003 0308 	and.w	r3, r3, #8
 8001866:	2b00      	cmp	r3, #0
 8001868:	d036      	beq.n	80018d8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	695b      	ldr	r3, [r3, #20]
 800186e:	2b00      	cmp	r3, #0
 8001870:	d016      	beq.n	80018a0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001872:	4b15      	ldr	r3, [pc, #84]	; (80018c8 <HAL_RCC_OscConfig+0x27c>)
 8001874:	2201      	movs	r2, #1
 8001876:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001878:	f7ff f8e4 	bl	8000a44 <HAL_GetTick>
 800187c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800187e:	e008      	b.n	8001892 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001880:	f7ff f8e0 	bl	8000a44 <HAL_GetTick>
 8001884:	4602      	mov	r2, r0
 8001886:	693b      	ldr	r3, [r7, #16]
 8001888:	1ad3      	subs	r3, r2, r3
 800188a:	2b02      	cmp	r3, #2
 800188c:	d901      	bls.n	8001892 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800188e:	2303      	movs	r3, #3
 8001890:	e173      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001892:	4b0b      	ldr	r3, [pc, #44]	; (80018c0 <HAL_RCC_OscConfig+0x274>)
 8001894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	2b00      	cmp	r3, #0
 800189c:	d0f0      	beq.n	8001880 <HAL_RCC_OscConfig+0x234>
 800189e:	e01b      	b.n	80018d8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_RCC_OscConfig+0x27c>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018a6:	f7ff f8cd 	bl	8000a44 <HAL_GetTick>
 80018aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018ac:	e00e      	b.n	80018cc <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018ae:	f7ff f8c9 	bl	8000a44 <HAL_GetTick>
 80018b2:	4602      	mov	r2, r0
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	1ad3      	subs	r3, r2, r3
 80018b8:	2b02      	cmp	r3, #2
 80018ba:	d907      	bls.n	80018cc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80018bc:	2303      	movs	r3, #3
 80018be:	e15c      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
 80018c0:	40023800 	.word	0x40023800
 80018c4:	42470000 	.word	0x42470000
 80018c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018cc:	4b8a      	ldr	r3, [pc, #552]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 80018ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1ea      	bne.n	80018ae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0304 	and.w	r3, r3, #4
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 8097 	beq.w	8001a14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80018e6:	2300      	movs	r3, #0
 80018e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80018ea:	4b83      	ldr	r3, [pc, #524]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d10f      	bne.n	8001916 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80018f6:	2300      	movs	r3, #0
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	4b7f      	ldr	r3, [pc, #508]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	4a7e      	ldr	r2, [pc, #504]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001900:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001904:	6413      	str	r3, [r2, #64]	; 0x40
 8001906:	4b7c      	ldr	r3, [pc, #496]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001912:	2301      	movs	r3, #1
 8001914:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001916:	4b79      	ldr	r3, [pc, #484]	; (8001afc <HAL_RCC_OscConfig+0x4b0>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800191e:	2b00      	cmp	r3, #0
 8001920:	d118      	bne.n	8001954 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001922:	4b76      	ldr	r3, [pc, #472]	; (8001afc <HAL_RCC_OscConfig+0x4b0>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a75      	ldr	r2, [pc, #468]	; (8001afc <HAL_RCC_OscConfig+0x4b0>)
 8001928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800192e:	f7ff f889 	bl	8000a44 <HAL_GetTick>
 8001932:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001934:	e008      	b.n	8001948 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001936:	f7ff f885 	bl	8000a44 <HAL_GetTick>
 800193a:	4602      	mov	r2, r0
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	1ad3      	subs	r3, r2, r3
 8001940:	2b02      	cmp	r3, #2
 8001942:	d901      	bls.n	8001948 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8001944:	2303      	movs	r3, #3
 8001946:	e118      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001948:	4b6c      	ldr	r3, [pc, #432]	; (8001afc <HAL_RCC_OscConfig+0x4b0>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001950:	2b00      	cmp	r3, #0
 8001952:	d0f0      	beq.n	8001936 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	2b01      	cmp	r3, #1
 800195a:	d106      	bne.n	800196a <HAL_RCC_OscConfig+0x31e>
 800195c:	4b66      	ldr	r3, [pc, #408]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 800195e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001960:	4a65      	ldr	r2, [pc, #404]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001962:	f043 0301 	orr.w	r3, r3, #1
 8001966:	6713      	str	r3, [r2, #112]	; 0x70
 8001968:	e01c      	b.n	80019a4 <HAL_RCC_OscConfig+0x358>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	689b      	ldr	r3, [r3, #8]
 800196e:	2b05      	cmp	r3, #5
 8001970:	d10c      	bne.n	800198c <HAL_RCC_OscConfig+0x340>
 8001972:	4b61      	ldr	r3, [pc, #388]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001976:	4a60      	ldr	r2, [pc, #384]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001978:	f043 0304 	orr.w	r3, r3, #4
 800197c:	6713      	str	r3, [r2, #112]	; 0x70
 800197e:	4b5e      	ldr	r3, [pc, #376]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001980:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001982:	4a5d      	ldr	r2, [pc, #372]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001984:	f043 0301 	orr.w	r3, r3, #1
 8001988:	6713      	str	r3, [r2, #112]	; 0x70
 800198a:	e00b      	b.n	80019a4 <HAL_RCC_OscConfig+0x358>
 800198c:	4b5a      	ldr	r3, [pc, #360]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 800198e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001990:	4a59      	ldr	r2, [pc, #356]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001992:	f023 0301 	bic.w	r3, r3, #1
 8001996:	6713      	str	r3, [r2, #112]	; 0x70
 8001998:	4b57      	ldr	r3, [pc, #348]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 800199a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199c:	4a56      	ldr	r2, [pc, #344]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 800199e:	f023 0304 	bic.w	r3, r3, #4
 80019a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	d015      	beq.n	80019d8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ac:	f7ff f84a 	bl	8000a44 <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019b2:	e00a      	b.n	80019ca <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019b4:	f7ff f846 	bl	8000a44 <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	f241 3288 	movw	r2, #5000	; 0x1388
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d901      	bls.n	80019ca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80019c6:	2303      	movs	r3, #3
 80019c8:	e0d7      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019ca:	4b4b      	ldr	r3, [pc, #300]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ce:	f003 0302 	and.w	r3, r3, #2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d0ee      	beq.n	80019b4 <HAL_RCC_OscConfig+0x368>
 80019d6:	e014      	b.n	8001a02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d8:	f7ff f834 	bl	8000a44 <HAL_GetTick>
 80019dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019de:	e00a      	b.n	80019f6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80019e0:	f7ff f830 	bl	8000a44 <HAL_GetTick>
 80019e4:	4602      	mov	r2, r0
 80019e6:	693b      	ldr	r3, [r7, #16]
 80019e8:	1ad3      	subs	r3, r2, r3
 80019ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d901      	bls.n	80019f6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80019f2:	2303      	movs	r3, #3
 80019f4:	e0c1      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80019f6:	4b40      	ldr	r3, [pc, #256]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 80019f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d1ee      	bne.n	80019e0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001a02:	7dfb      	ldrb	r3, [r7, #23]
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d105      	bne.n	8001a14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a08:	4b3b      	ldr	r3, [pc, #236]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a0c:	4a3a      	ldr	r2, [pc, #232]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001a0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a12:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	699b      	ldr	r3, [r3, #24]
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	f000 80ad 	beq.w	8001b78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a1e:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 030c 	and.w	r3, r3, #12
 8001a26:	2b08      	cmp	r3, #8
 8001a28:	d060      	beq.n	8001aec <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	699b      	ldr	r3, [r3, #24]
 8001a2e:	2b02      	cmp	r3, #2
 8001a30:	d145      	bne.n	8001abe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a32:	4b33      	ldr	r3, [pc, #204]	; (8001b00 <HAL_RCC_OscConfig+0x4b4>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a38:	f7ff f804 	bl	8000a44 <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff f800 	bl	8000a44 <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e093      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a52:	4b29      	ldr	r3, [pc, #164]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d1f0      	bne.n	8001a40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	69da      	ldr	r2, [r3, #28]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6a1b      	ldr	r3, [r3, #32]
 8001a66:	431a      	orrs	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6c:	019b      	lsls	r3, r3, #6
 8001a6e:	431a      	orrs	r2, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a74:	085b      	lsrs	r3, r3, #1
 8001a76:	3b01      	subs	r3, #1
 8001a78:	041b      	lsls	r3, r3, #16
 8001a7a:	431a      	orrs	r2, r3
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a80:	061b      	lsls	r3, r3, #24
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a88:	071b      	lsls	r3, r3, #28
 8001a8a:	491b      	ldr	r1, [pc, #108]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a90:	4b1b      	ldr	r3, [pc, #108]	; (8001b00 <HAL_RCC_OscConfig+0x4b4>)
 8001a92:	2201      	movs	r2, #1
 8001a94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a96:	f7fe ffd5 	bl	8000a44 <HAL_GetTick>
 8001a9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a9c:	e008      	b.n	8001ab0 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a9e:	f7fe ffd1 	bl	8000a44 <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	693b      	ldr	r3, [r7, #16]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	2b02      	cmp	r3, #2
 8001aaa:	d901      	bls.n	8001ab0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8001aac:	2303      	movs	r3, #3
 8001aae:	e064      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ab0:	4b11      	ldr	r3, [pc, #68]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d0f0      	beq.n	8001a9e <HAL_RCC_OscConfig+0x452>
 8001abc:	e05c      	b.n	8001b78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001abe:	4b10      	ldr	r3, [pc, #64]	; (8001b00 <HAL_RCC_OscConfig+0x4b4>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac4:	f7fe ffbe 	bl	8000a44 <HAL_GetTick>
 8001ac8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001aca:	e008      	b.n	8001ade <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001acc:	f7fe ffba 	bl	8000a44 <HAL_GetTick>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	1ad3      	subs	r3, r2, r3
 8001ad6:	2b02      	cmp	r3, #2
 8001ad8:	d901      	bls.n	8001ade <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8001ada:	2303      	movs	r3, #3
 8001adc:	e04d      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001ade:	4b06      	ldr	r3, [pc, #24]	; (8001af8 <HAL_RCC_OscConfig+0x4ac>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d1f0      	bne.n	8001acc <HAL_RCC_OscConfig+0x480>
 8001aea:	e045      	b.n	8001b78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	699b      	ldr	r3, [r3, #24]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d107      	bne.n	8001b04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8001af4:	2301      	movs	r3, #1
 8001af6:	e040      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
 8001af8:	40023800 	.word	0x40023800
 8001afc:	40007000 	.word	0x40007000
 8001b00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001b04:	4b1f      	ldr	r3, [pc, #124]	; (8001b84 <HAL_RCC_OscConfig+0x538>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	699b      	ldr	r3, [r3, #24]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d030      	beq.n	8001b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	d129      	bne.n	8001b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d122      	bne.n	8001b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b2e:	68fa      	ldr	r2, [r7, #12]
 8001b30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b34:	4013      	ands	r3, r2
 8001b36:	687a      	ldr	r2, [r7, #4]
 8001b38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001b3c:	4293      	cmp	r3, r2
 8001b3e:	d119      	bne.n	8001b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b4a:	085b      	lsrs	r3, r3, #1
 8001b4c:	3b01      	subs	r3, #1
 8001b4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001b50:	429a      	cmp	r2, r3
 8001b52:	d10f      	bne.n	8001b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d107      	bne.n	8001b74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d001      	beq.n	8001b78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8001b74:	2301      	movs	r3, #1
 8001b76:	e000      	b.n	8001b7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3718      	adds	r7, #24
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	40023800 	.word	0x40023800

08001b88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e041      	b.n	8001c1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d106      	bne.n	8001bb4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f000 f839 	bl	8001c26 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	2202      	movs	r2, #2
 8001bb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681a      	ldr	r2, [r3, #0]
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	3304      	adds	r3, #4
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	4610      	mov	r0, r2
 8001bc8:	f000 f9d8 	bl	8001f7c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2201      	movs	r2, #1
 8001bd0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	2201      	movs	r2, #1
 8001be0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2201      	movs	r2, #1
 8001be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2201      	movs	r2, #1
 8001bf0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	2201      	movs	r2, #1
 8001c00:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2201      	movs	r2, #1
 8001c08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2201      	movs	r2, #1
 8001c10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	2201      	movs	r2, #1
 8001c18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3708      	adds	r7, #8
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001c26:	b480      	push	{r7}
 8001c28:	b083      	sub	sp, #12
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001c2e:	bf00      	nop
 8001c30:	370c      	adds	r7, #12
 8001c32:	46bd      	mov	sp, r7
 8001c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c38:	4770      	bx	lr
	...

08001c3c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001c3c:	b480      	push	{r7}
 8001c3e:	b085      	sub	sp, #20
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c4a:	b2db      	uxtb	r3, r3
 8001c4c:	2b01      	cmp	r3, #1
 8001c4e:	d001      	beq.n	8001c54 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001c50:	2301      	movs	r3, #1
 8001c52:	e04e      	b.n	8001cf2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2202      	movs	r2, #2
 8001c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	68da      	ldr	r2, [r3, #12]
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f042 0201 	orr.w	r2, r2, #1
 8001c6a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a23      	ldr	r2, [pc, #140]	; (8001d00 <HAL_TIM_Base_Start_IT+0xc4>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d022      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c7e:	d01d      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a1f      	ldr	r2, [pc, #124]	; (8001d04 <HAL_TIM_Base_Start_IT+0xc8>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d018      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	4a1e      	ldr	r2, [pc, #120]	; (8001d08 <HAL_TIM_Base_Start_IT+0xcc>)
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d013      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a1c      	ldr	r2, [pc, #112]	; (8001d0c <HAL_TIM_Base_Start_IT+0xd0>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d00e      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	4a1b      	ldr	r2, [pc, #108]	; (8001d10 <HAL_TIM_Base_Start_IT+0xd4>)
 8001ca4:	4293      	cmp	r3, r2
 8001ca6:	d009      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a19      	ldr	r2, [pc, #100]	; (8001d14 <HAL_TIM_Base_Start_IT+0xd8>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d004      	beq.n	8001cbc <HAL_TIM_Base_Start_IT+0x80>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	4a18      	ldr	r2, [pc, #96]	; (8001d18 <HAL_TIM_Base_Start_IT+0xdc>)
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d111      	bne.n	8001ce0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	689b      	ldr	r3, [r3, #8]
 8001cc2:	f003 0307 	and.w	r3, r3, #7
 8001cc6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	2b06      	cmp	r3, #6
 8001ccc:	d010      	beq.n	8001cf0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	681a      	ldr	r2, [r3, #0]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f042 0201 	orr.w	r2, r2, #1
 8001cdc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cde:	e007      	b.n	8001cf0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001cf0:	2300      	movs	r3, #0
}
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	3714      	adds	r7, #20
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	40010000 	.word	0x40010000
 8001d04:	40000400 	.word	0x40000400
 8001d08:	40000800 	.word	0x40000800
 8001d0c:	40000c00 	.word	0x40000c00
 8001d10:	40010400 	.word	0x40010400
 8001d14:	40014000 	.word	0x40014000
 8001d18:	40001800 	.word	0x40001800

08001d1c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	691b      	ldr	r3, [r3, #16]
 8001d2a:	f003 0302 	and.w	r3, r3, #2
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	d122      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	68db      	ldr	r3, [r3, #12]
 8001d38:	f003 0302 	and.w	r3, r3, #2
 8001d3c:	2b02      	cmp	r3, #2
 8001d3e:	d11b      	bne.n	8001d78 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f06f 0202 	mvn.w	r2, #2
 8001d48:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	699b      	ldr	r3, [r3, #24]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001d5e:	6878      	ldr	r0, [r7, #4]
 8001d60:	f000 f8ee 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001d64:	e005      	b.n	8001d72 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d66:	6878      	ldr	r0, [r7, #4]
 8001d68:	f000 f8e0 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d6c:	6878      	ldr	r0, [r7, #4]
 8001d6e:	f000 f8f1 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	2200      	movs	r2, #0
 8001d76:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	691b      	ldr	r3, [r3, #16]
 8001d7e:	f003 0304 	and.w	r3, r3, #4
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d122      	bne.n	8001dcc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0304 	and.w	r3, r3, #4
 8001d90:	2b04      	cmp	r3, #4
 8001d92:	d11b      	bne.n	8001dcc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f06f 0204 	mvn.w	r2, #4
 8001d9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2202      	movs	r2, #2
 8001da2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	699b      	ldr	r3, [r3, #24]
 8001daa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f000 f8c4 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001db8:	e005      	b.n	8001dc6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dba:	6878      	ldr	r0, [r7, #4]
 8001dbc:	f000 f8b6 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	f000 f8c7 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2200      	movs	r2, #0
 8001dca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	691b      	ldr	r3, [r3, #16]
 8001dd2:	f003 0308 	and.w	r3, r3, #8
 8001dd6:	2b08      	cmp	r3, #8
 8001dd8:	d122      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	f003 0308 	and.w	r3, r3, #8
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d11b      	bne.n	8001e20 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f06f 0208 	mvn.w	r2, #8
 8001df0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2204      	movs	r2, #4
 8001df6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	69db      	ldr	r3, [r3, #28]
 8001dfe:	f003 0303 	and.w	r3, r3, #3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d003      	beq.n	8001e0e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f000 f89a 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001e0c:	e005      	b.n	8001e1a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e0e:	6878      	ldr	r0, [r7, #4]
 8001e10:	f000 f88c 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e14:	6878      	ldr	r0, [r7, #4]
 8001e16:	f000 f89d 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2200      	movs	r2, #0
 8001e1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	691b      	ldr	r3, [r3, #16]
 8001e26:	f003 0310 	and.w	r3, r3, #16
 8001e2a:	2b10      	cmp	r3, #16
 8001e2c:	d122      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b10      	cmp	r3, #16
 8001e3a:	d11b      	bne.n	8001e74 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f06f 0210 	mvn.w	r2, #16
 8001e44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d003      	beq.n	8001e62 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f000 f870 	bl	8001f40 <HAL_TIM_IC_CaptureCallback>
 8001e60:	e005      	b.n	8001e6e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e62:	6878      	ldr	r0, [r7, #4]
 8001e64:	f000 f862 	bl	8001f2c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	f000 f873 	bl	8001f54 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2200      	movs	r2, #0
 8001e72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691b      	ldr	r3, [r3, #16]
 8001e7a:	f003 0301 	and.w	r3, r3, #1
 8001e7e:	2b01      	cmp	r3, #1
 8001e80:	d10e      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	f003 0301 	and.w	r3, r3, #1
 8001e8c:	2b01      	cmp	r3, #1
 8001e8e:	d107      	bne.n	8001ea0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f06f 0201 	mvn.w	r2, #1
 8001e98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7fe fc84 	bl	80007a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	691b      	ldr	r3, [r3, #16]
 8001ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eaa:	2b80      	cmp	r3, #128	; 0x80
 8001eac:	d10e      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	68db      	ldr	r3, [r3, #12]
 8001eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb8:	2b80      	cmp	r3, #128	; 0x80
 8001eba:	d107      	bne.n	8001ecc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001ec4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001ec6:	6878      	ldr	r0, [r7, #4]
 8001ec8:	f000 f902 	bl	80020d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	691b      	ldr	r3, [r3, #16]
 8001ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ed6:	2b40      	cmp	r3, #64	; 0x40
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ee4:	2b40      	cmp	r3, #64	; 0x40
 8001ee6:	d107      	bne.n	8001ef8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f000 f838 	bl	8001f68 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	691b      	ldr	r3, [r3, #16]
 8001efe:	f003 0320 	and.w	r3, r3, #32
 8001f02:	2b20      	cmp	r3, #32
 8001f04:	d10e      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	f003 0320 	and.w	r3, r3, #32
 8001f10:	2b20      	cmp	r3, #32
 8001f12:	d107      	bne.n	8001f24 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f06f 0220 	mvn.w	r2, #32
 8001f1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f000 f8cc 	bl	80020bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f24:	bf00      	nop
 8001f26:	3708      	adds	r7, #8
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001f34:	bf00      	nop
 8001f36:	370c      	adds	r7, #12
 8001f38:	46bd      	mov	sp, r7
 8001f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3e:	4770      	bx	lr

08001f40 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001f40:	b480      	push	{r7}
 8001f42:	b083      	sub	sp, #12
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001f48:	bf00      	nop
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001f5c:	bf00      	nop
 8001f5e:	370c      	adds	r7, #12
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr

08001f68 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001f70:	bf00      	nop
 8001f72:	370c      	adds	r7, #12
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b085      	sub	sp, #20
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
 8001f84:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a40      	ldr	r2, [pc, #256]	; (8002090 <TIM_Base_SetConfig+0x114>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d013      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f9a:	d00f      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	4a3d      	ldr	r2, [pc, #244]	; (8002094 <TIM_Base_SetConfig+0x118>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00b      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	4a3c      	ldr	r2, [pc, #240]	; (8002098 <TIM_Base_SetConfig+0x11c>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	d007      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	4a3b      	ldr	r2, [pc, #236]	; (800209c <TIM_Base_SetConfig+0x120>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d003      	beq.n	8001fbc <TIM_Base_SetConfig+0x40>
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	4a3a      	ldr	r2, [pc, #232]	; (80020a0 <TIM_Base_SetConfig+0x124>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	d108      	bne.n	8001fce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fc2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	68fa      	ldr	r2, [r7, #12]
 8001fca:	4313      	orrs	r3, r2
 8001fcc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a2f      	ldr	r2, [pc, #188]	; (8002090 <TIM_Base_SetConfig+0x114>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d02b      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fdc:	d027      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a2c      	ldr	r2, [pc, #176]	; (8002094 <TIM_Base_SetConfig+0x118>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d023      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a2b      	ldr	r2, [pc, #172]	; (8002098 <TIM_Base_SetConfig+0x11c>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d01f      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	4a2a      	ldr	r2, [pc, #168]	; (800209c <TIM_Base_SetConfig+0x120>)
 8001ff2:	4293      	cmp	r3, r2
 8001ff4:	d01b      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	4a29      	ldr	r2, [pc, #164]	; (80020a0 <TIM_Base_SetConfig+0x124>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d017      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a28      	ldr	r2, [pc, #160]	; (80020a4 <TIM_Base_SetConfig+0x128>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d013      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <TIM_Base_SetConfig+0x12c>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d00f      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	4a26      	ldr	r2, [pc, #152]	; (80020ac <TIM_Base_SetConfig+0x130>)
 8002012:	4293      	cmp	r3, r2
 8002014:	d00b      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	4a25      	ldr	r2, [pc, #148]	; (80020b0 <TIM_Base_SetConfig+0x134>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d007      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4a24      	ldr	r2, [pc, #144]	; (80020b4 <TIM_Base_SetConfig+0x138>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d003      	beq.n	800202e <TIM_Base_SetConfig+0xb2>
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	4a23      	ldr	r2, [pc, #140]	; (80020b8 <TIM_Base_SetConfig+0x13c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d108      	bne.n	8002040 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002034:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002036:	683b      	ldr	r3, [r7, #0]
 8002038:	68db      	ldr	r3, [r3, #12]
 800203a:	68fa      	ldr	r2, [r7, #12]
 800203c:	4313      	orrs	r3, r2
 800203e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	4313      	orrs	r3, r2
 800204c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	68fa      	ldr	r2, [r7, #12]
 8002052:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	689a      	ldr	r2, [r3, #8]
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	4a0a      	ldr	r2, [pc, #40]	; (8002090 <TIM_Base_SetConfig+0x114>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d003      	beq.n	8002074 <TIM_Base_SetConfig+0xf8>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a0c      	ldr	r2, [pc, #48]	; (80020a0 <TIM_Base_SetConfig+0x124>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d103      	bne.n	800207c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	691a      	ldr	r2, [r3, #16]
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2201      	movs	r2, #1
 8002080:	615a      	str	r2, [r3, #20]
}
 8002082:	bf00      	nop
 8002084:	3714      	adds	r7, #20
 8002086:	46bd      	mov	sp, r7
 8002088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800208c:	4770      	bx	lr
 800208e:	bf00      	nop
 8002090:	40010000 	.word	0x40010000
 8002094:	40000400 	.word	0x40000400
 8002098:	40000800 	.word	0x40000800
 800209c:	40000c00 	.word	0x40000c00
 80020a0:	40010400 	.word	0x40010400
 80020a4:	40014000 	.word	0x40014000
 80020a8:	40014400 	.word	0x40014400
 80020ac:	40014800 	.word	0x40014800
 80020b0:	40001800 	.word	0x40001800
 80020b4:	40001c00 	.word	0x40001c00
 80020b8:	40002000 	.word	0x40002000

080020bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80020bc:	b480      	push	{r7}
 80020be:	b083      	sub	sp, #12
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80020c4:	bf00      	nop
 80020c6:	370c      	adds	r7, #12
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80020d0:	b480      	push	{r7}
 80020d2:	b083      	sub	sp, #12
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr

080020e4 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80020e4:	b480      	push	{r7}
 80020e6:	b083      	sub	sp, #12
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	f103 0208 	add.w	r2, r3, #8
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	605a      	str	r2, [r3, #4]

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f04f 32ff 	mov.w	r2, #4294967295
 80020fc:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	f103 0208 	add.w	r2, r3, #8
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	f103 0208 	add.w	r2, r3, #8
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	611a      	str	r2, [r3, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2200      	movs	r2, #0
 8002116:	601a      	str	r2, [r3, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002118:	bf00      	nop
 800211a:	370c      	adds	r7, #12
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	611a      	str	r2, [r3, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <xTaskCreate>:
                            const char * const pcName, /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
                            const configSTACK_DEPTH_TYPE usStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 800213e:	b580      	push	{r7, lr}
 8002140:	b08c      	sub	sp, #48	; 0x30
 8002142:	af04      	add	r7, sp, #16
 8002144:	60f8      	str	r0, [r7, #12]
 8002146:	60b9      	str	r1, [r7, #8]
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	4613      	mov	r3, r2
 800214c:	80fb      	strh	r3, [r7, #6]
        #else /* portSTACK_GROWTH */
            {
                StackType_t * pxStack;

                /* Allocate space for the stack used by the task being created. */
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800214e:	88fb      	ldrh	r3, [r7, #6]
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	4618      	mov	r0, r3
 8002154:	f000 fd72 	bl	8002c3c <pvPortMalloc>
 8002158:	6178      	str	r0, [r7, #20]

                if( pxStack != NULL )
 800215a:	697b      	ldr	r3, [r7, #20]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00e      	beq.n	800217e <xTaskCreate+0x40>
                {
                    /* Allocate space for the TCB. */
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002160:	2058      	movs	r0, #88	; 0x58
 8002162:	f000 fd6b 	bl	8002c3c <pvPortMalloc>
 8002166:	61f8      	str	r0, [r7, #28]

                    if( pxNewTCB != NULL )
 8002168:	69fb      	ldr	r3, [r7, #28]
 800216a:	2b00      	cmp	r3, #0
 800216c:	d003      	beq.n	8002176 <xTaskCreate+0x38>
                    {
                        /* Store the stack location in the TCB. */
                        pxNewTCB->pxStack = pxStack;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	697a      	ldr	r2, [r7, #20]
 8002172:	631a      	str	r2, [r3, #48]	; 0x30
 8002174:	e005      	b.n	8002182 <xTaskCreate+0x44>
                    }
                    else
                    {
                        /* The stack cannot be used as the TCB was not created.  Free
                         * it again. */
                        vPortFreeStack( pxStack );
 8002176:	6978      	ldr	r0, [r7, #20]
 8002178:	f000 fe40 	bl	8002dfc <vPortFree>
 800217c:	e001      	b.n	8002182 <xTaskCreate+0x44>
                    }
                }
                else
                {
                    pxNewTCB = NULL;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
                }
            }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8002182:	69fb      	ldr	r3, [r7, #28]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d013      	beq.n	80021b0 <xTaskCreate+0x72>
                     * task was created dynamically in case it is later deleted. */
                    pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
                }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002188:	88fa      	ldrh	r2, [r7, #6]
 800218a:	2300      	movs	r3, #0
 800218c:	9303      	str	r3, [sp, #12]
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	9302      	str	r3, [sp, #8]
 8002192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002194:	9301      	str	r3, [sp, #4]
 8002196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68b9      	ldr	r1, [r7, #8]
 800219e:	68f8      	ldr	r0, [r7, #12]
 80021a0:	f000 f80e 	bl	80021c0 <prvInitialiseNewTask>
            prvAddNewTaskToReadyList( pxNewTCB );
 80021a4:	69f8      	ldr	r0, [r7, #28]
 80021a6:	f000 f8af 	bl	8002308 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 80021aa:	2301      	movs	r3, #1
 80021ac:	61bb      	str	r3, [r7, #24]
 80021ae:	e002      	b.n	80021b6 <xTaskCreate+0x78>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80021b0:	f04f 33ff 	mov.w	r3, #4294967295
 80021b4:	61bb      	str	r3, [r7, #24]
        }

        return xReturn;
 80021b6:	69bb      	ldr	r3, [r7, #24]
    }
 80021b8:	4618      	mov	r0, r3
 80021ba:	3720      	adds	r7, #32
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b088      	sub	sp, #32
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	60f8      	str	r0, [r7, #12]
 80021c8:	60b9      	str	r1, [r7, #8]
 80021ca:	607a      	str	r2, [r7, #4]
 80021cc:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
        {
            /* Fill the stack with a known value to assist debugging. */
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80021ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	461a      	mov	r2, r3
 80021d8:	21a5      	movs	r1, #165	; 0xa5
 80021da:	f000 ff51 	bl	8003080 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
        {
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80021de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021e8:	3b01      	subs	r3, #1
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	4413      	add	r3, r2
 80021ee:	61bb      	str	r3, [r7, #24]
            pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80021f0:	69bb      	ldr	r3, [r7, #24]
 80021f2:	f023 0307 	bic.w	r3, r3, #7
 80021f6:	61bb      	str	r3, [r7, #24]

            /* Check the alignment of the calculated top of stack is correct. */
            configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80021f8:	69bb      	ldr	r3, [r7, #24]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d00a      	beq.n	8002218 <prvInitialiseNewTask+0x58>
        __asm volatile
 8002202:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002206:	f383 8811 	msr	BASEPRI, r3
 800220a:	f3bf 8f6f 	isb	sy
 800220e:	f3bf 8f4f 	dsb	sy
 8002212:	617b      	str	r3, [r7, #20]
    }
 8002214:	bf00      	nop
 8002216:	e7fe      	b.n	8002216 <prvInitialiseNewTask+0x56>
            pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
        }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 8002218:	68bb      	ldr	r3, [r7, #8]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d01f      	beq.n	800225e <prvInitialiseNewTask+0x9e>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800221e:	2300      	movs	r3, #0
 8002220:	61fb      	str	r3, [r7, #28]
 8002222:	e012      	b.n	800224a <prvInitialiseNewTask+0x8a>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002224:	68ba      	ldr	r2, [r7, #8]
 8002226:	69fb      	ldr	r3, [r7, #28]
 8002228:	4413      	add	r3, r2
 800222a:	7819      	ldrb	r1, [r3, #0]
 800222c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800222e:	69fb      	ldr	r3, [r7, #28]
 8002230:	4413      	add	r3, r2
 8002232:	3334      	adds	r3, #52	; 0x34
 8002234:	460a      	mov	r2, r1
 8002236:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8002238:	68ba      	ldr	r2, [r7, #8]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	4413      	add	r3, r2
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	2b00      	cmp	r3, #0
 8002242:	d006      	beq.n	8002252 <prvInitialiseNewTask+0x92>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002244:	69fb      	ldr	r3, [r7, #28]
 8002246:	3301      	adds	r3, #1
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	2b09      	cmp	r3, #9
 800224e:	d9e9      	bls.n	8002224 <prvInitialiseNewTask+0x64>
 8002250:	e000      	b.n	8002254 <prvInitialiseNewTask+0x94>
            {
                break;
 8002252:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002256:	2200      	movs	r2, #0
 8002258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800225c:	e003      	b.n	8002266 <prvInitialiseNewTask+0xa6>
    }
    else
    {
        /* The task has not been given a name, so just ensure there is a NULL
         * terminator when it is read out. */
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800225e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002260:	2200      	movs	r2, #0
 8002262:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8002266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002268:	2b04      	cmp	r3, #4
 800226a:	d90a      	bls.n	8002282 <prvInitialiseNewTask+0xc2>
        __asm volatile
 800226c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002270:	f383 8811 	msr	BASEPRI, r3
 8002274:	f3bf 8f6f 	isb	sy
 8002278:	f3bf 8f4f 	dsb	sy
 800227c:	613b      	str	r3, [r7, #16]
    }
 800227e:	bf00      	nop
 8002280:	e7fe      	b.n	8002280 <prvInitialiseNewTask+0xc0>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002282:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002284:	2b04      	cmp	r3, #4
 8002286:	d901      	bls.n	800228c <prvInitialiseNewTask+0xcc>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002288:	2304      	movs	r3, #4
 800228a:	62bb      	str	r3, [r7, #40]	; 0x28
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 800228c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002290:	62da      	str	r2, [r3, #44]	; 0x2c
    #if ( configUSE_MUTEXES == 1 )
        {
            pxNewTCB->uxBasePriority = uxPriority;
 8002292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002296:	649a      	str	r2, [r3, #72]	; 0x48
            pxNewTCB->uxMutexesHeld = 0;
 8002298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800229a:	2200      	movs	r2, #0
 800229c:	64da      	str	r2, [r3, #76]	; 0x4c
        }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800229e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022a0:	3304      	adds	r3, #4
 80022a2:	4618      	mov	r0, r3
 80022a4:	f7ff ff3e 	bl	8002124 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80022a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022aa:	3318      	adds	r3, #24
 80022ac:	4618      	mov	r0, r3
 80022ae:	f7ff ff39 	bl	8002124 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80022b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b6:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80022b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022ba:	f1c3 0205 	rsb	r2, r3, #5
 80022be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c0:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80022c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022c6:	625a      	str	r2, [r3, #36]	; 0x24
        }
    #endif

    #if ( configUSE_TASK_NOTIFICATIONS == 1 )
        {
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80022c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022ca:	3350      	adds	r3, #80	; 0x50
 80022cc:	2204      	movs	r2, #4
 80022ce:	2100      	movs	r1, #0
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 fed5 	bl	8003080 <memset>
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80022d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d8:	3354      	adds	r3, #84	; 0x54
 80022da:	2201      	movs	r2, #1
 80022dc:	2100      	movs	r1, #0
 80022de:	4618      	mov	r0, r3
 80022e0:	f000 fece 	bl	8003080 <memset>
                        }
                    #endif /* portSTACK_GROWTH */
                }
            #else /* portHAS_STACK_OVERFLOW_CHECKING */
                {
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80022e4:	683a      	ldr	r2, [r7, #0]
 80022e6:	68f9      	ldr	r1, [r7, #12]
 80022e8:	69b8      	ldr	r0, [r7, #24]
 80022ea:	f000 fb7b 	bl	80029e4 <pxPortInitialiseStack>
 80022ee:	4602      	mov	r2, r0
 80022f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022f2:	601a      	str	r2, [r3, #0]
                }
            #endif /* portHAS_STACK_OVERFLOW_CHECKING */
        }
    #endif /* portUSING_MPU_WRAPPERS */

    if( pxCreatedTask != NULL )
 80022f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d002      	beq.n	8002300 <prvInitialiseNewTask+0x140>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80022fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022fe:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002300:	bf00      	nop
 8002302:	3720      	adds	r7, #32
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
    /* Ensure interrupts don't access the task lists while the lists are being
     * updated. */
    taskENTER_CRITICAL();
 8002310:	f000 fbe2 	bl	8002ad8 <vPortEnterCritical>
    {
        uxCurrentNumberOfTasks++;
 8002314:	4b40      	ldr	r3, [pc, #256]	; (8002418 <prvAddNewTaskToReadyList+0x110>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	3301      	adds	r3, #1
 800231a:	4a3f      	ldr	r2, [pc, #252]	; (8002418 <prvAddNewTaskToReadyList+0x110>)
 800231c:	6013      	str	r3, [r2, #0]

        if( pxCurrentTCB == NULL )
 800231e:	4b3f      	ldr	r3, [pc, #252]	; (800241c <prvAddNewTaskToReadyList+0x114>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d109      	bne.n	800233a <prvAddNewTaskToReadyList+0x32>
        {
            /* There are no other tasks, or all the other tasks are in
             * the suspended state - make this the current task. */
            pxCurrentTCB = pxNewTCB;
 8002326:	4a3d      	ldr	r2, [pc, #244]	; (800241c <prvAddNewTaskToReadyList+0x114>)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6013      	str	r3, [r2, #0]

            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800232c:	4b3a      	ldr	r3, [pc, #232]	; (8002418 <prvAddNewTaskToReadyList+0x110>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	2b01      	cmp	r3, #1
 8002332:	d110      	bne.n	8002356 <prvAddNewTaskToReadyList+0x4e>
            {
                /* This is the first task to be created so do the preliminary
                 * initialisation required.  We will not recover if this call
                 * fails, but we will report the failure. */
                prvInitialiseTaskLists();
 8002334:	f000 fafa 	bl	800292c <prvInitialiseTaskLists>
 8002338:	e00d      	b.n	8002356 <prvAddNewTaskToReadyList+0x4e>
        else
        {
            /* If the scheduler is not already running, make this task the
             * current task if it is the highest priority task to be created
             * so far. */
            if( xSchedulerRunning == pdFALSE )
 800233a:	4b39      	ldr	r3, [pc, #228]	; (8002420 <prvAddNewTaskToReadyList+0x118>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <prvAddNewTaskToReadyList+0x4e>
            {
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002342:	4b36      	ldr	r3, [pc, #216]	; (800241c <prvAddNewTaskToReadyList+0x114>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234c:	429a      	cmp	r2, r3
 800234e:	d802      	bhi.n	8002356 <prvAddNewTaskToReadyList+0x4e>
                {
                    pxCurrentTCB = pxNewTCB;
 8002350:	4a32      	ldr	r2, [pc, #200]	; (800241c <prvAddNewTaskToReadyList+0x114>)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6013      	str	r3, [r2, #0]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        uxTaskNumber++;
 8002356:	4b33      	ldr	r3, [pc, #204]	; (8002424 <prvAddNewTaskToReadyList+0x11c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3301      	adds	r3, #1
 800235c:	4a31      	ldr	r2, [pc, #196]	; (8002424 <prvAddNewTaskToReadyList+0x11c>)
 800235e:	6013      	str	r3, [r2, #0]

        #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002360:	4b30      	ldr	r3, [pc, #192]	; (8002424 <prvAddNewTaskToReadyList+0x11c>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	641a      	str	r2, [r3, #64]	; 0x40
            }
        #endif /* configUSE_TRACE_FACILITY */
        traceTASK_CREATE( pxNewTCB );

        prvAddTaskToReadyList( pxNewTCB );
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800236c:	2201      	movs	r2, #1
 800236e:	409a      	lsls	r2, r3
 8002370:	4b2d      	ldr	r3, [pc, #180]	; (8002428 <prvAddNewTaskToReadyList+0x120>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	4313      	orrs	r3, r2
 8002376:	4a2c      	ldr	r2, [pc, #176]	; (8002428 <prvAddNewTaskToReadyList+0x120>)
 8002378:	6013      	str	r3, [r2, #0]
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800237e:	492b      	ldr	r1, [pc, #172]	; (800242c <prvAddNewTaskToReadyList+0x124>)
 8002380:	4613      	mov	r3, r2
 8002382:	009b      	lsls	r3, r3, #2
 8002384:	4413      	add	r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	3304      	adds	r3, #4
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	60fb      	str	r3, [r7, #12]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	68fa      	ldr	r2, [r7, #12]
 8002394:	609a      	str	r2, [r3, #8]
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	689a      	ldr	r2, [r3, #8]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	60da      	str	r2, [r3, #12]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	3204      	adds	r2, #4
 80023a6:	605a      	str	r2, [r3, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	1d1a      	adds	r2, r3, #4
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	609a      	str	r2, [r3, #8]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023b4:	4613      	mov	r3, r2
 80023b6:	009b      	lsls	r3, r3, #2
 80023b8:	4413      	add	r3, r2
 80023ba:	009b      	lsls	r3, r3, #2
 80023bc:	4a1b      	ldr	r2, [pc, #108]	; (800242c <prvAddNewTaskToReadyList+0x124>)
 80023be:	441a      	add	r2, r3
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	615a      	str	r2, [r3, #20]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023c8:	4918      	ldr	r1, [pc, #96]	; (800242c <prvAddNewTaskToReadyList+0x124>)
 80023ca:	4613      	mov	r3, r2
 80023cc:	009b      	lsls	r3, r3, #2
 80023ce:	4413      	add	r3, r2
 80023d0:	009b      	lsls	r3, r3, #2
 80023d2:	440b      	add	r3, r1
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	1c59      	adds	r1, r3, #1
 80023d8:	4814      	ldr	r0, [pc, #80]	; (800242c <prvAddNewTaskToReadyList+0x124>)
 80023da:	4613      	mov	r3, r2
 80023dc:	009b      	lsls	r3, r3, #2
 80023de:	4413      	add	r3, r2
 80023e0:	009b      	lsls	r3, r3, #2
 80023e2:	4403      	add	r3, r0
 80023e4:	6019      	str	r1, [r3, #0]

        portSETUP_TCB( pxNewTCB );
    }
    taskEXIT_CRITICAL();
 80023e6:	f000 fba7 	bl	8002b38 <vPortExitCritical>

    if( xSchedulerRunning != pdFALSE )
 80023ea:	4b0d      	ldr	r3, [pc, #52]	; (8002420 <prvAddNewTaskToReadyList+0x118>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d00e      	beq.n	8002410 <prvAddNewTaskToReadyList+0x108>
    {
        /* If the created task is of a higher priority than the current task
         * then it should run now. */
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80023f2:	4b0a      	ldr	r3, [pc, #40]	; (800241c <prvAddNewTaskToReadyList+0x114>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023fc:	429a      	cmp	r2, r3
 80023fe:	d207      	bcs.n	8002410 <prvAddNewTaskToReadyList+0x108>
        {
            taskYIELD_IF_USING_PREEMPTION();
 8002400:	4b0b      	ldr	r3, [pc, #44]	; (8002430 <prvAddNewTaskToReadyList+0x128>)
 8002402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002406:	601a      	str	r2, [r3, #0]
 8002408:	f3bf 8f4f 	dsb	sy
 800240c:	f3bf 8f6f 	isb	sy
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8002410:	bf00      	nop
 8002412:	3710      	adds	r7, #16
 8002414:	46bd      	mov	sp, r7
 8002416:	bd80      	pop	{r7, pc}
 8002418:	2000014c 	.word	0x2000014c
 800241c:	20000078 	.word	0x20000078
 8002420:	20000158 	.word	0x20000158
 8002424:	20000168 	.word	0x20000168
 8002428:	20000154 	.word	0x20000154
 800242c:	2000007c 	.word	0x2000007c
 8002430:	e000ed04 	.word	0xe000ed04

08002434 <vTaskSuspendAll>:
    vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002434:	b480      	push	{r7}
 8002436:	af00      	add	r7, sp, #0
     * do not otherwise exhibit real time behaviour. */
    portSOFTWARE_BARRIER();

    /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
     * is used to allow calls to vTaskSuspendAll() to nest. */
    ++uxSchedulerSuspended;
 8002438:	4b04      	ldr	r3, [pc, #16]	; (800244c <vTaskSuspendAll+0x18>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	3301      	adds	r3, #1
 800243e:	4a03      	ldr	r2, [pc, #12]	; (800244c <vTaskSuspendAll+0x18>)
 8002440:	6013      	str	r3, [r2, #0]

    /* Enforces ordering for ports and optimised compilers that may otherwise place
     * the above increment elsewhere. */
    portMEMORY_BARRIER();
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	20000170 	.word	0x20000170

08002450 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002450:	b580      	push	{r7, lr}
 8002452:	b088      	sub	sp, #32
 8002454:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8002456:	2300      	movs	r3, #0
 8002458:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 800245a:	2300      	movs	r3, #0
 800245c:	61bb      	str	r3, [r7, #24]

    /* If uxSchedulerSuspended is zero then this function does not match a
     * previous call to vTaskSuspendAll(). */
    configASSERT( uxSchedulerSuspended );
 800245e:	4b71      	ldr	r3, [pc, #452]	; (8002624 <xTaskResumeAll+0x1d4>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10a      	bne.n	800247c <xTaskResumeAll+0x2c>
        __asm volatile
 8002466:	f04f 0350 	mov.w	r3, #80	; 0x50
 800246a:	f383 8811 	msr	BASEPRI, r3
 800246e:	f3bf 8f6f 	isb	sy
 8002472:	f3bf 8f4f 	dsb	sy
 8002476:	607b      	str	r3, [r7, #4]
    }
 8002478:	bf00      	nop
 800247a:	e7fe      	b.n	800247a <xTaskResumeAll+0x2a>
    /* It is possible that an ISR caused a task to be removed from an event
     * list while the scheduler was suspended.  If this was the case then the
     * removed task will have been added to the xPendingReadyList.  Once the
     * scheduler has been resumed it is safe to move all the pending ready
     * tasks from this list into their appropriate ready list. */
    taskENTER_CRITICAL();
 800247c:	f000 fb2c 	bl	8002ad8 <vPortEnterCritical>
    {
        --uxSchedulerSuspended;
 8002480:	4b68      	ldr	r3, [pc, #416]	; (8002624 <xTaskResumeAll+0x1d4>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	3b01      	subs	r3, #1
 8002486:	4a67      	ldr	r2, [pc, #412]	; (8002624 <xTaskResumeAll+0x1d4>)
 8002488:	6013      	str	r3, [r2, #0]

        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800248a:	4b66      	ldr	r3, [pc, #408]	; (8002624 <xTaskResumeAll+0x1d4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	2b00      	cmp	r3, #0
 8002490:	f040 80c0 	bne.w	8002614 <xTaskResumeAll+0x1c4>
        {
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002494:	4b64      	ldr	r3, [pc, #400]	; (8002628 <xTaskResumeAll+0x1d8>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	2b00      	cmp	r3, #0
 800249a:	f000 80bb 	beq.w	8002614 <xTaskResumeAll+0x1c4>
            {
                /* Move any readied tasks from the pending list into the
                 * appropriate ready list. */
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800249e:	e08a      	b.n	80025b6 <xTaskResumeAll+0x166>
                {
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80024a0:	4b62      	ldr	r3, [pc, #392]	; (800262c <xTaskResumeAll+0x1dc>)
 80024a2:	68db      	ldr	r3, [r3, #12]
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	61fb      	str	r3, [r7, #28]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	69db      	ldr	r3, [r3, #28]
 80024b2:	69fa      	ldr	r2, [r7, #28]
 80024b4:	6a12      	ldr	r2, [r2, #32]
 80024b6:	609a      	str	r2, [r3, #8]
 80024b8:	69fb      	ldr	r3, [r7, #28]
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	69fa      	ldr	r2, [r7, #28]
 80024be:	69d2      	ldr	r2, [r2, #28]
 80024c0:	605a      	str	r2, [r3, #4]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	3318      	adds	r3, #24
 80024ca:	429a      	cmp	r2, r3
 80024cc:	d103      	bne.n	80024d6 <xTaskResumeAll+0x86>
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	6a1a      	ldr	r2, [r3, #32]
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	69fb      	ldr	r3, [r7, #28]
 80024d8:	2200      	movs	r2, #0
 80024da:	629a      	str	r2, [r3, #40]	; 0x28
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	1e5a      	subs	r2, r3, #1
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	601a      	str	r2, [r3, #0]
                    portMEMORY_BARRIER();
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80024e6:	69fb      	ldr	r3, [r7, #28]
 80024e8:	695b      	ldr	r3, [r3, #20]
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	69fb      	ldr	r3, [r7, #28]
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	69fa      	ldr	r2, [r7, #28]
 80024f2:	68d2      	ldr	r2, [r2, #12]
 80024f4:	609a      	str	r2, [r3, #8]
 80024f6:	69fb      	ldr	r3, [r7, #28]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	69fa      	ldr	r2, [r7, #28]
 80024fc:	6892      	ldr	r2, [r2, #8]
 80024fe:	605a      	str	r2, [r3, #4]
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685a      	ldr	r2, [r3, #4]
 8002504:	69fb      	ldr	r3, [r7, #28]
 8002506:	3304      	adds	r3, #4
 8002508:	429a      	cmp	r2, r3
 800250a:	d103      	bne.n	8002514 <xTaskResumeAll+0xc4>
 800250c:	69fb      	ldr	r3, [r7, #28]
 800250e:	68da      	ldr	r2, [r3, #12]
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	605a      	str	r2, [r3, #4]
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	2200      	movs	r2, #0
 8002518:	615a      	str	r2, [r3, #20]
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	1e5a      	subs	r2, r3, #1
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8002524:	69fb      	ldr	r3, [r7, #28]
 8002526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002528:	2201      	movs	r2, #1
 800252a:	409a      	lsls	r2, r3
 800252c:	4b40      	ldr	r3, [pc, #256]	; (8002630 <xTaskResumeAll+0x1e0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4313      	orrs	r3, r2
 8002532:	4a3f      	ldr	r2, [pc, #252]	; (8002630 <xTaskResumeAll+0x1e0>)
 8002534:	6013      	str	r3, [r2, #0]
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800253a:	493e      	ldr	r1, [pc, #248]	; (8002634 <xTaskResumeAll+0x1e4>)
 800253c:	4613      	mov	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	4413      	add	r3, r2
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	440b      	add	r3, r1
 8002546:	3304      	adds	r3, #4
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	68ba      	ldr	r2, [r7, #8]
 8002550:	609a      	str	r2, [r3, #8]
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	689a      	ldr	r2, [r3, #8]
 8002556:	69fb      	ldr	r3, [r7, #28]
 8002558:	60da      	str	r2, [r3, #12]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	69fa      	ldr	r2, [r7, #28]
 8002560:	3204      	adds	r2, #4
 8002562:	605a      	str	r2, [r3, #4]
 8002564:	69fb      	ldr	r3, [r7, #28]
 8002566:	1d1a      	adds	r2, r3, #4
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	609a      	str	r2, [r3, #8]
 800256c:	69fb      	ldr	r3, [r7, #28]
 800256e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002570:	4613      	mov	r3, r2
 8002572:	009b      	lsls	r3, r3, #2
 8002574:	4413      	add	r3, r2
 8002576:	009b      	lsls	r3, r3, #2
 8002578:	4a2e      	ldr	r2, [pc, #184]	; (8002634 <xTaskResumeAll+0x1e4>)
 800257a:	441a      	add	r2, r3
 800257c:	69fb      	ldr	r3, [r7, #28]
 800257e:	615a      	str	r2, [r3, #20]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002584:	492b      	ldr	r1, [pc, #172]	; (8002634 <xTaskResumeAll+0x1e4>)
 8002586:	4613      	mov	r3, r2
 8002588:	009b      	lsls	r3, r3, #2
 800258a:	4413      	add	r3, r2
 800258c:	009b      	lsls	r3, r3, #2
 800258e:	440b      	add	r3, r1
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	1c59      	adds	r1, r3, #1
 8002594:	4827      	ldr	r0, [pc, #156]	; (8002634 <xTaskResumeAll+0x1e4>)
 8002596:	4613      	mov	r3, r2
 8002598:	009b      	lsls	r3, r3, #2
 800259a:	4413      	add	r3, r2
 800259c:	009b      	lsls	r3, r3, #2
 800259e:	4403      	add	r3, r0
 80025a0:	6019      	str	r1, [r3, #0]

                    /* If the moved task has a priority higher than or equal to
                     * the current task then a yield must be performed. */
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80025a6:	4b24      	ldr	r3, [pc, #144]	; (8002638 <xTaskResumeAll+0x1e8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d302      	bcc.n	80025b6 <xTaskResumeAll+0x166>
                    {
                        xYieldPending = pdTRUE;
 80025b0:	4b22      	ldr	r3, [pc, #136]	; (800263c <xTaskResumeAll+0x1ec>)
 80025b2:	2201      	movs	r2, #1
 80025b4:	601a      	str	r2, [r3, #0]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80025b6:	4b1d      	ldr	r3, [pc, #116]	; (800262c <xTaskResumeAll+0x1dc>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	f47f af70 	bne.w	80024a0 <xTaskResumeAll+0x50>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( pxTCB != NULL )
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d001      	beq.n	80025ca <xTaskResumeAll+0x17a>
                     * which may have prevented the next unblock time from being
                     * re-calculated, in which case re-calculate it now.  Mainly
                     * important for low power tickless implementations, where
                     * this can prevent an unnecessary exit from low power
                     * state. */
                    prvResetNextTaskUnblockTime();
 80025c6:	f000 f9f1 	bl	80029ac <prvResetNextTaskUnblockTime>
                /* If any ticks occurred while the scheduler was suspended then
                 * they should be processed now.  This ensures the tick count does
                 * not  slip, and that any delayed tasks are resumed at the correct
                 * time. */
                {
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80025ca:	4b1d      	ldr	r3, [pc, #116]	; (8002640 <xTaskResumeAll+0x1f0>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	617b      	str	r3, [r7, #20]

                    if( xPendedCounts > ( TickType_t ) 0U )
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d010      	beq.n	80025f8 <xTaskResumeAll+0x1a8>
                    {
                        do
                        {
                            if( xTaskIncrementTick() != pdFALSE )
 80025d6:	f000 f837 	bl	8002648 <xTaskIncrementTick>
 80025da:	4603      	mov	r3, r0
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d002      	beq.n	80025e6 <xTaskResumeAll+0x196>
                            {
                                xYieldPending = pdTRUE;
 80025e0:	4b16      	ldr	r3, [pc, #88]	; (800263c <xTaskResumeAll+0x1ec>)
 80025e2:	2201      	movs	r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
                            else
                            {
                                mtCOVERAGE_TEST_MARKER();
                            }

                            --xPendedCounts;
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	3b01      	subs	r3, #1
 80025ea:	617b      	str	r3, [r7, #20]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 80025ec:	697b      	ldr	r3, [r7, #20]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f1      	bne.n	80025d6 <xTaskResumeAll+0x186>

                        xPendedTicks = 0;
 80025f2:	4b13      	ldr	r3, [pc, #76]	; (8002640 <xTaskResumeAll+0x1f0>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	601a      	str	r2, [r3, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }

                if( xYieldPending != pdFALSE )
 80025f8:	4b10      	ldr	r3, [pc, #64]	; (800263c <xTaskResumeAll+0x1ec>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d009      	beq.n	8002614 <xTaskResumeAll+0x1c4>
                {
                    #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8002600:	2301      	movs	r3, #1
 8002602:	61bb      	str	r3, [r7, #24]
                        }
                    #endif
                    taskYIELD_IF_USING_PREEMPTION();
 8002604:	4b0f      	ldr	r3, [pc, #60]	; (8002644 <xTaskResumeAll+0x1f4>)
 8002606:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800260a:	601a      	str	r2, [r3, #0]
 800260c:	f3bf 8f4f 	dsb	sy
 8002610:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
    taskEXIT_CRITICAL();
 8002614:	f000 fa90 	bl	8002b38 <vPortExitCritical>

    return xAlreadyYielded;
 8002618:	69bb      	ldr	r3, [r7, #24]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3720      	adds	r7, #32
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	20000170 	.word	0x20000170
 8002628:	2000014c 	.word	0x2000014c
 800262c:	20000110 	.word	0x20000110
 8002630:	20000154 	.word	0x20000154
 8002634:	2000007c 	.word	0x2000007c
 8002638:	20000078 	.word	0x20000078
 800263c:	20000160 	.word	0x20000160
 8002640:	2000015c 	.word	0x2000015c
 8002644:	e000ed04 	.word	0xe000ed04

08002648 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b08a      	sub	sp, #40	; 0x28
 800264c:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 800264e:	2300      	movs	r3, #0
 8002650:	627b      	str	r3, [r7, #36]	; 0x24
    /* Called by the portable layer each time a tick interrupt occurs.
     * Increments the tick then checks to see if the new tick value will cause any
     * tasks to be unblocked. */
    traceTASK_INCREMENT_TICK( xTickCount );

    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002652:	4b7d      	ldr	r3, [pc, #500]	; (8002848 <xTaskIncrementTick+0x200>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	f040 80ec 	bne.w	8002834 <xTaskIncrementTick+0x1ec>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800265c:	4b7b      	ldr	r3, [pc, #492]	; (800284c <xTaskIncrementTick+0x204>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	3301      	adds	r3, #1
 8002662:	623b      	str	r3, [r7, #32]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8002664:	4a79      	ldr	r2, [pc, #484]	; (800284c <xTaskIncrementTick+0x204>)
 8002666:	6a3b      	ldr	r3, [r7, #32]
 8002668:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d120      	bne.n	80026b2 <xTaskIncrementTick+0x6a>
        {
            taskSWITCH_DELAYED_LISTS();
 8002670:	4b77      	ldr	r3, [pc, #476]	; (8002850 <xTaskIncrementTick+0x208>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d00a      	beq.n	8002690 <xTaskIncrementTick+0x48>
        __asm volatile
 800267a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800267e:	f383 8811 	msr	BASEPRI, r3
 8002682:	f3bf 8f6f 	isb	sy
 8002686:	f3bf 8f4f 	dsb	sy
 800268a:	607b      	str	r3, [r7, #4]
    }
 800268c:	bf00      	nop
 800268e:	e7fe      	b.n	800268e <xTaskIncrementTick+0x46>
 8002690:	4b6f      	ldr	r3, [pc, #444]	; (8002850 <xTaskIncrementTick+0x208>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	61fb      	str	r3, [r7, #28]
 8002696:	4b6f      	ldr	r3, [pc, #444]	; (8002854 <xTaskIncrementTick+0x20c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a6d      	ldr	r2, [pc, #436]	; (8002850 <xTaskIncrementTick+0x208>)
 800269c:	6013      	str	r3, [r2, #0]
 800269e:	4a6d      	ldr	r2, [pc, #436]	; (8002854 <xTaskIncrementTick+0x20c>)
 80026a0:	69fb      	ldr	r3, [r7, #28]
 80026a2:	6013      	str	r3, [r2, #0]
 80026a4:	4b6c      	ldr	r3, [pc, #432]	; (8002858 <xTaskIncrementTick+0x210>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	3301      	adds	r3, #1
 80026aa:	4a6b      	ldr	r2, [pc, #428]	; (8002858 <xTaskIncrementTick+0x210>)
 80026ac:	6013      	str	r3, [r2, #0]
 80026ae:	f000 f97d 	bl	80029ac <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 80026b2:	4b6a      	ldr	r3, [pc, #424]	; (800285c <xTaskIncrementTick+0x214>)
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6a3a      	ldr	r2, [r7, #32]
 80026b8:	429a      	cmp	r2, r3
 80026ba:	f0c0 80a6 	bcc.w	800280a <xTaskIncrementTick+0x1c2>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80026be:	4b64      	ldr	r3, [pc, #400]	; (8002850 <xTaskIncrementTick+0x208>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d104      	bne.n	80026d2 <xTaskIncrementTick+0x8a>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026c8:	4b64      	ldr	r3, [pc, #400]	; (800285c <xTaskIncrementTick+0x214>)
 80026ca:	f04f 32ff 	mov.w	r2, #4294967295
 80026ce:	601a      	str	r2, [r3, #0]
                    break;
 80026d0:	e09b      	b.n	800280a <xTaskIncrementTick+0x1c2>
                {
                    /* The delayed list is not empty, get the value of the
                     * item at the head of the delayed list.  This is the time
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80026d2:	4b5f      	ldr	r3, [pc, #380]	; (8002850 <xTaskIncrementTick+0x208>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68db      	ldr	r3, [r3, #12]
 80026d8:	68db      	ldr	r3, [r3, #12]
 80026da:	61bb      	str	r3, [r7, #24]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80026dc:	69bb      	ldr	r3, [r7, #24]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	617b      	str	r3, [r7, #20]

                    if( xConstTickCount < xItemValue )
 80026e2:	6a3a      	ldr	r2, [r7, #32]
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d203      	bcs.n	80026f2 <xTaskIncrementTick+0xaa>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 80026ea:	4a5c      	ldr	r2, [pc, #368]	; (800285c <xTaskIncrementTick+0x214>)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	6013      	str	r3, [r2, #0]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80026f0:	e08b      	b.n	800280a <xTaskIncrementTick+0x1c2>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80026f2:	69bb      	ldr	r3, [r7, #24]
 80026f4:	695b      	ldr	r3, [r3, #20]
 80026f6:	613b      	str	r3, [r7, #16]
 80026f8:	69bb      	ldr	r3, [r7, #24]
 80026fa:	689b      	ldr	r3, [r3, #8]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	68d2      	ldr	r2, [r2, #12]
 8002700:	609a      	str	r2, [r3, #8]
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	69ba      	ldr	r2, [r7, #24]
 8002708:	6892      	ldr	r2, [r2, #8]
 800270a:	605a      	str	r2, [r3, #4]
 800270c:	693b      	ldr	r3, [r7, #16]
 800270e:	685a      	ldr	r2, [r3, #4]
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	3304      	adds	r3, #4
 8002714:	429a      	cmp	r2, r3
 8002716:	d103      	bne.n	8002720 <xTaskIncrementTick+0xd8>
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	68da      	ldr	r2, [r3, #12]
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	605a      	str	r2, [r3, #4]
 8002720:	69bb      	ldr	r3, [r7, #24]
 8002722:	2200      	movs	r2, #0
 8002724:	615a      	str	r2, [r3, #20]
 8002726:	693b      	ldr	r3, [r7, #16]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	1e5a      	subs	r2, r3, #1
 800272c:	693b      	ldr	r3, [r7, #16]
 800272e:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	2b00      	cmp	r3, #0
 8002736:	d01e      	beq.n	8002776 <xTaskIncrementTick+0x12e>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8002738:	69bb      	ldr	r3, [r7, #24]
 800273a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800273c:	60fb      	str	r3, [r7, #12]
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	69db      	ldr	r3, [r3, #28]
 8002742:	69ba      	ldr	r2, [r7, #24]
 8002744:	6a12      	ldr	r2, [r2, #32]
 8002746:	609a      	str	r2, [r3, #8]
 8002748:	69bb      	ldr	r3, [r7, #24]
 800274a:	6a1b      	ldr	r3, [r3, #32]
 800274c:	69ba      	ldr	r2, [r7, #24]
 800274e:	69d2      	ldr	r2, [r2, #28]
 8002750:	605a      	str	r2, [r3, #4]
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	685a      	ldr	r2, [r3, #4]
 8002756:	69bb      	ldr	r3, [r7, #24]
 8002758:	3318      	adds	r3, #24
 800275a:	429a      	cmp	r2, r3
 800275c:	d103      	bne.n	8002766 <xTaskIncrementTick+0x11e>
 800275e:	69bb      	ldr	r3, [r7, #24]
 8002760:	6a1a      	ldr	r2, [r3, #32]
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	605a      	str	r2, [r3, #4]
 8002766:	69bb      	ldr	r3, [r7, #24]
 8002768:	2200      	movs	r2, #0
 800276a:	629a      	str	r2, [r3, #40]	; 0x28
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	1e5a      	subs	r2, r3, #1
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8002776:	69bb      	ldr	r3, [r7, #24]
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	2201      	movs	r2, #1
 800277c:	409a      	lsls	r2, r3
 800277e:	4b38      	ldr	r3, [pc, #224]	; (8002860 <xTaskIncrementTick+0x218>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4313      	orrs	r3, r2
 8002784:	4a36      	ldr	r2, [pc, #216]	; (8002860 <xTaskIncrementTick+0x218>)
 8002786:	6013      	str	r3, [r2, #0]
 8002788:	69bb      	ldr	r3, [r7, #24]
 800278a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800278c:	4935      	ldr	r1, [pc, #212]	; (8002864 <xTaskIncrementTick+0x21c>)
 800278e:	4613      	mov	r3, r2
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	4413      	add	r3, r2
 8002794:	009b      	lsls	r3, r3, #2
 8002796:	440b      	add	r3, r1
 8002798:	3304      	adds	r3, #4
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	60bb      	str	r3, [r7, #8]
 800279e:	69bb      	ldr	r3, [r7, #24]
 80027a0:	68ba      	ldr	r2, [r7, #8]
 80027a2:	609a      	str	r2, [r3, #8]
 80027a4:	68bb      	ldr	r3, [r7, #8]
 80027a6:	689a      	ldr	r2, [r3, #8]
 80027a8:	69bb      	ldr	r3, [r7, #24]
 80027aa:	60da      	str	r2, [r3, #12]
 80027ac:	68bb      	ldr	r3, [r7, #8]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	3204      	adds	r2, #4
 80027b4:	605a      	str	r2, [r3, #4]
 80027b6:	69bb      	ldr	r3, [r7, #24]
 80027b8:	1d1a      	adds	r2, r3, #4
 80027ba:	68bb      	ldr	r3, [r7, #8]
 80027bc:	609a      	str	r2, [r3, #8]
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027c2:	4613      	mov	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	4413      	add	r3, r2
 80027c8:	009b      	lsls	r3, r3, #2
 80027ca:	4a26      	ldr	r2, [pc, #152]	; (8002864 <xTaskIncrementTick+0x21c>)
 80027cc:	441a      	add	r2, r3
 80027ce:	69bb      	ldr	r3, [r7, #24]
 80027d0:	615a      	str	r2, [r3, #20]
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027d6:	4923      	ldr	r1, [pc, #140]	; (8002864 <xTaskIncrementTick+0x21c>)
 80027d8:	4613      	mov	r3, r2
 80027da:	009b      	lsls	r3, r3, #2
 80027dc:	4413      	add	r3, r2
 80027de:	009b      	lsls	r3, r3, #2
 80027e0:	440b      	add	r3, r1
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	1c59      	adds	r1, r3, #1
 80027e6:	481f      	ldr	r0, [pc, #124]	; (8002864 <xTaskIncrementTick+0x21c>)
 80027e8:	4613      	mov	r3, r2
 80027ea:	009b      	lsls	r3, r3, #2
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	4403      	add	r3, r0
 80027f2:	6019      	str	r1, [r3, #0]
                        {
                            /* Preemption is on, but a context switch should
                             * only be performed if the unblocked task has a
                             * priority that is equal to or higher than the
                             * currently executing task. */
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80027f4:	69bb      	ldr	r3, [r7, #24]
 80027f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80027f8:	4b1b      	ldr	r3, [pc, #108]	; (8002868 <xTaskIncrementTick+0x220>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fe:	429a      	cmp	r2, r3
 8002800:	f4ff af5d 	bcc.w	80026be <xTaskIncrementTick+0x76>
                            {
                                xSwitchRequired = pdTRUE;
 8002804:	2301      	movs	r3, #1
 8002806:	627b      	str	r3, [r7, #36]	; 0x24
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8002808:	e759      	b.n	80026be <xTaskIncrementTick+0x76>
        /* Tasks of equal priority to the currently running task will share
         * processing time (time slice) if preemption is on, and the application
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800280a:	4b17      	ldr	r3, [pc, #92]	; (8002868 <xTaskIncrementTick+0x220>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002810:	4914      	ldr	r1, [pc, #80]	; (8002864 <xTaskIncrementTick+0x21c>)
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b01      	cmp	r3, #1
 8002820:	d901      	bls.n	8002826 <xTaskIncrementTick+0x1de>
                {
                    xSwitchRequired = pdTRUE;
 8002822:	2301      	movs	r3, #1
 8002824:	627b      	str	r3, [r7, #36]	; 0x24
            }
        #endif /* configUSE_TICK_HOOK */

        #if ( configUSE_PREEMPTION == 1 )
            {
                if( xYieldPending != pdFALSE )
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <xTaskIncrementTick+0x224>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d007      	beq.n	800283e <xTaskIncrementTick+0x1f6>
                {
                    xSwitchRequired = pdTRUE;
 800282e:	2301      	movs	r3, #1
 8002830:	627b      	str	r3, [r7, #36]	; 0x24
 8002832:	e004      	b.n	800283e <xTaskIncrementTick+0x1f6>
            }
        #endif /* configUSE_PREEMPTION */
    }
    else
    {
        ++xPendedTicks;
 8002834:	4b0e      	ldr	r3, [pc, #56]	; (8002870 <xTaskIncrementTick+0x228>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	4a0d      	ldr	r2, [pc, #52]	; (8002870 <xTaskIncrementTick+0x228>)
 800283c:	6013      	str	r3, [r2, #0]
                vApplicationTickHook();
            }
        #endif
    }

    return xSwitchRequired;
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8002840:	4618      	mov	r0, r3
 8002842:	3728      	adds	r7, #40	; 0x28
 8002844:	46bd      	mov	sp, r7
 8002846:	bd80      	pop	{r7, pc}
 8002848:	20000170 	.word	0x20000170
 800284c:	20000150 	.word	0x20000150
 8002850:	20000108 	.word	0x20000108
 8002854:	2000010c 	.word	0x2000010c
 8002858:	20000164 	.word	0x20000164
 800285c:	2000016c 	.word	0x2000016c
 8002860:	20000154 	.word	0x20000154
 8002864:	2000007c 	.word	0x2000007c
 8002868:	20000078 	.word	0x20000078
 800286c:	20000160 	.word	0x20000160
 8002870:	2000015c 	.word	0x2000015c

08002874 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8002874:	b480      	push	{r7}
 8002876:	b087      	sub	sp, #28
 8002878:	af00      	add	r7, sp, #0
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800287a:	4b27      	ldr	r3, [pc, #156]	; (8002918 <vTaskSwitchContext+0xa4>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	2b00      	cmp	r3, #0
 8002880:	d003      	beq.n	800288a <vTaskSwitchContext+0x16>
    {
        /* The scheduler is currently suspended - do not allow a context
         * switch. */
        xYieldPending = pdTRUE;
 8002882:	4b26      	ldr	r3, [pc, #152]	; (800291c <vTaskSwitchContext+0xa8>)
 8002884:	2201      	movs	r2, #1
 8002886:	601a      	str	r2, [r3, #0]
                 * for additional information. */
                _impure_ptr = &( pxCurrentTCB->xNewLib_reent );
            }
        #endif /* configUSE_NEWLIB_REENTRANT */
    }
}
 8002888:	e03f      	b.n	800290a <vTaskSwitchContext+0x96>
        xYieldPending = pdFALSE;
 800288a:	4b24      	ldr	r3, [pc, #144]	; (800291c <vTaskSwitchContext+0xa8>)
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002890:	4b23      	ldr	r3, [pc, #140]	; (8002920 <vTaskSwitchContext+0xac>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	60fb      	str	r3, [r7, #12]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	72fb      	strb	r3, [r7, #11]
            return ucReturn;
 800289e:	7afb      	ldrb	r3, [r7, #11]
 80028a0:	f1c3 031f 	rsb	r3, r3, #31
 80028a4:	617b      	str	r3, [r7, #20]
 80028a6:	491f      	ldr	r1, [pc, #124]	; (8002924 <vTaskSwitchContext+0xb0>)
 80028a8:	697a      	ldr	r2, [r7, #20]
 80028aa:	4613      	mov	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	4413      	add	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	440b      	add	r3, r1
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d10a      	bne.n	80028d0 <vTaskSwitchContext+0x5c>
        __asm volatile
 80028ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028be:	f383 8811 	msr	BASEPRI, r3
 80028c2:	f3bf 8f6f 	isb	sy
 80028c6:	f3bf 8f4f 	dsb	sy
 80028ca:	607b      	str	r3, [r7, #4]
    }
 80028cc:	bf00      	nop
 80028ce:	e7fe      	b.n	80028ce <vTaskSwitchContext+0x5a>
 80028d0:	697a      	ldr	r2, [r7, #20]
 80028d2:	4613      	mov	r3, r2
 80028d4:	009b      	lsls	r3, r3, #2
 80028d6:	4413      	add	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4a12      	ldr	r2, [pc, #72]	; (8002924 <vTaskSwitchContext+0xb0>)
 80028dc:	4413      	add	r3, r2
 80028de:	613b      	str	r3, [r7, #16]
 80028e0:	693b      	ldr	r3, [r7, #16]
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	685a      	ldr	r2, [r3, #4]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	605a      	str	r2, [r3, #4]
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	685a      	ldr	r2, [r3, #4]
 80028ee:	693b      	ldr	r3, [r7, #16]
 80028f0:	3308      	adds	r3, #8
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d104      	bne.n	8002900 <vTaskSwitchContext+0x8c>
 80028f6:	693b      	ldr	r3, [r7, #16]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	685a      	ldr	r2, [r3, #4]
 80028fc:	693b      	ldr	r3, [r7, #16]
 80028fe:	605a      	str	r2, [r3, #4]
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	685b      	ldr	r3, [r3, #4]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	4a08      	ldr	r2, [pc, #32]	; (8002928 <vTaskSwitchContext+0xb4>)
 8002908:	6013      	str	r3, [r2, #0]
}
 800290a:	bf00      	nop
 800290c:	371c      	adds	r7, #28
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	20000170 	.word	0x20000170
 800291c:	20000160 	.word	0x20000160
 8002920:	20000154 	.word	0x20000154
 8002924:	2000007c 	.word	0x2000007c
 8002928:	20000078 	.word	0x20000078

0800292c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8002932:	2300      	movs	r3, #0
 8002934:	607b      	str	r3, [r7, #4]
 8002936:	e00c      	b.n	8002952 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	4613      	mov	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	4a12      	ldr	r2, [pc, #72]	; (800298c <prvInitialiseTaskLists+0x60>)
 8002944:	4413      	add	r3, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f7ff fbcc 	bl	80020e4 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	3301      	adds	r3, #1
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	2b04      	cmp	r3, #4
 8002956:	d9ef      	bls.n	8002938 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8002958:	480d      	ldr	r0, [pc, #52]	; (8002990 <prvInitialiseTaskLists+0x64>)
 800295a:	f7ff fbc3 	bl	80020e4 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800295e:	480d      	ldr	r0, [pc, #52]	; (8002994 <prvInitialiseTaskLists+0x68>)
 8002960:	f7ff fbc0 	bl	80020e4 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8002964:	480c      	ldr	r0, [pc, #48]	; (8002998 <prvInitialiseTaskLists+0x6c>)
 8002966:	f7ff fbbd 	bl	80020e4 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
        {
            vListInitialise( &xTasksWaitingTermination );
 800296a:	480c      	ldr	r0, [pc, #48]	; (800299c <prvInitialiseTaskLists+0x70>)
 800296c:	f7ff fbba 	bl	80020e4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            vListInitialise( &xSuspendedTaskList );
 8002970:	480b      	ldr	r0, [pc, #44]	; (80029a0 <prvInitialiseTaskLists+0x74>)
 8002972:	f7ff fbb7 	bl	80020e4 <vListInitialise>
        }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8002976:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <prvInitialiseTaskLists+0x78>)
 8002978:	4a05      	ldr	r2, [pc, #20]	; (8002990 <prvInitialiseTaskLists+0x64>)
 800297a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800297c:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <prvInitialiseTaskLists+0x7c>)
 800297e:	4a05      	ldr	r2, [pc, #20]	; (8002994 <prvInitialiseTaskLists+0x68>)
 8002980:	601a      	str	r2, [r3, #0]
}
 8002982:	bf00      	nop
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	2000007c 	.word	0x2000007c
 8002990:	200000e0 	.word	0x200000e0
 8002994:	200000f4 	.word	0x200000f4
 8002998:	20000110 	.word	0x20000110
 800299c:	20000124 	.word	0x20000124
 80029a0:	20000138 	.word	0x20000138
 80029a4:	20000108 	.word	0x20000108
 80029a8:	2000010c 	.word	0x2000010c

080029ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80029ac:	b480      	push	{r7}
 80029ae:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80029b0:	4b0a      	ldr	r3, [pc, #40]	; (80029dc <prvResetNextTaskUnblockTime+0x30>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d104      	bne.n	80029c4 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 80029ba:	4b09      	ldr	r3, [pc, #36]	; (80029e0 <prvResetNextTaskUnblockTime+0x34>)
 80029bc:	f04f 32ff 	mov.w	r2, #4294967295
 80029c0:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 80029c2:	e005      	b.n	80029d0 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80029c4:	4b05      	ldr	r3, [pc, #20]	; (80029dc <prvResetNextTaskUnblockTime+0x30>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a04      	ldr	r2, [pc, #16]	; (80029e0 <prvResetNextTaskUnblockTime+0x34>)
 80029ce:	6013      	str	r3, [r2, #0]
}
 80029d0:	bf00      	nop
 80029d2:	46bd      	mov	sp, r7
 80029d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d8:	4770      	bx	lr
 80029da:	bf00      	nop
 80029dc:	20000108 	.word	0x20000108
 80029e0:	2000016c 	.word	0x2000016c

080029e4 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80029e4:	b480      	push	{r7}
 80029e6:	b085      	sub	sp, #20
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	60f8      	str	r0, [r7, #12]
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	3b04      	subs	r3, #4
 80029f4:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80029fc:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	3b04      	subs	r3, #4
 8002a02:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f023 0201 	bic.w	r2, r3, #1
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	3b04      	subs	r3, #4
 8002a12:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8002a14:	4a0c      	ldr	r2, [pc, #48]	; (8002a48 <pxPortInitialiseStack+0x64>)
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	3b14      	subs	r3, #20
 8002a1e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	3b04      	subs	r3, #4
 8002a2a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	f06f 0202 	mvn.w	r2, #2
 8002a32:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	3b20      	subs	r3, #32
 8002a38:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	3714      	adds	r7, #20
 8002a40:	46bd      	mov	sp, r7
 8002a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a46:	4770      	bx	lr
 8002a48:	08002a4d 	.word	0x08002a4d

08002a4c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b085      	sub	sp, #20
 8002a50:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8002a56:	4b12      	ldr	r3, [pc, #72]	; (8002aa0 <prvTaskExitError+0x54>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a5e:	d00a      	beq.n	8002a76 <prvTaskExitError+0x2a>
        __asm volatile
 8002a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a64:	f383 8811 	msr	BASEPRI, r3
 8002a68:	f3bf 8f6f 	isb	sy
 8002a6c:	f3bf 8f4f 	dsb	sy
 8002a70:	60fb      	str	r3, [r7, #12]
    }
 8002a72:	bf00      	nop
 8002a74:	e7fe      	b.n	8002a74 <prvTaskExitError+0x28>
        __asm volatile
 8002a76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a7a:	f383 8811 	msr	BASEPRI, r3
 8002a7e:	f3bf 8f6f 	isb	sy
 8002a82:	f3bf 8f4f 	dsb	sy
 8002a86:	60bb      	str	r3, [r7, #8]
    }
 8002a88:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8002a8a:	bf00      	nop
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d0fc      	beq.n	8002a8c <prvTaskExitError+0x40>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8002a92:	bf00      	nop
 8002a94:	bf00      	nop
 8002a96:	3714      	adds	r7, #20
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr
 8002aa0:	2000000c 	.word	0x2000000c
	...

08002ab0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <pxCurrentTCBConst2>)
 8002ab2:	6819      	ldr	r1, [r3, #0]
 8002ab4:	6808      	ldr	r0, [r1, #0]
 8002ab6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aba:	f380 8809 	msr	PSP, r0
 8002abe:	f3bf 8f6f 	isb	sy
 8002ac2:	f04f 0000 	mov.w	r0, #0
 8002ac6:	f380 8811 	msr	BASEPRI, r0
 8002aca:	4770      	bx	lr
 8002acc:	f3af 8000 	nop.w

08002ad0 <pxCurrentTCBConst2>:
 8002ad0:	20000078 	.word	0x20000078
        "	bx r14							\n"
        "									\n"
        "	.align 4						\n"
        "pxCurrentTCBConst2: .word pxCurrentTCB				\n"
        );
}
 8002ad4:	bf00      	nop
 8002ad6:	bf00      	nop

08002ad8 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8002ad8:	b480      	push	{r7}
 8002ada:	b083      	sub	sp, #12
 8002adc:	af00      	add	r7, sp, #0
        __asm volatile
 8002ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ae2:	f383 8811 	msr	BASEPRI, r3
 8002ae6:	f3bf 8f6f 	isb	sy
 8002aea:	f3bf 8f4f 	dsb	sy
 8002aee:	607b      	str	r3, [r7, #4]
    }
 8002af0:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8002af2:	4b0f      	ldr	r3, [pc, #60]	; (8002b30 <vPortEnterCritical+0x58>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	3301      	adds	r3, #1
 8002af8:	4a0d      	ldr	r2, [pc, #52]	; (8002b30 <vPortEnterCritical+0x58>)
 8002afa:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8002afc:	4b0c      	ldr	r3, [pc, #48]	; (8002b30 <vPortEnterCritical+0x58>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b01      	cmp	r3, #1
 8002b02:	d10f      	bne.n	8002b24 <vPortEnterCritical+0x4c>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002b04:	4b0b      	ldr	r3, [pc, #44]	; (8002b34 <vPortEnterCritical+0x5c>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	b2db      	uxtb	r3, r3
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d00a      	beq.n	8002b24 <vPortEnterCritical+0x4c>
        __asm volatile
 8002b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b12:	f383 8811 	msr	BASEPRI, r3
 8002b16:	f3bf 8f6f 	isb	sy
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	603b      	str	r3, [r7, #0]
    }
 8002b20:	bf00      	nop
 8002b22:	e7fe      	b.n	8002b22 <vPortEnterCritical+0x4a>
    }
}
 8002b24:	bf00      	nop
 8002b26:	370c      	adds	r7, #12
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr
 8002b30:	2000000c 	.word	0x2000000c
 8002b34:	e000ed04 	.word	0xe000ed04

08002b38 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002b38:	b480      	push	{r7}
 8002b3a:	b083      	sub	sp, #12
 8002b3c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 8002b3e:	4b12      	ldr	r3, [pc, #72]	; (8002b88 <vPortExitCritical+0x50>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d10a      	bne.n	8002b5c <vPortExitCritical+0x24>
        __asm volatile
 8002b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b4a:	f383 8811 	msr	BASEPRI, r3
 8002b4e:	f3bf 8f6f 	isb	sy
 8002b52:	f3bf 8f4f 	dsb	sy
 8002b56:	607b      	str	r3, [r7, #4]
    }
 8002b58:	bf00      	nop
 8002b5a:	e7fe      	b.n	8002b5a <vPortExitCritical+0x22>
    uxCriticalNesting--;
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <vPortExitCritical+0x50>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	3b01      	subs	r3, #1
 8002b62:	4a09      	ldr	r2, [pc, #36]	; (8002b88 <vPortExitCritical+0x50>)
 8002b64:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8002b66:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <vPortExitCritical+0x50>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d105      	bne.n	8002b7a <vPortExitCritical+0x42>
 8002b6e:	2300      	movs	r3, #0
 8002b70:	603b      	str	r3, [r7, #0]
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8002b72:	683b      	ldr	r3, [r7, #0]
 8002b74:	f383 8811 	msr	BASEPRI, r3
        (
            "	msr basepri, %0	"::"r" ( ulNewMaskValue ) : "memory"
        );
    }
 8002b78:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 8002b7a:	bf00      	nop
 8002b7c:	370c      	adds	r7, #12
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
 8002b86:	bf00      	nop
 8002b88:	2000000c 	.word	0x2000000c
 8002b8c:	00000000 	.word	0x00000000

08002b90 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8002b90:	f3ef 8009 	mrs	r0, PSP
 8002b94:	f3bf 8f6f 	isb	sy
 8002b98:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <pxCurrentTCBConst>)
 8002b9a:	681a      	ldr	r2, [r3, #0]
 8002b9c:	f01e 0f10 	tst.w	lr, #16
 8002ba0:	bf08      	it	eq
 8002ba2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8002ba6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002baa:	6010      	str	r0, [r2, #0]
 8002bac:	e92d 0009 	stmdb	sp!, {r0, r3}
 8002bb0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8002bb4:	f380 8811 	msr	BASEPRI, r0
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	f3bf 8f6f 	isb	sy
 8002bc0:	f7ff fe58 	bl	8002874 <vTaskSwitchContext>
 8002bc4:	f04f 0000 	mov.w	r0, #0
 8002bc8:	f380 8811 	msr	BASEPRI, r0
 8002bcc:	bc09      	pop	{r0, r3}
 8002bce:	6819      	ldr	r1, [r3, #0]
 8002bd0:	6808      	ldr	r0, [r1, #0]
 8002bd2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bd6:	f01e 0f10 	tst.w	lr, #16
 8002bda:	bf08      	it	eq
 8002bdc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002be0:	f380 8809 	msr	PSP, r0
 8002be4:	f3bf 8f6f 	isb	sy
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	f3af 8000 	nop.w

08002bf0 <pxCurrentTCBConst>:
 8002bf0:	20000078 	.word	0x20000078
        "										\n"
        "	.align 4							\n"
        "pxCurrentTCBConst: .word pxCurrentTCB	\n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8002bf4:	bf00      	nop
 8002bf6:	bf00      	nop

08002bf8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002bf8:	b580      	push	{r7, lr}
 8002bfa:	b082      	sub	sp, #8
 8002bfc:	af00      	add	r7, sp, #0
        __asm volatile
 8002bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c02:	f383 8811 	msr	BASEPRI, r3
 8002c06:	f3bf 8f6f 	isb	sy
 8002c0a:	f3bf 8f4f 	dsb	sy
 8002c0e:	607b      	str	r3, [r7, #4]
    }
 8002c10:	bf00      	nop
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8002c12:	f7ff fd19 	bl	8002648 <xTaskIncrementTick>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d003      	beq.n	8002c24 <SysTick_Handler+0x2c>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8002c1c:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <SysTick_Handler+0x40>)
 8002c1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c22:	601a      	str	r2, [r3, #0]
 8002c24:	2300      	movs	r3, #0
 8002c26:	603b      	str	r3, [r7, #0]
        __asm volatile
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	f383 8811 	msr	BASEPRI, r3
    }
 8002c2e:	bf00      	nop
        }
    }
    portENABLE_INTERRUPTS();
}
 8002c30:	bf00      	nop
 8002c32:	3708      	adds	r7, #8
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	e000ed04 	.word	0xe000ed04

08002c3c <pvPortMalloc>:
PRIVILEGED_DATA static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b08a      	sub	sp, #40	; 0x28
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock, * pxPreviousBlock, * pxNewBlockLink;
    void * pvReturn = NULL;
 8002c44:	2300      	movs	r3, #0
 8002c46:	61fb      	str	r3, [r7, #28]

    vTaskSuspendAll();
 8002c48:	f7ff fbf4 	bl	8002434 <vTaskSuspendAll>
    {
        /* If this is the first call to malloc then the heap will require
         * initialisation to setup the list of free blocks. */
        if( pxEnd == NULL )
 8002c4c:	4b65      	ldr	r3, [pc, #404]	; (8002de4 <pvPortMalloc+0x1a8>)
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d101      	bne.n	8002c58 <pvPortMalloc+0x1c>
        {
            prvHeapInit();
 8002c54:	f000 f934 	bl	8002ec0 <prvHeapInit>

        /* Check the requested block size is not so large that the top bit is
         * set.  The top bit of the block size member of the BlockLink_t structure
         * is used to determine who owns the block - the application or the
         * kernel, so it must be free. */
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8002c58:	4b63      	ldr	r3, [pc, #396]	; (8002de8 <pvPortMalloc+0x1ac>)
 8002c5a:	681a      	ldr	r2, [r3, #0]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	4013      	ands	r3, r2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f040 80a7 	bne.w	8002db4 <pvPortMalloc+0x178>
        {
            /* The wanted size must be increased so it can contain a BlockLink_t
             * structure in addition to the requested amount of bytes. */
            if( ( xWantedSize > 0 ) &&
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d02d      	beq.n	8002cc8 <pvPortMalloc+0x8c>
                ( ( xWantedSize + xHeapStructSize ) >  xWantedSize ) ) /* Overflow check */
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	4413      	add	r3, r2
            if( ( xWantedSize > 0 ) &&
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d227      	bcs.n	8002cc8 <pvPortMalloc+0x8c>
            {
                xWantedSize += xHeapStructSize;
 8002c78:	2208      	movs	r2, #8
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4413      	add	r3, r2
 8002c7e:	607b      	str	r3, [r7, #4]

                /* Ensure that blocks are always aligned. */
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d021      	beq.n	8002cce <pvPortMalloc+0x92>
                {
                    /* Byte alignment required. Check for overflow. */
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	f023 0307 	bic.w	r3, r3, #7
 8002c90:	3308      	adds	r3, #8
 8002c92:	687a      	ldr	r2, [r7, #4]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d214      	bcs.n	8002cc2 <pvPortMalloc+0x86>
                            > xWantedSize )
                    {
                        xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	f023 0307 	bic.w	r3, r3, #7
 8002c9e:	3308      	adds	r3, #8
 8002ca0:	607b      	str	r3, [r7, #4]
                        configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	f003 0307 	and.w	r3, r3, #7
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d010      	beq.n	8002cce <pvPortMalloc+0x92>
        __asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	617b      	str	r3, [r7, #20]
    }
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <pvPortMalloc+0x84>
                    }
                    else
                    {
                        xWantedSize = 0;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002cc6:	e002      	b.n	8002cce <pvPortMalloc+0x92>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else
            {
                xWantedSize = 0;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	607b      	str	r3, [r7, #4]
 8002ccc:	e000      	b.n	8002cd0 <pvPortMalloc+0x94>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002cce:	bf00      	nop
            }

            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d06e      	beq.n	8002db4 <pvPortMalloc+0x178>
 8002cd6:	4b45      	ldr	r3, [pc, #276]	; (8002dec <pvPortMalloc+0x1b0>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	429a      	cmp	r2, r3
 8002cde:	d869      	bhi.n	8002db4 <pvPortMalloc+0x178>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 8002ce0:	4b43      	ldr	r3, [pc, #268]	; (8002df0 <pvPortMalloc+0x1b4>)
 8002ce2:	623b      	str	r3, [r7, #32]
                pxBlock = xStart.pxNextFreeBlock;
 8002ce4:	4b42      	ldr	r3, [pc, #264]	; (8002df0 <pvPortMalloc+0x1b4>)
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	627b      	str	r3, [r7, #36]	; 0x24

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cea:	e004      	b.n	8002cf6 <pvPortMalloc+0xba>
                {
                    pxPreviousBlock = pxBlock;
 8002cec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cee:	623b      	str	r3, [r7, #32]
                    pxBlock = pxBlock->pxNextFreeBlock;
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	627b      	str	r3, [r7, #36]	; 0x24
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8002cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	687a      	ldr	r2, [r7, #4]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d903      	bls.n	8002d08 <pvPortMalloc+0xcc>
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1f1      	bne.n	8002cec <pvPortMalloc+0xb0>
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 8002d08:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <pvPortMalloc+0x1a8>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0e:	429a      	cmp	r2, r3
 8002d10:	d050      	beq.n	8002db4 <pvPortMalloc+0x178>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8002d12:	6a3b      	ldr	r3, [r7, #32]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	2208      	movs	r2, #8
 8002d18:	4413      	add	r3, r2
 8002d1a:	61fb      	str	r3, [r7, #28]

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	6a3b      	ldr	r3, [r7, #32]
 8002d22:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8002d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d26:	685a      	ldr	r2, [r3, #4]
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	1ad2      	subs	r2, r2, r3
 8002d2c:	2308      	movs	r3, #8
 8002d2e:	005b      	lsls	r3, r3, #1
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d91f      	bls.n	8002d74 <pvPortMalloc+0x138>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8002d34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4413      	add	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d00a      	beq.n	8002d5c <pvPortMalloc+0x120>
        __asm volatile
 8002d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d4a:	f383 8811 	msr	BASEPRI, r3
 8002d4e:	f3bf 8f6f 	isb	sy
 8002d52:	f3bf 8f4f 	dsb	sy
 8002d56:	613b      	str	r3, [r7, #16]
    }
 8002d58:	bf00      	nop
 8002d5a:	e7fe      	b.n	8002d5a <pvPortMalloc+0x11e>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5e:	685a      	ldr	r2, [r3, #4]
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	1ad2      	subs	r2, r2, r3
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8002d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002d6e:	69b8      	ldr	r0, [r7, #24]
 8002d70:	f000 f908 	bl	8002f84 <prvInsertBlockIntoFreeList>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8002d74:	4b1d      	ldr	r3, [pc, #116]	; (8002dec <pvPortMalloc+0x1b0>)
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	1ad3      	subs	r3, r2, r3
 8002d7e:	4a1b      	ldr	r2, [pc, #108]	; (8002dec <pvPortMalloc+0x1b0>)
 8002d80:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8002d82:	4b1a      	ldr	r3, [pc, #104]	; (8002dec <pvPortMalloc+0x1b0>)
 8002d84:	681a      	ldr	r2, [r3, #0]
 8002d86:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <pvPortMalloc+0x1b8>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	429a      	cmp	r2, r3
 8002d8c:	d203      	bcs.n	8002d96 <pvPortMalloc+0x15a>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002d8e:	4b17      	ldr	r3, [pc, #92]	; (8002dec <pvPortMalloc+0x1b0>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a18      	ldr	r2, [pc, #96]	; (8002df4 <pvPortMalloc+0x1b8>)
 8002d94:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	685a      	ldr	r2, [r3, #4]
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <pvPortMalloc+0x1ac>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	431a      	orrs	r2, r3
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8002da4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da6:	2200      	movs	r2, #0
 8002da8:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8002daa:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <pvPortMalloc+0x1bc>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3301      	adds	r3, #1
 8002db0:	4a11      	ldr	r2, [pc, #68]	; (8002df8 <pvPortMalloc+0x1bc>)
 8002db2:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8002db4:	f7ff fb4c 	bl	8002450 <xTaskResumeAll>
                mtCOVERAGE_TEST_MARKER();
            }
        }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f003 0307 	and.w	r3, r3, #7
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00a      	beq.n	8002dd8 <pvPortMalloc+0x19c>
        __asm volatile
 8002dc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dc6:	f383 8811 	msr	BASEPRI, r3
 8002dca:	f3bf 8f6f 	isb	sy
 8002dce:	f3bf 8f4f 	dsb	sy
 8002dd2:	60fb      	str	r3, [r7, #12]
    }
 8002dd4:	bf00      	nop
 8002dd6:	e7fe      	b.n	8002dd6 <pvPortMalloc+0x19a>
    return pvReturn;
 8002dd8:	69fb      	ldr	r3, [r7, #28]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3728      	adds	r7, #40	; 0x28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	20012d7c 	.word	0x20012d7c
 8002de8:	20012d90 	.word	0x20012d90
 8002dec:	20012d80 	.word	0x20012d80
 8002df0:	20012d74 	.word	0x20012d74
 8002df4:	20012d84 	.word	0x20012d84
 8002df8:	20012d88 	.word	0x20012d88

08002dfc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	617b      	str	r3, [r7, #20]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d04d      	beq.n	8002eaa <vPortFree+0xae>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8002e0e:	2308      	movs	r3, #8
 8002e10:	425b      	negs	r3, r3
 8002e12:	697a      	ldr	r2, [r7, #20]
 8002e14:	4413      	add	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8002e18:	697b      	ldr	r3, [r7, #20]
 8002e1a:	613b      	str	r3, [r7, #16]

        /* Check the block is actually allocated. */
        configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	685a      	ldr	r2, [r3, #4]
 8002e20:	4b24      	ldr	r3, [pc, #144]	; (8002eb4 <vPortFree+0xb8>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4013      	ands	r3, r2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d10a      	bne.n	8002e40 <vPortFree+0x44>
        __asm volatile
 8002e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e2e:	f383 8811 	msr	BASEPRI, r3
 8002e32:	f3bf 8f6f 	isb	sy
 8002e36:	f3bf 8f4f 	dsb	sy
 8002e3a:	60fb      	str	r3, [r7, #12]
    }
 8002e3c:	bf00      	nop
 8002e3e:	e7fe      	b.n	8002e3e <vPortFree+0x42>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002e40:	693b      	ldr	r3, [r7, #16]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d00a      	beq.n	8002e5e <vPortFree+0x62>
        __asm volatile
 8002e48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e4c:	f383 8811 	msr	BASEPRI, r3
 8002e50:	f3bf 8f6f 	isb	sy
 8002e54:	f3bf 8f4f 	dsb	sy
 8002e58:	60bb      	str	r3, [r7, #8]
    }
 8002e5a:	bf00      	nop
 8002e5c:	e7fe      	b.n	8002e5c <vPortFree+0x60>

        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	685a      	ldr	r2, [r3, #4]
 8002e62:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <vPortFree+0xb8>)
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4013      	ands	r3, r2
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d01e      	beq.n	8002eaa <vPortFree+0xae>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d11a      	bne.n	8002eaa <vPortFree+0xae>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	685a      	ldr	r2, [r3, #4]
 8002e78:	4b0e      	ldr	r3, [pc, #56]	; (8002eb4 <vPortFree+0xb8>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	43db      	mvns	r3, r3
 8002e7e:	401a      	ands	r2, r3
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	605a      	str	r2, [r3, #4]

                vTaskSuspendAll();
 8002e84:	f7ff fad6 	bl	8002434 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	4b0a      	ldr	r3, [pc, #40]	; (8002eb8 <vPortFree+0xbc>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4413      	add	r3, r2
 8002e92:	4a09      	ldr	r2, [pc, #36]	; (8002eb8 <vPortFree+0xbc>)
 8002e94:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002e96:	6938      	ldr	r0, [r7, #16]
 8002e98:	f000 f874 	bl	8002f84 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8002e9c:	4b07      	ldr	r3, [pc, #28]	; (8002ebc <vPortFree+0xc0>)
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	3301      	adds	r3, #1
 8002ea2:	4a06      	ldr	r2, [pc, #24]	; (8002ebc <vPortFree+0xc0>)
 8002ea4:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8002ea6:	f7ff fad3 	bl	8002450 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8002eaa:	bf00      	nop
 8002eac:	3718      	adds	r7, #24
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	bd80      	pop	{r7, pc}
 8002eb2:	bf00      	nop
 8002eb4:	20012d90 	.word	0x20012d90
 8002eb8:	20012d80 	.word	0x20012d80
 8002ebc:	20012d8c 	.word	0x20012d8c

08002ec0 <prvHeapInit>:
    /* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void ) /* PRIVILEGED_FUNCTION */
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b085      	sub	sp, #20
 8002ec4:	af00      	add	r7, sp, #0
    BlockLink_t * pxFirstFreeBlock;
    uint8_t * pucAlignedHeap;
    size_t uxAddress;
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8002ec6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002eca:	60bb      	str	r3, [r7, #8]

    /* Ensure the heap starts on a correctly aligned boundary. */
    uxAddress = ( size_t ) ucHeap;
 8002ecc:	4b27      	ldr	r3, [pc, #156]	; (8002f6c <prvHeapInit+0xac>)
 8002ece:	60fb      	str	r3, [r7, #12]

    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d00c      	beq.n	8002ef4 <prvHeapInit+0x34>
    {
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	3307      	adds	r3, #7
 8002ede:	60fb      	str	r3, [r7, #12]
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f023 0307 	bic.w	r3, r3, #7
 8002ee6:	60fb      	str	r3, [r7, #12]
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8002ee8:	68ba      	ldr	r2, [r7, #8]
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	4a1f      	ldr	r2, [pc, #124]	; (8002f6c <prvHeapInit+0xac>)
 8002ef0:	4413      	add	r3, r2
 8002ef2:	60bb      	str	r3, [r7, #8]
    }

    pucAlignedHeap = ( uint8_t * ) uxAddress;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	607b      	str	r3, [r7, #4]

    /* xStart is used to hold a pointer to the first item in the list of free
     * blocks.  The void cast is used to prevent compiler warnings. */
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8002ef8:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <prvHeapInit+0xb0>)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6013      	str	r3, [r2, #0]
    xStart.xBlockSize = ( size_t ) 0;
 8002efe:	4b1c      	ldr	r3, [pc, #112]	; (8002f70 <prvHeapInit+0xb0>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	605a      	str	r2, [r3, #4]

    /* pxEnd is used to mark the end of the list of free blocks and is inserted
     * at the end of the heap space. */
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68ba      	ldr	r2, [r7, #8]
 8002f08:	4413      	add	r3, r2
 8002f0a:	60fb      	str	r3, [r7, #12]
    uxAddress -= xHeapStructSize;
 8002f0c:	2208      	movs	r2, #8
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	1a9b      	subs	r3, r3, r2
 8002f12:	60fb      	str	r3, [r7, #12]
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f023 0307 	bic.w	r3, r3, #7
 8002f1a:	60fb      	str	r3, [r7, #12]
    pxEnd = ( void * ) uxAddress;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <prvHeapInit+0xb4>)
 8002f20:	6013      	str	r3, [r2, #0]
    pxEnd->xBlockSize = 0;
 8002f22:	4b14      	ldr	r3, [pc, #80]	; (8002f74 <prvHeapInit+0xb4>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	2200      	movs	r2, #0
 8002f28:	605a      	str	r2, [r3, #4]
    pxEnd->pxNextFreeBlock = NULL;
 8002f2a:	4b12      	ldr	r3, [pc, #72]	; (8002f74 <prvHeapInit+0xb4>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	601a      	str	r2, [r3, #0]

    /* To start with there is a single free block that is sized to take up the
     * entire heap space, minus the space taken by pxEnd. */
    pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	603b      	str	r3, [r7, #0]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	68fa      	ldr	r2, [r7, #12]
 8002f3a:	1ad2      	subs	r2, r2, r3
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	605a      	str	r2, [r3, #4]
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002f40:	4b0c      	ldr	r3, [pc, #48]	; (8002f74 <prvHeapInit+0xb4>)
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	601a      	str	r2, [r3, #0]

    /* Only one block exists - and it covers the entire usable heap space. */
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <prvHeapInit+0xb8>)
 8002f4e:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	4a09      	ldr	r2, [pc, #36]	; (8002f7c <prvHeapInit+0xbc>)
 8002f56:	6013      	str	r3, [r2, #0]

    /* Work out the position of the top bit in a size_t variable. */
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002f58:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <prvHeapInit+0xc0>)
 8002f5a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002f5e:	601a      	str	r2, [r3, #0]
}
 8002f60:	bf00      	nop
 8002f62:	3714      	adds	r7, #20
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr
 8002f6c:	20000174 	.word	0x20000174
 8002f70:	20012d74 	.word	0x20012d74
 8002f74:	20012d7c 	.word	0x20012d7c
 8002f78:	20012d84 	.word	0x20012d84
 8002f7c:	20012d80 	.word	0x20012d80
 8002f80:	20012d90 	.word	0x20012d90

08002f84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8002f84:	b480      	push	{r7}
 8002f86:	b085      	sub	sp, #20
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8002f8c:	4b28      	ldr	r3, [pc, #160]	; (8003030 <prvInsertBlockIntoFreeList+0xac>)
 8002f8e:	60fb      	str	r3, [r7, #12]
 8002f90:	e002      	b.n	8002f98 <prvInsertBlockIntoFreeList+0x14>
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	60fb      	str	r3, [r7, #12]
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	687a      	ldr	r2, [r7, #4]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d8f7      	bhi.n	8002f92 <prvInsertBlockIntoFreeList+0xe>
        /* Nothing to do here, just iterate to the right position. */
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	68ba      	ldr	r2, [r7, #8]
 8002fac:	4413      	add	r3, r2
 8002fae:	687a      	ldr	r2, [r7, #4]
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d108      	bne.n	8002fc6 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	685a      	ldr	r2, [r3, #4]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	441a      	add	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	68ba      	ldr	r2, [r7, #8]
 8002fd0:	441a      	add	r2, r3
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d118      	bne.n	800300c <prvInsertBlockIntoFreeList+0x88>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4b15      	ldr	r3, [pc, #84]	; (8003034 <prvInsertBlockIntoFreeList+0xb0>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d00d      	beq.n	8003002 <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685a      	ldr	r2, [r3, #4]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	441a      	add	r2, r3
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	601a      	str	r2, [r3, #0]
 8003000:	e008      	b.n	8003014 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8003002:	4b0c      	ldr	r3, [pc, #48]	; (8003034 <prvInsertBlockIntoFreeList+0xb0>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	601a      	str	r2, [r3, #0]
 800300a:	e003      	b.n	8003014 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681a      	ldr	r2, [r3, #0]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8003014:	68fa      	ldr	r2, [r7, #12]
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	429a      	cmp	r2, r3
 800301a:	d002      	beq.n	8003022 <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003022:	bf00      	nop
 8003024:	3714      	adds	r7, #20
 8003026:	46bd      	mov	sp, r7
 8003028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302c:	4770      	bx	lr
 800302e:	bf00      	nop
 8003030:	20012d74 	.word	0x20012d74
 8003034:	20012d7c 	.word	0x20012d7c

08003038 <__libc_init_array>:
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	4d0d      	ldr	r5, [pc, #52]	; (8003070 <__libc_init_array+0x38>)
 800303c:	4c0d      	ldr	r4, [pc, #52]	; (8003074 <__libc_init_array+0x3c>)
 800303e:	1b64      	subs	r4, r4, r5
 8003040:	10a4      	asrs	r4, r4, #2
 8003042:	2600      	movs	r6, #0
 8003044:	42a6      	cmp	r6, r4
 8003046:	d109      	bne.n	800305c <__libc_init_array+0x24>
 8003048:	4d0b      	ldr	r5, [pc, #44]	; (8003078 <__libc_init_array+0x40>)
 800304a:	4c0c      	ldr	r4, [pc, #48]	; (800307c <__libc_init_array+0x44>)
 800304c:	f000 f820 	bl	8003090 <_init>
 8003050:	1b64      	subs	r4, r4, r5
 8003052:	10a4      	asrs	r4, r4, #2
 8003054:	2600      	movs	r6, #0
 8003056:	42a6      	cmp	r6, r4
 8003058:	d105      	bne.n	8003066 <__libc_init_array+0x2e>
 800305a:	bd70      	pop	{r4, r5, r6, pc}
 800305c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003060:	4798      	blx	r3
 8003062:	3601      	adds	r6, #1
 8003064:	e7ee      	b.n	8003044 <__libc_init_array+0xc>
 8003066:	f855 3b04 	ldr.w	r3, [r5], #4
 800306a:	4798      	blx	r3
 800306c:	3601      	adds	r6, #1
 800306e:	e7f2      	b.n	8003056 <__libc_init_array+0x1e>
 8003070:	08003108 	.word	0x08003108
 8003074:	08003108 	.word	0x08003108
 8003078:	08003108 	.word	0x08003108
 800307c:	0800310c 	.word	0x0800310c

08003080 <memset>:
 8003080:	4402      	add	r2, r0
 8003082:	4603      	mov	r3, r0
 8003084:	4293      	cmp	r3, r2
 8003086:	d100      	bne.n	800308a <memset+0xa>
 8003088:	4770      	bx	lr
 800308a:	f803 1b01 	strb.w	r1, [r3], #1
 800308e:	e7f9      	b.n	8003084 <memset+0x4>

08003090 <_init>:
 8003090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003092:	bf00      	nop
 8003094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003096:	bc08      	pop	{r3}
 8003098:	469e      	mov	lr, r3
 800309a:	4770      	bx	lr

0800309c <_fini>:
 800309c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800309e:	bf00      	nop
 80030a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80030a2:	bc08      	pop	{r3}
 80030a4:	469e      	mov	lr, r3
 80030a6:	4770      	bx	lr
